"use strict";(self.webpackChunkvuepress_theme_knzn=self.webpackChunkvuepress_theme_knzn||[]).push([[832],{4070:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t=JSON.parse('{"key":"v-7210f09e","path":"/24e36dbb45deefe9307cf347bedece2c/","title":"JavaScript 数据结构之二叉搜索树","lang":"zh-CN","frontmatter":{"permalink":"/24e36dbb45deefe9307cf347bedece2c/","title":"JavaScript 数据结构之二叉搜索树","date":"2019-03-27T10:36:20.000Z","categories":["frontEnd"],"tags":["js"]},"excerpt":"","headers":[{"level":2,"title":"一、认识树结构","slug":"一、认识树结构","children":[]},{"level":2,"title":"二、 树结构的表示方式","slug":"二、-树结构的表示方式","children":[]},{"level":2,"title":"二、 二叉树的概念","slug":"二、-二叉树的概念","children":[]},{"level":2,"title":"三、 二叉搜索树(BST, Binary Search Tree)","slug":"三、-二叉搜索树-bst-binary-search-tree","children":[{"level":3,"title":"1. 二叉搜索树的性质","slug":"_1-二叉搜索树的性质","children":[]},{"level":3,"title":"2. 二叉搜索的遍历方式","slug":"_2-二叉搜索的遍历方式","children":[]},{"level":3,"title":"3. 二叉搜索的删除","slug":"_3-二叉搜索的删除","children":[]}]},{"level":2,"title":"四、 二叉搜索树的实现","slug":"四、-二叉搜索树的实现","children":[]},{"level":2,"title":"五、代码测试","slug":"五、代码测试","children":[]}],"git":{"updatedTime":1659094015000,"contributors":[{"name":"张焕标","email":"1140457303@qq.com","commits":1}]},"filePathRelative":"杂谈/js笔记/tree.md"}')},5879:(n,s,a)=>{a.r(s),a.d(s,{default:()=>o});var t=a(6252);const p=[(0,t.uE)('<h2 id="一、认识树结构" tabindex="-1"><a class="header-anchor" href="#一、认识树结构" aria-hidden="true">#</a> 一、认识树结构</h2><p>树结构示意图</p><p><img src="https://upload-images.jianshu.io/upload_images/12493822-21ec03db150c0a89.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="tree.jpg"></p><p>树结构中的一些术语</p><p>树(Tree): n(n&gt;=0) 个节点构成的有限集合</p><ul><li>n = 0 时, 称为空树</li><li>根节点(Root): 树的第一个节点，称为根节点</li><li>子树(SubTree): 根节点下的子节点，又可以形成新的树，称为子树</li><li>节点的度(Degree): 节点的直接子节点个数</li><li>树的度：所有节点中节点度数的最大值</li><li>叶子节点(Leaf)： 度为 0 的节点，即没有子节点的节点</li><li>父节点(Parent)：有子节点的节点，相对于子节点，称为父节点</li><li>子节点(Child): 有父节点的节点，相对于父节点，称为子节点</li><li>兄弟节点(Sibling): 具有同一父节点的节点，彼此之间是兄弟节点</li><li>路径: 从节点 n1 到 nk 经过的节点个数(n1...nk)，称为路径</li><li>路径的长度：从节点 n1 到 nk 经过的边的个数，称为长度</li><li>节点的层次(Level): 规定根节点在第一层，其它任一节点的层数是其父节点从层数加 1</li><li>树是深度(Depth): 树中所有节点的最大层次，就是这棵树的深度</li></ul><h2 id="二、-树结构的表示方式" tabindex="-1"><a class="header-anchor" href="#二、-树结构的表示方式" aria-hidden="true">#</a> 二、 树结构的表示方式</h2><p>最普通的表示方式</p><p><img src="https://upload-images.jianshu.io/upload_images/12493822-f83a7c96f1ff03aa.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="tree_normal.jpg"></p><p>上面的树结构中，节点的子节点个数不确定，创建节点的代码难以统一编写</p><p>儿子-兄弟表示法</p><p><img src="https://upload-images.jianshu.io/upload_images/12493822-4749792584e32beb.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="tree_son_brother.jpg"></p><p>上面的树结构，创建节点的方法可以表示为</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>leftChild <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>brother <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>儿子-兄弟表示法旋转</p><p><img src="https://upload-images.jianshu.io/upload_images/12493822-14098311e7cffe3e.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="tree_rotate.jpg"></p><p>将拥有任意个子节点的树，通过儿子兄弟法表示，然后顺时针旋转 45 度，就得到了一棵二叉树</p><p>因此，可以得出结论： 任意一棵树，都可以转换为二叉树</p><h2 id="二、-二叉树的概念" tabindex="-1"><a class="header-anchor" href="#二、-二叉树的概念" aria-hidden="true">#</a> 二、 二叉树的概念</h2><p>二叉树： 每一个节点，最多有两个子节点的树</p><p>二叉树的特性</p><ul><li>二叉树的第 i 层，最多可以有 2^(i-1) 个节点; i &gt;= 1</li><li>深度为 k 的二叉树， 节点总数最多为 2^k - 1 个; k &gt;= 1</li><li>二叉树的叶子节点数记做 n0, 度为 2 的节点数记为 n2, 两者满足关系 n0 = n2 + 1</li></ul><p>完美二叉树: 除了最后一层的叶子节点， 其余每一层的节点都有两个子节点，这样的树称为完美二叉树</p><p><img src="https://upload-images.jianshu.io/upload_images/12493822-3e5b66c7a06122cb.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="tree_perfect.jpg"></p><p>完全二叉树：除了最后一层的叶子节点，其余每一层的节点数都达到最大，且最后一层从左到右的节点需要连续存在，只能缺少右侧的若干节点</p><p><img src="https://upload-images.jianshu.io/upload_images/12493822-124b3ea8795f9d81.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="tree_complete.jpg"></p><h2 id="三、-二叉搜索树-bst-binary-search-tree" tabindex="-1"><a class="header-anchor" href="#三、-二叉搜索树-bst-binary-search-tree" aria-hidden="true">#</a> 三、 二叉搜索树(BST, Binary Search Tree)</h2><h3 id="_1-二叉搜索树的性质" tabindex="-1"><a class="header-anchor" href="#_1-二叉搜索树的性质" aria-hidden="true">#</a> 1. 二叉搜索树的性质</h3><ul><li>非空左子树所有节点的键值小于父节点的键值</li><li>非空右子树所有节点的键值大于父节点的键值</li><li>左右子树本身也是二叉搜索树</li></ul><p>二叉搜索树的特点： 相对较小的值总是保存在左节点上，相对较大的值总是保存在右节点上</p><h3 id="_2-二叉搜索的遍历方式" tabindex="-1"><a class="header-anchor" href="#_2-二叉搜索的遍历方式" aria-hidden="true">#</a> 2. 二叉搜索的遍历方式</h3><p>先序遍历: 根节点 -&gt; 左子树 -&gt; 右子树</p><p><img src="https://upload-images.jianshu.io/upload_images/12493822-8481fe2184000776.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="tree_pre_order.jpg"></p><p>中序遍历: 左子树 -&gt; 根节点 -&gt; 右子树</p><p><img src="https://upload-images.jianshu.io/upload_images/12493822-39fd09f8758c3b70.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="tree_in_order.jpg"></p><p>后序遍历: 左子树 -&gt; 右子树 -&gt; 根节点</p><p><img src="https://upload-images.jianshu.io/upload_images/12493822-2b250d47e914fa72.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="tree_post_order.jpg"></p><h3 id="_3-二叉搜索的删除" tabindex="-1"><a class="header-anchor" href="#_3-二叉搜索的删除" aria-hidden="true">#</a> 3. 二叉搜索的删除</h3><p>删除二叉搜索树中的节点，首先需要找到这个节点，然后根据节点的位置进行相应的删除操作</p><ul><li><p>情况一： 删除的是叶节点， 判断该叶节点是左子节点还是右子节点， 将父节点的左子节点或右子节点设为 null</p></li><li><p>情况二： 删除的节点只有一个子节点, 判断该叶节点是左子节点还是右子节点，将父节点的左子节点或右子节点设为该节点的子节点 <img src="https://upload-images.jianshu.io/upload_images/12493822-036ea934c982d659.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="tree_del_1.jpg"></p></li><li><p>情况三： 删除的节点只两个子节点, 甚至子节点下面还有子节点,需要找到该节点的前驱（该节点的左子树中的最大值）, 或找到该节点的后继（该节点的右子树中的最小值）, 来替换该节点 <img src="https://upload-images.jianshu.io/upload_images/12493822-ae1b38272dea7d60.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="tree_del_2.jpg"></p></li></ul><h2 id="四、-二叉搜索树的实现" tabindex="-1"><a class="header-anchor" href="#四、-二叉搜索树的实现" aria-hidden="true">#</a> 四、 二叉搜索树的实现</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">BinarySerachTree</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 插入操作</span>\n  <span class="token function">insert</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> newNode<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">insertNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">,</span> newNode<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">insertNode</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> newNode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>newNode<span class="token punctuation">.</span>key <span class="token operator">&lt;</span> node<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 向左子树插入数据</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        node<span class="token punctuation">.</span>left <span class="token operator">=</span> newNode<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">insertNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> newNode<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 向右子树插入数据</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        node<span class="token punctuation">.</span>right <span class="token operator">=</span> newNode<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">insertNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> newNode<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 查找操作, 找到返回 true , 否则返回 false</span>\n  <span class="token function">search</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> node <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">searchNode</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token operator">!</span>node<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">searchNode</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">let</span> node <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">;</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>key <span class="token operator">&gt;</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        node <span class="token operator">=</span> node<span class="token punctuation">.</span>left<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>key <span class="token operator">&lt;</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        node <span class="token operator">=</span> node<span class="token punctuation">.</span>right<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 相等的情况</span>\n        <span class="token keyword">return</span> node<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 先序遍历 根节点 -&gt; 左子树 -&gt; 右子树</span>\n  <span class="token function">preOrderTraversal</span><span class="token punctuation">(</span><span class="token parameter">handler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">preOrderTraversalNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">preOrderTraversalNode</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> handler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">handler</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">preOrderTraversalNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">preOrderTraversalNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 中序遍历 左子树 -&gt; 根节点 -&gt; 右子树</span>\n  <span class="token function">inOrderTraversal</span><span class="token punctuation">(</span><span class="token parameter">handler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">inOrderTraversalNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">inOrderTraversalNode</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> handler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">inOrderTraversalNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">handler</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">inOrderTraversalNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 后序遍历 左子树 -&gt; 右子树 -&gt; 根节点</span>\n  <span class="token function">postOrderTraversal</span><span class="token punctuation">(</span><span class="token parameter">handler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">postOrderTraversalNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">postOrderTraversalNode</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> handler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">postOrderTraversalNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">postOrderTraversalNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">handler</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 最小值</span>\n  <span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> node <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      node <span class="token operator">=</span> node<span class="token punctuation">.</span>left<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> node<span class="token punctuation">.</span>key<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 最大值</span>\n  <span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> node <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      node <span class="token operator">=</span> node<span class="token punctuation">.</span>right<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> node<span class="token punctuation">.</span>key<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">remove</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">;</span>\n    <span class="token keyword">let</span> parent <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">;</span>\n    <span class="token keyword">let</span> isLeftChild <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 1. 查找节点</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>key <span class="token operator">!==</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      parent <span class="token operator">=</span> current<span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">&lt;</span> current<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        isLeftChild <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n        current <span class="token operator">=</span> current<span class="token punctuation">.</span>left<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        isLeftChild <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n        current <span class="token operator">=</span> current<span class="token punctuation">.</span>right<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n\n      <span class="token comment">// current 为null 时，说明二叉树中不存在该数据</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>current<span class="token punctuation">.</span>left <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>current<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 2.要删除的是叶子节点</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>isLeftChild<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        parent<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        parent<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>current<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 3. 要删除的节点只有一个左子节点</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> current<span class="token punctuation">.</span>left<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>isLeftChild<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        parent<span class="token punctuation">.</span>left <span class="token operator">=</span> current<span class="token punctuation">.</span>left<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        parent<span class="token punctuation">.</span>right <span class="token operator">=</span> current<span class="token punctuation">.</span>left<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>current<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 4. 要删除的节点只有一个右子节点</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> current<span class="token punctuation">.</span>right<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>isLeftChild<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        parent<span class="token punctuation">.</span>left <span class="token operator">=</span> current<span class="token punctuation">.</span>right<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        parent<span class="token punctuation">.</span>right <span class="token operator">=</span> current<span class="token punctuation">.</span>right<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 5. 要删除的节点有两个子节点</span>\n      <span class="token keyword">const</span> successor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSuccessor</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> successor<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>isLeftChild<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        parent<span class="token punctuation">.</span>left <span class="token operator">=</span> successor<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        parent<span class="token punctuation">.</span>right <span class="token operator">=</span> successor<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      successor<span class="token punctuation">.</span>left <span class="token operator">=</span> current<span class="token punctuation">.</span>left<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 获取后继节点</span>\n  <span class="token function">getSuccessor</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> successor <span class="token operator">=</span> node<span class="token punctuation">;</span>\n    <span class="token keyword">let</span> current <span class="token operator">=</span> node<span class="token punctuation">.</span>right<span class="token punctuation">;</span>\n    <span class="token keyword">let</span> parent <span class="token operator">=</span> node<span class="token punctuation">;</span>\n\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      parent <span class="token operator">=</span> successor<span class="token punctuation">;</span>\n      successor <span class="token operator">=</span> current<span class="token punctuation">;</span>\n      current <span class="token operator">=</span> current<span class="token punctuation">.</span>left<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 如果后继节点, 不是删除节点的直接子节点, 需要处理后继节点的右子树</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>successor <span class="token operator">!==</span> node<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      parent<span class="token punctuation">.</span>left <span class="token operator">=</span> successor<span class="token punctuation">.</span>right<span class="token punctuation">;</span> <span class="token comment">// 后继节点的父节点的左子节点, 设置为后继节点的右节点</span>\n      successor<span class="token punctuation">.</span>right <span class="token operator">=</span> node<span class="token punctuation">.</span>right<span class="token punctuation">;</span> <span class="token comment">// 设置后继节点的右子树</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> successor<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="五、代码测试" tabindex="-1"><a class="header-anchor" href="#五、代码测试" aria-hidden="true">#</a> 五、代码测试</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 测试代码</span>\n<span class="token keyword">const</span> bst <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinarySerachTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 插入数据</span>\nbst<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nbst<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nbst<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nbst<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nbst<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nbst<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nbst<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nbst<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nbst<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nbst<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nbst<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nbst<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nbst<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nbst<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nbst<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 前序遍历</span>\n<span class="token keyword">let</span> resultString <span class="token operator">=</span> <span class="token string">&quot;前序遍历:&quot;</span><span class="token punctuation">;</span>\nbst<span class="token punctuation">.</span><span class="token function">preOrderTraversal</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  resultString <span class="token operator">+=</span> key <span class="token operator">+</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>resultString<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 前序遍历:11 7 5 3 6 9 8 10 15 13 12 14 20 18 25</span>\n\n<span class="token comment">// 中序遍历</span>\nresultString <span class="token operator">=</span> <span class="token string">&quot;中序遍历:&quot;</span><span class="token punctuation">;</span>\nbst<span class="token punctuation">.</span><span class="token function">inOrderTraversal</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  resultString <span class="token operator">+=</span> key <span class="token operator">+</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>resultString<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 中序遍历:3 5 6 7 8 9 10 11 12 13 14 15 18 20 25</span>\n\n<span class="token comment">// 后续遍历</span>\nresultString <span class="token operator">=</span> <span class="token string">&quot;后序遍历:&quot;</span><span class="token punctuation">;</span>\nbst<span class="token punctuation">.</span><span class="token function">postOrderTraversal</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  resultString <span class="token operator">+=</span> key <span class="token operator">+</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>resultString<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 后序遍历:3 6 5 8 10 9 7 12 14 13 18 25 20 15 11</span>\n\n<span class="token comment">// 获取最值</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;最小值:&quot;</span> <span class="token operator">+</span> bst<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 最小值:3</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;最大值:&quot;</span> <span class="token operator">+</span> bst<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 最大值:25</span>\n\n<span class="token comment">// 查找特定的值</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bst<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bst<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n\n<span class="token comment">// 删除操作</span>\nbst<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nresultString <span class="token operator">=</span> <span class="token string">&quot;删除节点的后继节点，不是直接右子节点的情况测试:&quot;</span><span class="token punctuation">;</span>\nbst<span class="token punctuation">.</span><span class="token function">preOrderTraversal</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  resultString <span class="token operator">+=</span> key <span class="token operator">+</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>resultString<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 删除节点的后继节点，不是直接右子节点的情况测试:11 7 5 3 6 9 8 10 18 13 12 14 20 25</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',44)],e={},o=(0,a(3744).Z)(e,[["render",function(n,s){return(0,t.wg)(),(0,t.iD)("div",null,p)}]])}}]);