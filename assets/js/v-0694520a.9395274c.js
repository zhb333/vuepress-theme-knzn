"use strict";(self.webpackChunkvuepress_theme_knzn=self.webpackChunkvuepress_theme_knzn||[]).push([[8298],{3872:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e=JSON.parse('{"key":"v-0694520a","path":"/3ac42a04085e8baf294165c214a7b889/","title":"28 对声明合并的爱与恨","lang":"zh-CN","frontmatter":{"permalink":"/3ac42a04085e8baf294165c214a7b889/","title":"28 对声明合并的爱与恨","author":"前端程序猿","tags":["typescript"],"categories":["大前端"],"postImage":"/images/typescript.webp"},"excerpt":"<p>声明合并是指 TypeScript 编译器会将名字相同的多个声明合并为一个声明，合并后的声明同时拥有多个声明的特性。我们知道在 JavaScrip 中，使用 var 关键字定义变量时，定义相同名字的变量，后面的会覆盖前面的值。使用 let 定义变量和使用 const 定义常量时，不允许名字重复。在 TypeScript 中，接口、命名空间是可以多次声明的，最后 TypeScript 会将多个同名声明合并为一个。我们下来看个简单的例子：</p>\\n","headers":[{"level":2,"title":"1. 补充知识","slug":"_1-补充知识","children":[]},{"level":2,"title":"2. 合并接口","slug":"_2-合并接口","children":[]},{"level":2,"title":"3. 合并命名空间","slug":"_3-合并命名空间","children":[]},{"level":2,"title":"4. 不同类型合并","slug":"_4-不同类型合并","children":[{"level":3,"title":"(1) 命名空间和类","slug":"_1-命名空间和类","children":[]},{"level":3,"title":"(2) 命名空间和函数","slug":"_2-命名空间和函数","children":[]},{"level":3,"title":"(3) 命名空间和枚举","slug":"_3-命名空间和枚举","children":[]}]},{"level":2,"title":"小结","slug":"小结","children":[]}],"git":{"updatedTime":1659093557000,"contributors":[{"name":"张焕标","email":"1140457303@qq.com","commits":1}]},"filePathRelative":"TypeScript学习笔记/28-Love-and-Hate-About-Statement-Mergers.md"}')},8063:(n,s,a)=>{a.r(s),a.d(s,{default:()=>c});var e=a(6252);const t=[(0,e.uE)('<p>声明合并是指 TypeScript 编译器会将名字相同的多个声明合并为一个声明，合并后的声明同时拥有多个声明的特性。我们知道在 JavaScrip 中，使用 var 关键字定义变量时，定义相同名字的变量，后面的会覆盖前面的值。使用 let 定义变量和使用 const 定义常量时，不允许名字重复。在 TypeScript 中，接口、命名空间是可以多次声明的，最后 TypeScript 会将多个同名声明合并为一个。我们下来看个简单的例子：</p><blockquote><p>理想的书籍是智慧的钥匙。 ——列夫·托尔斯泰</p></blockquote><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Info</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">interface</span> <span class="token class-name">Info</span> <span class="token punctuation">{</span>\n  age<span class="token operator">:</span> <span class="token builtin">number</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> info<span class="token operator">:</span> Info\ninfo <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// error 类型“{ name: string; }”中缺少属性“age”</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;lison&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\ninfo <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// right</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;lison&#39;</span><span class="token punctuation">,</span>\n  age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，我们定义了两个同名接口 Info，每个接口里都定义了一个必备属性，最后定义 info 类型为 Info 时，info 的定义要求同时包含 name 和 age 属性。这就是声明合并的简单示例，接下来我们详细学习。</p><h2 id="_1-补充知识" tabindex="-1"><a class="header-anchor" href="#_1-补充知识" aria-hidden="true">#</a> 1. 补充知识</h2><p>TypeScript 的所有声明概括起来，会创建这三种实体之一：命名空间、类型和值:</p><ul><li>命名空间的创建实际是创建一个对象，对象的属性是在命名空间里 export 导出的内容；</li><li>类型的声明是创建一个类型并赋给一个名字；</li><li>值的声明就是创建一个在 JavaScript 中可以使用的值。</li></ul><p>下面这个表格会清晰的告诉你，每一种声明类型会创建这三种实体中的哪种，先来说明一下，第一列是指声明的内容，每一行包含 4 列，表明这一行中，第一列的声明类型创建了后面三列哪种实体，打钩即表示创建了该实体：</p><table><thead><tr><th style="text-align:left;">声明类型</th><th style="text-align:center;">创建了命名空间</th><th style="text-align:center;">创建了类型</th><th style="text-align:center;">创建了值</th></tr></thead><tbody><tr><td style="text-align:left;">Namespace</td><td style="text-align:center;">√</td><td style="text-align:center;"></td><td style="text-align:center;">√</td></tr><tr><td style="text-align:left;">Class</td><td style="text-align:center;"></td><td style="text-align:center;">√</td><td style="text-align:center;">√</td></tr><tr><td style="text-align:left;">Enum</td><td style="text-align:center;"></td><td style="text-align:center;">√</td><td style="text-align:center;">√</td></tr><tr><td style="text-align:left;">Interface</td><td style="text-align:center;"></td><td style="text-align:center;">√</td><td style="text-align:center;"></td></tr><tr><td style="text-align:left;">Type Alias 类型别名</td><td style="text-align:center;"></td><td style="text-align:center;">√</td><td style="text-align:center;"></td></tr><tr><td style="text-align:left;">Function</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;">√</td></tr><tr><td style="text-align:left;">Variable</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;">√</td></tr></tbody></table><p>可以看到，只要命名空间创建了命名空间这种实体。Class、Enum 两个，Class 即是实际的值也作为类使用，Enum 编译为 JavaScript 后也是实际值，而且我们讲过，一定条件下，它的成员可以作为类型使用；Interface 和类型别名是纯粹的类型；而 Funciton 和 Variable 只是创建了 JavaScript 中可用的值，不能作为类型使用，注意这里 Variable 是变量，不是常量，常量是可以作为类型使用的。</p><h2 id="_2-合并接口" tabindex="-1"><a class="header-anchor" href="#_2-合并接口" aria-hidden="true">#</a> 2. 合并接口</h2><p>我们在本节课一开始的例子中，简单示范了一下接口声明的合并，下面我们来补充一些内容。</p><p>多个同名接口，定义的非函数的成员命名应该是不重复的，如果重复了，类型应该是相同的，否则将会报错。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Info</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">interface</span> <span class="token class-name">Info</span> <span class="token punctuation">{</span>\n  age<span class="token operator">:</span> <span class="token builtin">number</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">interface</span> <span class="token class-name">Info</span> <span class="token punctuation">{</span>\n  age<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token comment">// error 后续属性声明必须属于同一类型。属性“age”的类型必须为“number”，但此处却为类型“boolean”</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于函数成员，每个同名函数成员都会被当成这个函数的重载，且合并时后面的接口具有更高的优先级。来看下多个同名函数成员的例子：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Res</span> <span class="token punctuation">{</span>\n  <span class="token function">getRes</span><span class="token punctuation">(</span>input<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">interface</span> <span class="token class-name">Res</span> <span class="token punctuation">{</span>\n  <span class="token function">getRes</span><span class="token punctuation">(</span>input<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> res<span class="token operator">:</span> Res <span class="token operator">=</span> <span class="token punctuation">{</span>\n  getRes<span class="token operator">:</span> <span class="token punctuation">(</span>input<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> input <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> input<span class="token punctuation">.</span>length\n    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token function">String</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\nres<span class="token punctuation">.</span><span class="token function">getRes</span><span class="token punctuation">(</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token comment">// error 类型“number”上不存在属性“length”</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-合并命名空间" tabindex="-1"><a class="header-anchor" href="#_3-合并命名空间" aria-hidden="true">#</a> 3. 合并命名空间</h2><p>同名命名空间最后会将多个命名空间导出的内容进行合并，如下面两个命名空间：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">namespace</span> Validation <span class="token punctuation">{</span>\n  <span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">checkNumber</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">namespace</span> Validation <span class="token punctuation">{</span>\n  <span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">checkString</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面定义两个同名命名空间，效果相当于：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">namespace</span> Validation <span class="token punctuation">{</span>\n  <span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">checkNumber</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">checkString</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在命名空间里，有时我们并不是把所有内容都对外部可见，对于没有导出的内容，在其它同名命名空间内是无法访问的：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">namespace</span> Validation <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> numberReg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[0-9]+$</span><span class="token regex-delimiter">/</span></span>\n  <span class="token keyword">export</span> <span class="token keyword">const</span> stringReg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[A-Za-z]+$</span><span class="token regex-delimiter">/</span></span>\n  <span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">checkString</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">namespace</span> Validation <span class="token punctuation">{</span>\n  <span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">checkNumber</span> <span class="token operator">=</span> <span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> numberReg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token comment">// error 找不到名称“numberReg”</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面定义的两个命名空间，numberReg 没有使用 export 导出，所以在第二个同名命名空间内是无法使用的，如果给 const numberReg 前面加上 export，就可以在第二个命名空间使用了。</p><h2 id="_4-不同类型合并" tabindex="-1"><a class="header-anchor" href="#_4-不同类型合并" aria-hidden="true">#</a> 4. 不同类型合并</h2><p>命名空间分别和类、函数、枚举都可以合并，下面我们来一一说明：</p><h3 id="_1-命名空间和类" tabindex="-1"><a class="header-anchor" href="#_1-命名空间和类" aria-hidden="true">#</a> (1) 命名空间和类</h3><p>这里要求同名的类和命名空间在定义的时候，类的定义必须在命名空间前面，最后合并之后的效果，一个包含一些以命名空间导出内容为静态属性的类，来看例子</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Validation</span> <span class="token punctuation">{</span>\n  <span class="token function">checkType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">namespace</span> Validation <span class="token punctuation">{</span>\n  <span class="token keyword">export</span> <span class="token keyword">const</span> numberReg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[0-9]+$</span><span class="token regex-delimiter">/</span></span>\n  <span class="token keyword">export</span> <span class="token keyword">const</span> stringReg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[A-Za-z]+$</span><span class="token regex-delimiter">/</span></span>\n  <span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">checkString</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">namespace</span> Validation <span class="token punctuation">{</span>\n  <span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">checkNumber</span> <span class="token operator">=</span> <span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> numberReg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Validation<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// { checkType: fun () {} }</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Validation<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span>\n<span class="token doc-comment comment">/**\n<span class="token punctuation">{</span>\n    checkNumber: ...\n    checkString: ...\n    numberReg: ...\n    stringReg: ...\n<span class="token punctuation">}</span>\n*/</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-命名空间和函数" tabindex="-1"><a class="header-anchor" href="#_2-命名空间和函数" aria-hidden="true">#</a> (2) 命名空间和函数</h3><p>在 JavaScript 中，函数也是对象，所以可以给一个函数设置属性，在 TypeScript 中，就可以通过声明合并实现。但同样要求，函数的定义要在同名命名空间前面，我们再拿之前讲过的计数器的实现来看下，如何利用声明合并实现计数器的定义：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">countUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  countUp<span class="token punctuation">.</span>count<span class="token operator">++</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">namespace</span> countUp <span class="token punctuation">{</span>\n  <span class="token keyword">export</span> <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span>\n<span class="token punctuation">}</span>\n<span class="token function">countUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token function">countUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>countUp<span class="token punctuation">.</span>count<span class="token punctuation">)</span> <span class="token comment">// 2</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-命名空间和枚举" tabindex="-1"><a class="header-anchor" href="#_3-命名空间和枚举" aria-hidden="true">#</a> (3) 命名空间和枚举</h3><p>可以通过命名空间和枚举的合并，为枚举拓展内容，枚举和同名命名空间的先后顺序是没有要求的，来看例子：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">enum</span> Colors <span class="token punctuation">{</span>\n  red<span class="token punctuation">,</span>\n  green<span class="token punctuation">,</span>\n  blue<span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">namespace</span> Colors <span class="token punctuation">{</span>\n  <span class="token keyword">export</span> <span class="token keyword">const</span> yellow <span class="token operator">=</span> <span class="token number">3</span>\n<span class="token punctuation">}</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Colors<span class="token punctuation">)</span>\n<span class="token comment">/*\n{\n    0: &quot;red&quot;,\n    1: &quot;green&quot;,\n    2: &quot;blue&quot;,\n    red: 0,\n    green: 1,\n    blue: 2,\n    yellow: 3 \n}\n*/</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过打印结果你可以发现，虽然我们使用命名空间增加了枚举的成员，但是最后输出的值只有 key 到 index 的映射，没有 index 到 key 的映射。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>本小节我们学习了编译器对于相同命名的声明的合并策略，这个策略能够帮我们实现一些类型定义的复用，比如多个函数定义可合并为一个函数的重载，还可以利用声明合并实现一些复杂的类型定义。但是有时我们会无意地定义了一个之前定义过的名字，造成声明合并了，再使用这个新定义的时候，发现应用了一些这里未定义的类型校验，所以我们在定义名字的时候要注意这一点。本小节我们讲了接口、命名空间、不同类型是如何合并的，也学习了如何利用声明合并来定义复杂的数据结构。</p><p>下个小节我们来学习混入，在使用一些框架或者插件的时候，你可能听过这个概念，我们可以将公共逻辑抽取出来，然后通过混入实现复用。在 TypeScript 中，混入还需要考虑类型，所以我们下个小节来看下如何在 TypeScript 中实现混入。</p>',39)],p={},c=(0,a(3744).Z)(p,[["render",function(n,s){return(0,e.wg)(),(0,e.iD)("div",null,t)}]])}}]);