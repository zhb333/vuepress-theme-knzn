"use strict";(self.webpackChunkvuepress_theme_knzn=self.webpackChunkvuepress_theme_knzn||[]).push([[4638],{9573:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e=JSON.parse('{"key":"v-09203a14","path":"/792d80d0b21c613e6639165a9e040cfe/","title":"17 使用显式赋值断言给 TS 一个你一定会赋值的承诺","lang":"zh-CN","frontmatter":{"permalink":"/792d80d0b21c613e6639165a9e040cfe/","title":"17 使用显式赋值断言给 TS 一个你一定会赋值的承诺","author":"前端程序猿","tags":["typescript"],"categories":["大前端"],"postImage":"/images/typescript.webp"},"excerpt":"<p>在讲解本小节的主要内容之前，我们先来补充两个关于 null 和 undefined 的知识点</p>\\n","headers":[{"level":2,"title":"知识点补充","slug":"知识点补充","children":[{"level":3,"title":"(1) 严格模式下 null 和 undefined 赋值给其它类型值","slug":"_1-严格模式下-null-和-undefined-赋值给其它类型值","children":[]},{"level":3,"title":"(2) 可选参数和可选属性","slug":"_2-可选参数和可选属性","children":[]}]},{"level":2,"title":"显式赋值断言","slug":"显式赋值断言","children":[]},{"level":2,"title":"本节小结","slug":"本节小结","children":[]}],"git":{"updatedTime":1659093557000,"contributors":[{"name":"张焕标","email":"1140457303@qq.com","commits":1}]},"filePathRelative":"TypeScript学习笔记/17-Use-an-explicit-assignment-assertion-to-give-TS-a-promise-that-you-will-assign-a-value.md"}')},7218:(n,s,a)=>{a.r(s),a.d(s,{default:()=>l});var e=a(6252);const t=[(0,e.uE)('<p>在讲解本小节的主要内容之前，我们先来补充两个关于 null 和 undefined 的知识点</p><blockquote><p>人不可有傲气，但不可无傲骨。 ——徐悲鸿</p></blockquote><h2 id="知识点补充" tabindex="-1"><a class="header-anchor" href="#知识点补充" aria-hidden="true">#</a> 知识点补充</h2><h3 id="_1-严格模式下-null-和-undefined-赋值给其它类型值" tabindex="-1"><a class="header-anchor" href="#_1-严格模式下-null-和-undefined-赋值给其它类型值" aria-hidden="true">#</a> (1) 严格模式下 null 和 undefined 赋值给其它类型值</h3><p>当我们在 tsconfig.json 中将 strictNullChecks 设为 true 后，就不能再将 undefined 和 null 赋值给除它们自身和 void 之外的任意类型值了，但有时我们确实需要给一个其它类型的值设置初始值为空，然后再进行赋值，这时我们可以自己使用联合类型来实现 null 或 undefined 赋值给其它类型：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;lison&#39;</span>\nstr <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment">// error 不能将类型“null”分配给类型“string”</span>\n<span class="token keyword">let</span> strNull<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token string">&#39;lison&#39;</span> <span class="token comment">// 这里你可以简单理解为，string | null即表示既可以是string类型也可以是null类型</span>\nstrNull <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment">// right</span>\nstrNull <span class="token operator">=</span> <span class="token keyword">undefined</span> <span class="token comment">// error 不能将类型“undefined”分配给类型“string | null”</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，TS 会将 undefined 和 null 区别对待，这和 JS 的本意也是一致的，所以在 TS 中，string|undefined、string|null 和 string|undefined|null 是三种不同的类型。</p><h3 id="_2-可选参数和可选属性" tabindex="-1"><a class="header-anchor" href="#_2-可选参数和可选属性" aria-hidden="true">#</a> (2) 可选参数和可选属性</h3><p>如果开启了 strictNullChecks，可选参数会被自动加上|undefined，来看例子：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> x <span class="token operator">+</span> <span class="token punctuation">(</span>y <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 3</span>\n<span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 1</span>\n<span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token comment">// 1</span>\n<span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// error Argument of type &#39;null&#39; is not assignable to parameter of type &#39;number | undefined&#39;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以根据错误信息看出，这里的参数 y 作为可选参数，它的类型就不仅是 number 类型了，它可以是 undefined，所以它的类型是联合类型 number | undefined。</p><p>TS 对可选属性和对可选参数的处理一样，可选属性的类型也会被自动加上|undefined。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">PositionInterface</span> <span class="token punctuation">{</span>\n  x<span class="token operator">:</span> <span class="token builtin">number</span>\n  b<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> position<span class="token operator">:</span> PositionInterface <span class="token operator">=</span> <span class="token punctuation">{</span>\n  x<span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\nposition<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token string">&#39;abc&#39;</span> <span class="token comment">// error</span>\nposition<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token keyword">undefined</span> <span class="token comment">// right</span>\nposition<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment">// error</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="显式赋值断言" tabindex="-1"><a class="header-anchor" href="#显式赋值断言" aria-hidden="true">#</a> 显式赋值断言</h2><p>接下来我们来看显式赋值断言。当我们开启 strictNullChecks 时，有些情况下编译器是无法在我们声明一些变量前知道一个值是否是 null 的，所以我们需要使用类型断言手动指明该值不为 null。这可能不好理解，接下来我们就来看一个编译器无法推断出一个值是否是 null 的例子：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">getSplicedStr</span><span class="token punctuation">(</span>num<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>\n  <span class="token keyword">function</span> <span class="token function">getRes</span><span class="token punctuation">(</span>prefix<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 这里在函数getSplicedStr里定义一个函数getRes，我们最后调用getSplicedStr返回的值实际是getRes运行后的返回值</span>\n    <span class="token keyword">return</span> prefix <span class="token operator">+</span> num<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 这里使用参数num，num的类型为number或null，在运行前编译器是无法知道在运行时num参数的实际类型的，所以这里会报错，因为num参数可能为null</span>\n  <span class="token punctuation">}</span>\n  num <span class="token operator">=</span> num <span class="token operator">||</span> <span class="token number">0.1</span> <span class="token comment">// 但是这里进行了赋值，如果num为null则会将0.1赋给num，所以实际调用getRes的时候，getRes里的num拿到的始终不为null</span>\n  <span class="token keyword">return</span> <span class="token function">getRes</span><span class="token punctuation">(</span><span class="token string">&#39;lison&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个例子中，因为有嵌套函数，而编译器无法去除嵌套函数的 null（除非是立即调用的函数表达式），所以我们需要使用显式赋值断言，写法就是在不为 null 的值后面加个!。来看上面的例子该怎么改：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">getSplicedStr</span><span class="token punctuation">(</span>num<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>\n  <span class="token keyword">function</span> <span class="token function">getLength</span><span class="token punctuation">(</span>prefix<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> prefix <span class="token operator">+</span> num<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  num <span class="token operator">=</span> num <span class="token operator">||</span> <span class="token number">0.1</span>\n  <span class="token keyword">return</span> <span class="token function">getLength</span><span class="token punctuation">(</span><span class="token string">&#39;lison&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样编译器就知道了，num 不为 null，即便 getSplicedStr 函数在调用的时候传进来的参数是 null，在 getLength 函数中的 num 也不会是 null。</p><h2 id="本节小结" tabindex="-1"><a class="header-anchor" href="#本节小结" aria-hidden="true">#</a> 本节小结</h2><p>本小节我们补充学习了两个关于 null 和 undefined 的知识点。一个是如何在严格模式，也就是在 tsconfig.json 中将 strictNullChecks 设为 true 的情况下，将 null 或 undefined 赋值给除它们自身和 void 之外的类型的值；</p><p>另一个知识点是当将 strictNullChecks 设为 true 后，编译器对可选参数和可选属性类型定义的处理，效果相当于在我们指定的类型后面加上|undefined。最后我们学习了如何使用显式赋值断言，它的作用就是告诉编译器某个值确实不为 null，这个我们在实际开发中常会用到，我们在实战章节中用到时会再次学习。</p><p>下个小节我们将学习类型别名和字面量类型。类型别名我们在前面简单接触过，它的语法类似赋值语句，只不过赋的不是具体的值，而是一个类型；字面量类型我们称它为单一的类型，它包含数字字面量类型和字符串字面量类型两种，下个小节我们来进行详细学习。</p>',23)],p={},l=(0,a(3744).Z)(p,[["render",function(n,s){return(0,e.wg)(),(0,e.iD)("div",null,t)}]])}}]);