"use strict";(self.webpackChunkvuepress_theme_knzn=self.webpackChunkvuepress_theme_knzn||[]).push([[6885],{1542:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p=JSON.parse('{"key":"v-2a736f02","path":"/2be6e0b7e482e9529da3fb159823fdef/","title":"09 深入 JS 面向对象继承","lang":"zh-CN","frontmatter":{"permalink":"/2be6e0b7e482e9529da3fb159823fdef/","title":"09 深入 JS 面向对象继承","author":"前端程序猿","tags":["javascript"],"categories":["大前端"],"postImage":"/images/javascript.webp"},"excerpt":"<p>当我们编写如下代码的时候，我们会如何来称呼这个 Person 呢？ 在 JS 中 Person 应该被称之为是一个构造函数；从很多面向对象语言过来的开发者，也习惯称之为类，因为类可以帮助我们创建出来对象 p1、p2；如果从面向对象的编程范式角度来看，Person 确实是可以称之为类的；</p>\\n","headers":[{"level":2,"title":"面向对象的特性 – 继承","slug":"面向对象的特性-–-继承","children":[]},{"level":2,"title":"JavaScript 原型链","slug":"javascript-原型链","children":[]},{"level":2,"title":"Object 的原型","slug":"object-的原型","children":[]},{"level":2,"title":"Object 是所有类的父类","slug":"object-是所有类的父类","children":[]},{"level":2,"title":"通过原型链实现继承","slug":"通过原型链实现继承","children":[]},{"level":2,"title":"原型链继承的弊端","slug":"原型链继承的弊端","children":[]},{"level":2,"title":"借用构造函数继承","slug":"借用构造函数继承","children":[]},{"level":2,"title":"组合继承的问题","slug":"组合继承的问题","children":[]},{"level":2,"title":"原型式继承函数","slug":"原型式继承函数","children":[]},{"level":2,"title":"寄生式继承函数","slug":"寄生式继承函数","children":[]},{"level":2,"title":"寄生组合式继承","slug":"寄生组合式继承","children":[]}],"git":{"updatedTime":1659091972000,"contributors":[{"name":"张焕标","email":"1140457303@qq.com","commits":1}]},"filePathRelative":"深入理解JavaScript/09-Deep-JS-object-oriented-inheritance.md"}')},3937:(n,s,a)=>{a.r(s),a.d(s,{default:()=>u});var p=a(6252);const t=a.p+"assets/img/5.b690ead9.jpg",e=a.p+"assets/img/6.d05c693c.jpg",o=a.p+"assets/img/7.51df35dc.jpg",c=a.p+"assets/img/8.96cf3678.jpg",i=[(0,p.uE)('<p>当我们编写如下代码的时候，我们会如何来称呼这个 Person 呢？ 在 JS 中 Person 应该被称之为是一个构造函数；从很多面向对象语言过来的开发者，也习惯称之为类，因为类可以帮助我们创建出来对象 p1、p2；如果从面向对象的编程范式角度来看，Person 确实是可以称之为类的；</p><h2 id="面向对象的特性-–-继承" tabindex="-1"><a class="header-anchor" href="#面向对象的特性-–-继承" aria-hidden="true">#</a> 面向对象的特性 – 继承</h2><p>面向对象有三大特性：封装、继承、多态</p><ul><li>封装：我们前面将属性和方法封装到一个类中，可以称之为封装的过程；</li><li>继承：继承是面向对象中非常重要的，不仅仅可以减少重复代码的数量，也是多态前提（纯面向对象中）；</li><li>多态：不同的对象在执行时表现出不同的形态；</li></ul><p>那么这里我们核心讲继承。 那么继承是做什么呢？</p><p>继承可以帮助我们将重复的代码和逻辑抽取到父类中，子类只需要直接继承过来使用即可。</p><p>那么 JavaScript 当中如何实现继承呢？</p><p>不着急，我们先来看一下 JavaScript 原型链的机制；再利用原型链的机制实现一下继承；</p><h2 id="javascript-原型链" tabindex="-1"><a class="header-anchor" href="#javascript-原型链" aria-hidden="true">#</a> JavaScript 原型链</h2><p>在真正实现继承之前，我们先来理解一个非常重要的概念：原型链。我们知道，从一个对象上获取属性，如果在当前对象中没有获取到就会去它的原型上面获取：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;why&#39;</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// [[get]]操作</span>\n<span class="token comment">// 1.在当前的对象中查找属性</span>\n<span class="token comment">// 2.如果没有找到, 这个时候会去原型链(__proto__)对象上查找</span>\n\nobj<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token comment">// 原型链</span>\nobj<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\nobj<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">address</span><span class="token operator">:</span> <span class="token string">&#39;上海市&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>address<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="'+t+'" alt="原型链"></p><h2 id="object-的原型" tabindex="-1"><a class="header-anchor" href="#object-的原型" aria-hidden="true">#</a> Object 的原型</h2><p>那么什么地方是原型链的尽头呢？比如第三个对象是否也是有原型 <code>__proto__</code> 属性呢？</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;why&#39;</span> <span class="token punctuation">}</span>\n\n<span class="token comment">// console.log(obj.address)</span>\n\n<span class="token comment">// 到底是找到哪一层对象之后停止继续查找了呢?</span>\n<span class="token comment">// 字面对象obj的原型是 [Object: null prototype] {}</span>\n<span class="token comment">// [Object: null prototype] {} 就是顶层的原型</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span>\n\n<span class="token comment">// obj.__proto__ =&gt; [Object: null prototype] {}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们会发现它打印的是 [Object: null prototype] {};从 Object 直接创建出来的对象的原型都是 [Object: null prototype] {}。</p><p>那么我们可能会问题： [Object: null prototype] {} 原型有什么特殊吗？</p><ul><li>特殊一：该对象有原型属性，但是它的原型属性已经指向的是 null，也就是已经是顶层原型了；</li><li>特殊二：该对象上有很多默认的属性和方法；</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptors</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="'+e+'" alt="原型的尽头"></p><h2 id="object-是所有类的父类" tabindex="-1"><a class="header-anchor" href="#object-是所有类的父类" aria-hidden="true">#</a> Object 是所有类的父类</h2><p>从我们上面的 Object 原型我们可以得出一个结论：原型链最顶层的原型对象就是 Object 的原型对象</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name\n  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age\n<span class="token punctuation">}</span>\n\n<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">running</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;why&#39;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span>\n\np1<span class="token punctuation">.</span><span class="token function">running</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\np1<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\np1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="'+o+'" alt="Object 是所有类的父类"></p><h2 id="通过原型链实现继承" tabindex="-1"><a class="header-anchor" href="#通过原型链实现继承" aria-hidden="true">#</a> 通过原型链实现继承</h2><p>如果我们现在需要实现继承，那么就可以利用原型链来实现了：</p><p>目前 stu 的原型是 p 对象，而 p 对象的原型是 Person 默认的原型，里面包含 running 等函数；注意：步骤 4 和步骤 5 不可以调整顺序，否则会有问题</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 父类: 公共属性和方法</span>\n<span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;why&#39;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>friends <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n\n<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">eating</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&#39; eating~&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 子类: 特有属性和方法</span>\n<span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>sno <span class="token operator">=</span> <span class="token number">111</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token class-name">Student</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> p\n\n<span class="token class-name">Student</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">studying</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&#39; studying~&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// name/sno</span>\n<span class="token keyword">var</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment">// console.log(stu.name)</span>\n<span class="token comment">// stu.eating()</span>\n\n<span class="token comment">// stu.studying()</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="'+c+'" alt="通过原型链实现继承"></p><h2 id="原型链继承的弊端" tabindex="-1"><a class="header-anchor" href="#原型链继承的弊端" aria-hidden="true">#</a> 原型链继承的弊端</h2><p>但是目前有一个很大的弊端：某些属性其实是保存在 p 对象上的；</p><ul><li>第一，我们通过直接打印对象是看不到这个属性的；</li><li>第二，这个属性会被多个对象共享，如果这个对象是一个引用类型，那么就会造成问题；</li><li>第三，不能给 Person 传递参数，因为这个对象是一次性创建的（没办法定制化）；</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 原型链实现继承的弊端:</span>\n<span class="token comment">// 1.第一个弊端: 打印stu对象, 继承的属性是看不到的</span>\n<span class="token comment">// console.log(stu.name)</span>\n\n<span class="token comment">// 2.第二个弊端: 创建出来两个stu的对象</span>\n<span class="token keyword">var</span> stu1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">var</span> stu2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 直接修改对象上的属性, 是给本对象添加了一个新属性</span>\nstu1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;kobe&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu2<span class="token punctuation">.</span>name<span class="token punctuation">)</span>\n\n<span class="token comment">// 获取引用, 修改引用中的值, 会相互影响</span>\nstu1<span class="token punctuation">.</span>friends<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;kobe&#39;</span><span class="token punctuation">)</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu1<span class="token punctuation">.</span>friends<span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu2<span class="token punctuation">.</span>friends<span class="token punctuation">)</span>\n\n<span class="token comment">// 3.第三个弊端: 在前面实现类的过程中都没有传递参数</span>\n<span class="token keyword">var</span> stu3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&#39;lilei&#39;</span><span class="token punctuation">,</span> <span class="token number">112</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="借用构造函数继承" tabindex="-1"><a class="header-anchor" href="#借用构造函数继承" aria-hidden="true">#</a> 借用构造函数继承</h2><p>为了解决原型链继承中存在的问题，开发人员提供了一种新的技术: constructor stealing(有很多名称: 借用构造函 数或者称之为经典继承或者称之为伪造对象)：</p><p>steal 是偷窃、剽窃的意思，但是这里可以翻译成借用；</p><p>借用继承的做法非常简单：在子类型构造函数的内部调用父类型构造函数.因为函数可以在任意的时刻被调用；因此通过 apply()和 call()方法也可以在新创建的对象上执行构造函数；</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> friends<span class="token punctuation">,</span> sno</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">Person</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> friends<span class="token punctuation">)</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>sno <span class="token operator">=</span> sno\n<span class="token punctuation">}</span>\n\n<span class="token class-name">Student</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="组合继承的问题" tabindex="-1"><a class="header-anchor" href="#组合继承的问题" aria-hidden="true">#</a> 组合继承的问题</h2><p>组合继承是 JavaScript 最常用的继承模式之一：</p><p>如果你理解到这里, 点到为止, 那么组合来实现继承只能说问题不大；但是它依然不是很完美，但是基本已经没有问题了；</p><p>组合继承存在什么问题呢?</p><p>组合继承最大的问题就是无论在什么情况下，都会调用两次父类构造函数。</p><ul><li>一次在创建子类原型的时候；</li><li>另一次在子类构造函数内部(也就是每次创建子类实例的时候)；</li></ul><p>另外，如果你仔细按照我的流程走了上面的每一个步骤，你会发现：所有的子类实例事实上会拥有两份父类的 属性</p><ul><li>一份在当前的实例自己里面(也就是 person 本身的)，另一份在子类对应的原型对象中(也就是 <code>person.__proto__</code>里面)；</li><li>当然，这两份属性我们无需担心访问出现问题，因为默认一定是访问实例本身这一部分的；</li></ul><h2 id="原型式继承函数" tabindex="-1"><a class="header-anchor" href="#原型式继承函数" aria-hidden="true">#</a> 原型式继承函数</h2><p>原型式继承的渊源</p><p>这种模式要从道格拉斯·克罗克福德（Douglas Crockford，著名的前端大师，JSON 的创立者）在 2006 年写的 一篇文章说起: Prototypal Inheritance in JavaScript(在 JS 中使用原型式继承);在这篇文章中，它介绍了一种继承方法，而且这种继承方法不是通过构造函数来实现的.为了理解这种方式，我们先再次回顾一下 JavaScript 想实现继承的目的：重复利用另外一个对象的属性和方法.</p><p>最终的目的：student 对象的原型指向了 person 对象；</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;why&#39;</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> info <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>\n\n<span class="token comment">// 原型式继承函数</span>\n<span class="token keyword">function</span> <span class="token function">createObject1</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> newObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>newObj<span class="token punctuation">,</span> o<span class="token punctuation">)</span>\n  <span class="token keyword">return</span> newObj\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">createObject2</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">function</span> <span class="token function">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token class-name">Fn</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> o\n  <span class="token keyword">var</span> newObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> newObj\n<span class="token punctuation">}</span>\n\n<span class="token comment">// var info = createObject2(obj)</span>\n<span class="token keyword">var</span> info <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="寄生式继承函数" tabindex="-1"><a class="header-anchor" href="#寄生式继承函数" aria-hidden="true">#</a> 寄生式继承函数</h2><p>寄生式(Parasitic)继承</p><p>寄生式(Parasitic)继承是与原型式继承紧密相关的一种思想, 并且同样由道格拉斯·克罗克福德(Douglas Crockford)提出和推广的；</p><p>寄生式继承的思路是结合原型类继承和工厂模式的一种方式；即创建一个封装继承过程的函数, 该函数在内部以某种方式来增强对象，最后再将这个对象返回；</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> personObj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function-variable function">running</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;running&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">createStudent</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> stu <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>personObj<span class="token punctuation">)</span>\n  stu<span class="token punctuation">.</span>name <span class="token operator">=</span> name\n  stu<span class="token punctuation">.</span><span class="token function-variable function">studying</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;studying~&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> stu\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> stuObj <span class="token operator">=</span> <span class="token function">createStudent</span><span class="token punctuation">(</span><span class="token string">&#39;why&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">var</span> stuObj1 <span class="token operator">=</span> <span class="token function">createStudent</span><span class="token punctuation">(</span><span class="token string">&#39;kobe&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">var</span> stuObj2 <span class="token operator">=</span> <span class="token function">createStudent</span><span class="token punctuation">(</span><span class="token string">&#39;james&#39;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="寄生组合式继承" tabindex="-1"><a class="header-anchor" href="#寄生组合式继承" aria-hidden="true">#</a> 寄生组合式继承</h2><p>现在我们来回顾一下之前提出的比较理想的组合继承</p><p>组合继承是比较理想的继承方式, 但是存在两个问题:</p><ul><li>问题一: 构造函数会被调用两次: 一次在创建子类型原型对象的时候, 一次在创建子类型实例的时候.</li><li>问题二: 父类型中的属性会有两份: 一份在原型对象中, 一份在子类型实例中.</li></ul><p>事实上, 我们现在可以利用寄生式继承将这两个问题给解决掉.</p><ul><li>你需要先明确一点: 当我们在子类型的构造函数中调用父类型.call(this, 参数)这个函数的时候, 就会将父类型中 的属性和方法复制一份到了子类型中. 所以父类型本身里面的内容, 我们不再需要.</li><li>这个时候, 我们还需要获取到一份父类型的原型对象中的属性和方法.</li><li>能不能直接让子类型的原型对象 = 父类型的原型对象呢?</li><li>不要这么做, 因为这么做意味着以后修改了子类型原型对象的某个引用类型的时候, 父类型原生对象的引用类型 也会被修改.</li><li>我们使用前面的寄生式思想就可以了.</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createObject</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">function</span> <span class="token function">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token class-name">Fn</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> o\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">inheritPrototype</span><span class="token punctuation">(</span><span class="token parameter">SubType<span class="token punctuation">,</span> SuperType</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> Objec<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">SuperType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>\n  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span><span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token string">&#39;constructor&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">value</span><span class="token operator">:</span> SubType<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> friends</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name\n  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age\n  <span class="token keyword">this</span><span class="token punctuation">.</span>friends <span class="token operator">=</span> friends\n<span class="token punctuation">}</span>\n\n<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">running</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;running~&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">eating</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;eating~&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> friends<span class="token punctuation">,</span> sno<span class="token punctuation">,</span> score</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">Person</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> friends<span class="token punctuation">)</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>sno <span class="token operator">=</span> sno\n  <span class="token keyword">this</span><span class="token punctuation">.</span>score <span class="token operator">=</span> score\n<span class="token punctuation">}</span>\n\n<span class="token function">inheritPrototype</span><span class="token punctuation">(</span>Student<span class="token punctuation">,</span> Person<span class="token punctuation">)</span>\n\n<span class="token class-name">Student</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">studying</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;studying~&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&#39;why&#39;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;kobe&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span>\nstu<span class="token punctuation">.</span><span class="token function">studying</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nstu<span class="token punctuation">.</span><span class="token function">running</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nstu<span class="token punctuation">.</span><span class="token function">eating</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>name<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',63)],l={},u=(0,a(3744).Z)(l,[["render",function(n,s){return(0,p.wg)(),(0,p.iD)("div",null,i)}]])}}]);