"use strict";(self.webpackChunkvuepress_theme_knzn=self.webpackChunkvuepress_theme_knzn||[]).push([[5487],{5939:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e=JSON.parse('{"key":"v-1cfef914","path":"/210b1f421b05ccb30ebe91a0846696cb/","title":"19 使用可辨识联合并保证每个 case 都被处理","lang":"zh-CN","frontmatter":{"permalink":"/210b1f421b05ccb30ebe91a0846696cb/","title":"19 使用可辨识联合并保证每个 case 都被处理","author":"前端程序猿","tags":["typescript"],"categories":["大前端"],"postImage":"/images/typescript.webp"},"excerpt":"<p>我们可以把单例类型、联合类型、类型保护和类型别名这几种类型进行合并，来创建一个叫做可辨识联合的高级类型，它也可称作标签联合或代数数据类型。</p>\\n","headers":[{"level":2,"title":"辨识联合类型","slug":"辨识联合类型","children":[]},{"level":2,"title":"1 利用 strictNullChecks","slug":"_1-利用-strictnullchecks","children":[]},{"level":2,"title":"2 使用 never 类型","slug":"_2-使用-never-类型","children":[]},{"level":2,"title":"本节小结","slug":"本节小结","children":[]}],"git":{"updatedTime":1659093557000,"contributors":[{"name":"张焕标","email":"1140457303@qq.com","commits":1}]},"filePathRelative":"TypeScript学习笔记/19-Use-discernible-unions-and-ensure-that-every-case-is-handled.md"}')},4029:(n,s,a)=>{a.r(s),a.d(s,{default:()=>c});var e=a(6252);const p=[(0,e.uE)('<p>我们可以把单例类型、联合类型、类型保护和类型别名这几种类型进行合并，来创建一个叫做可辨识联合的高级类型，它也可称作标签联合或代数数据类型。</p><blockquote><p>我好像是一只牛，吃的是草，挤出的是牛奶。 ——鲁迅</p></blockquote><h2 id="辨识联合类型" tabindex="-1"><a class="header-anchor" href="#辨识联合类型" aria-hidden="true">#</a> 辨识联合类型</h2><p>所谓单例类型，你可以理解为符合单例模式的数据类型，比如枚举成员类型，字面量类型</p><p>可辨识联合要求具有两个要素：</p><ul><li>具有普通的单例类型属性（这个要作为辨识的特征，也是重要因素）。</li><li>一个类型别名，包含了那些类型的联合（即把几个类型封装为联合类型，并起一个别名）。</li></ul><p>来看例子：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Square</span> <span class="token punctuation">{</span>\n  kind<span class="token operator">:</span> <span class="token string">&#39;square&#39;</span> <span class="token comment">// 这个就是具有辨识性的属性</span>\n  size<span class="token operator">:</span> <span class="token builtin">number</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">interface</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">{</span>\n  kind<span class="token operator">:</span> <span class="token string">&#39;rectangle&#39;</span> <span class="token comment">// 这个就是具有辨识性的属性</span>\n  height<span class="token operator">:</span> <span class="token builtin">number</span>\n  width<span class="token operator">:</span> <span class="token builtin">number</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">interface</span> <span class="token class-name">Circle</span> <span class="token punctuation">{</span>\n  kind<span class="token operator">:</span> <span class="token string">&#39;circle&#39;</span> <span class="token comment">// 这个就是具有辨识性的属性</span>\n  radius<span class="token operator">:</span> <span class="token builtin">number</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">type</span> <span class="token class-name">Shape</span> <span class="token operator">=</span> Square <span class="token operator">|</span> Rectangle <span class="token operator">|</span> Circle <span class="token comment">// 这里使用三个接口组成一个联合类型，并赋给一个别名Shape，组成了一个可辨识联合。</span>\n\n<span class="token keyword">function</span> <span class="token function">getArea</span><span class="token punctuation">(</span>s<span class="token operator">:</span> Shape<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">switch</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>kind<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">case</span> <span class="token string">&#39;square&#39;</span><span class="token operator">:</span>\n      <span class="token keyword">return</span> s<span class="token punctuation">.</span>size <span class="token operator">*</span> s<span class="token punctuation">.</span>size\n    <span class="token keyword">case</span> <span class="token string">&#39;rectangle&#39;</span><span class="token operator">:</span>\n      <span class="token keyword">return</span> s<span class="token punctuation">.</span>height <span class="token operator">*</span> s<span class="token punctuation">.</span>width\n    <span class="token keyword">case</span> <span class="token string">&#39;circle&#39;</span><span class="token operator">:</span>\n      <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">*</span> s<span class="token punctuation">.</span>radius <span class="token operator">**</span> <span class="token number">2</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这个例子中，我们的 Shape 即可辨识联合，它是三个接口的联合，而这三个接口都有一个 kind 属性，且每个接口的 kind 属性值都不相同，能够起到标识作用。</p><p>这里有个 ES7 的新特性：<code>**</code> 运算符，两个<code>*</code>符号组成的这个运算符就是求幂运算符，<code>2 ** 3 ==&gt; 8</code></p><p>看了上面的例子，你可以看到我们的函数内应该包含联合类型中每一个接口的 case。但是如果遗漏了，我们希望编译器应该给出提示。所以我们来看下两种完整性检查的方法：</p><h2 id="_1-利用-strictnullchecks" tabindex="-1"><a class="header-anchor" href="#_1-利用-strictnullchecks" aria-hidden="true">#</a> 1 利用 strictNullChecks</h2><p>我们给上面的例子加一种接口：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Square</span> <span class="token punctuation">{</span>\n  kind<span class="token operator">:</span> <span class="token string">&#39;square&#39;</span>\n  size<span class="token operator">:</span> <span class="token builtin">number</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">interface</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">{</span>\n  kind<span class="token operator">:</span> <span class="token string">&#39;rectangle&#39;</span>\n  height<span class="token operator">:</span> <span class="token builtin">number</span>\n  width<span class="token operator">:</span> <span class="token builtin">number</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">interface</span> <span class="token class-name">Circle</span> <span class="token punctuation">{</span>\n  kind<span class="token operator">:</span> <span class="token string">&#39;circle&#39;</span>\n  radius<span class="token operator">:</span> <span class="token builtin">number</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">interface</span> <span class="token class-name">Triangle</span> <span class="token punctuation">{</span>\n  kind<span class="token operator">:</span> <span class="token string">&#39;triangle&#39;</span>\n  bottom<span class="token operator">:</span> <span class="token builtin">number</span>\n  height<span class="token operator">:</span> <span class="token builtin">number</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> <span class="token class-name">Shape</span> <span class="token operator">=</span> Square <span class="token operator">|</span> Rectangle <span class="token operator">|</span> Circle <span class="token operator">|</span> Triangle <span class="token comment">// 这里我们在联合类型中新增了一个接口，但是下面的case却没有处理Triangle的情况</span>\n<span class="token keyword">function</span> <span class="token function">getArea</span><span class="token punctuation">(</span>s<span class="token operator">:</span> Shape<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">switch</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>kind<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">case</span> <span class="token string">&#39;square&#39;</span><span class="token operator">:</span>\n      <span class="token keyword">return</span> s<span class="token punctuation">.</span>size <span class="token operator">*</span> s<span class="token punctuation">.</span>size\n    <span class="token keyword">case</span> <span class="token string">&#39;rectangle&#39;</span><span class="token operator">:</span>\n      <span class="token keyword">return</span> s<span class="token punctuation">.</span>height <span class="token operator">*</span> s<span class="token punctuation">.</span>width\n    <span class="token keyword">case</span> <span class="token string">&#39;circle&#39;</span><span class="token operator">:</span>\n      <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">*</span> s<span class="token punctuation">.</span>radius <span class="token operator">**</span> <span class="token number">2</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面例子中，我们的 Shape 联合有四种接口，但函数的 switch 里只包含三个 case，这个时候编译器并没有提示任何错误，因为当传入函数的是类型是 Triangle 时，没有任何一个 case 符合，则不会有 return 语句执行，那么函数是默认返回 undefined。</p><p>所以我们可以利用这个特点，结合 strictNullChecks(详见 3.4 小节) 编译选项，我们可以开启 strictNullChecks，然后让函数的返回值类型为 number，那么当返回 undefined 的时候，就会报错：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">getArea</span><span class="token punctuation">(</span>s<span class="token operator">:</span> Shape<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>\n  <span class="token comment">// error Function lacks ending return statement and return type does not include &#39;undefined&#39;</span>\n  <span class="token keyword">switch</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>kind<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">case</span> <span class="token string">&#39;square&#39;</span><span class="token operator">:</span>\n      <span class="token keyword">return</span> s<span class="token punctuation">.</span>size <span class="token operator">*</span> s<span class="token punctuation">.</span>size\n    <span class="token keyword">case</span> <span class="token string">&#39;rectangle&#39;</span><span class="token operator">:</span>\n      <span class="token keyword">return</span> s<span class="token punctuation">.</span>height <span class="token operator">*</span> s<span class="token punctuation">.</span>width\n    <span class="token keyword">case</span> <span class="token string">&#39;circle&#39;</span><span class="token operator">:</span>\n      <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">*</span> s<span class="token punctuation">.</span>radius <span class="token operator">**</span> <span class="token number">2</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种方法简单，但是对旧代码支持不好，因为 strictNullChecks 这个配置项是 2.0 版本才加入的，如果你使用的是低于这个版本的，这个方法并不会有效。</p><h2 id="_2-使用-never-类型" tabindex="-1"><a class="header-anchor" href="#_2-使用-never-类型" aria-hidden="true">#</a> 2 使用 never 类型</h2><p>我们在学习基本类型时学习过，当函数返回一个错误或者不可能有返回值的时候，返回值类型为 never。所以我们可以给 switch 添加一个 default 流程，当前面的 case 都不符合的时候，会执行 default 后的逻辑</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">assertNever</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">never</span> <span class="token punctuation">{</span>\n  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Unexpected object: &#39;</span> <span class="token operator">+</span> value<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">getArea</span><span class="token punctuation">(</span>s<span class="token operator">:</span> Shape<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">switch</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>kind<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">case</span> <span class="token string">&#39;square&#39;</span><span class="token operator">:</span>\n      <span class="token keyword">return</span> s<span class="token punctuation">.</span>size <span class="token operator">*</span> s<span class="token punctuation">.</span>size\n    <span class="token keyword">case</span> <span class="token string">&#39;rectangle&#39;</span><span class="token operator">:</span>\n      <span class="token keyword">return</span> s<span class="token punctuation">.</span>height <span class="token operator">*</span> s<span class="token punctuation">.</span>width\n    <span class="token keyword">case</span> <span class="token string">&#39;circle&#39;</span><span class="token operator">:</span>\n      <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">*</span> s<span class="token punctuation">.</span>radius <span class="token operator">**</span> <span class="token number">2</span>\n    <span class="token keyword">default</span><span class="token operator">:</span>\n      <span class="token keyword">return</span> <span class="token function">assertNever</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token comment">// error 类型“Triangle”的参数不能赋给类型“never”的参数</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>采用这种方式，需要定义一个额外的 asserNever 函数，但是这种方式不仅能够在编译阶段提示我们遗漏了判断条件，而且在运行时也会报错。</p><h2 id="本节小结" tabindex="-1"><a class="header-anchor" href="#本节小结" aria-hidden="true">#</a> 本节小结</h2><p>本小节我们学习了可辨识联合类型，定义一个可辨识联合类型有两个要素：具有普通的单例类型属性，和一个类型别名。第一个要素是最重要的一点，因为编译器要根据这个属性来判断当前分支是什么类型，而第二个要素并不影响使用，你完全可以指定上面例子中的 s 为 Square | Rectangle | Circle 而不使用 Shape。最后我们讲了两种避免遗忘处理某个 case 的方法：利用 strictNullChecks 和使用 never 类型，都能够帮我们检查遗漏的 case，第二种方法的提示更为全面，推荐大家使用。</p><p>下个小节我们将学习 this 类型，我们知道 this 是 JavaScript 中的关键字，可以用来获取全局对象、类实例对象、构造函数实例等的引用，但是在 TypeScript 中，它也是一种类型，我们下节课再来细讲。</p>',25)],t={},c=(0,a(3744).Z)(t,[["render",function(n,s){return(0,e.wg)(),(0,e.iD)("div",null,p)}]])}}]);