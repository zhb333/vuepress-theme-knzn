"use strict";(self.webpackChunkvuepress_theme_knzn=self.webpackChunkvuepress_theme_knzn||[]).push([[6192],{143:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e=JSON.parse('{"key":"v-4a2f069e","path":"/f6c7fa139994de84ba32680da702f009/","title":"07 深入 JS 面向对象 一","lang":"zh-CN","frontmatter":{"permalink":"/f6c7fa139994de84ba32680da702f009/","title":"07 深入 JS 面向对象 一","author":"前端程序猿","tags":["javascript"],"categories":["大前端"],"postImage":"/images/javascript.webp"},"excerpt":"<p>对象是 JavaScript 中一个非常重要的概念，这是因为对象可以将多个相关联的数据封装到一起，更好的描述一个事物：</p>\\n<p>比如我们可以描述一辆车：Car，具有颜色（color）、速度（speed）、品牌（brand）、价格（price），行驶（travel）等\\n等；</p>\\n<p>比如我们可以描述一个人：Person，具有姓名（name）、年龄（age）、身高（height），吃东西（eat）、跑步（run）\\n等等；</p>\\n","headers":[{"level":2,"title":"面向对象是现实的抽象方式","slug":"面向对象是现实的抽象方式","children":[]},{"level":2,"title":"JavaScript 的面向对象","slug":"javascript-的面向对象","children":[]},{"level":2,"title":"创建对象的两种方式","slug":"创建对象的两种方式","children":[]},{"level":2,"title":"对属性操作的控制","slug":"对属性操作的控制","children":[]},{"level":2,"title":"Object.defineProperty","slug":"object-defineproperty","children":[]},{"level":2,"title":"属性描述符分类","slug":"属性描述符分类","children":[]},{"level":2,"title":"数据属性描述符","slug":"数据属性描述符","children":[]},{"level":2,"title":"数据属性描述符测试代码","slug":"数据属性描述符测试代码","children":[]},{"level":2,"title":"存取属性描述符","slug":"存取属性描述符","children":[]},{"level":2,"title":"存储属性描述符测试代码","slug":"存储属性描述符测试代码","children":[]},{"level":2,"title":"同时定义多个属性","slug":"同时定义多个属性","children":[]},{"level":2,"title":"对象方法补充","slug":"对象方法补充","children":[]}],"git":{"updatedTime":1659091972000,"contributors":[{"name":"张焕标","email":"1140457303@qq.com","commits":1}]},"filePathRelative":"深入理解JavaScript/07-Deep-JS-object-oriented-1.md"}')},5448:(n,s,a)=>{a.r(s),a.d(s,{default:()=>o});var e=a(6252);const t=a.p+"assets/img/1.5b6b1731.jpg",p=[(0,e.uE)('<p>对象是 JavaScript 中一个非常重要的概念，这是因为对象可以将多个相关联的数据封装到一起，更好的描述一个事物：</p><p>比如我们可以描述一辆车：Car，具有颜色（color）、速度（speed）、品牌（brand）、价格（price），行驶（travel）等 等；</p><p>比如我们可以描述一个人：Person，具有姓名（name）、年龄（age）、身高（height），吃东西（eat）、跑步（run） 等等；</p><h2 id="面向对象是现实的抽象方式" tabindex="-1"><a class="header-anchor" href="#面向对象是现实的抽象方式" aria-hidden="true">#</a> 面向对象是现实的抽象方式</h2><p>用对象来描述事物，更有利于我们将现实的事物，抽离成代码中某个数据结构：</p><p>所以有一些编程语言就是纯面向对象的编程语言，比 Java；</p><p>你在实现任何现实抽象时都需要先创建一个类，根据类再去创建对象；</p><p><img src="'+t+'" alt="面向对象是现实的抽象方式"></p><h2 id="javascript-的面向对象" tabindex="-1"><a class="header-anchor" href="#javascript-的面向对象" aria-hidden="true">#</a> JavaScript 的面向对象</h2><p>JavaScript 其实支持多种编程范式的，包括函数式编程和面向对象编程：</p><p>JavaScript 中的对象被设计成一组属性的无序集合，像是一个哈希表，有 key 和 value 组成；key 是一个标识符名称，value 可以是任意类型，也可以是其他对象或者函数类型；key 是一个标识符名称，value 可以是任意类型，也可以是其他对象或者函数类型；</p><p>如何创建一个对象呢？</p><p>早期使用创建对象的方式最多的是使用 Object 类，并且使用 new 关键字来创建一个对象：这是因为早期很多 JavaScript 开发者是从 Java 过来的，它们也更习惯于 Java 中通过 new 的方式创建一个对象； 后来很多开发者为了方便起见，都是直接通过字面量的形式来创建对象：这种形式看起来更加的简洁，并且对象和属性之间的内聚性也更强，所以这种方式后来就流行了起来；</p><h2 id="创建对象的两种方式" tabindex="-1"><a class="header-anchor" href="#创建对象的两种方式" aria-hidden="true">#</a> 创建对象的两种方式</h2><p>创建方式一: 通过 new Object()创建</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nobj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;why&#39;</span>\nobj<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span>\nobj<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">1.88</span>\nobj<span class="token punctuation">.</span><span class="token function-variable function">running</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&#39;在跑步~&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建方式二: 字面量形式</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> info <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;kobe&#39;</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">40</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">1.98</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">eating</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&#39;在吃东西~&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="对属性操作的控制" tabindex="-1"><a class="header-anchor" href="#对属性操作的控制" aria-hidden="true">#</a> 对属性操作的控制</h2><p>在前面我们的属性都是直接定义在对象内部，或者直接添加到对象内部的：</p><p>但是这样来做的时候我们就不能对这个属性进行一些限制：比如这个属性是否是可以通过 delete 删除的？这个 属性是否在 for-in 遍历的时候被遍历出来呢？</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;why&#39;</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 获取属性</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span>\n\n<span class="token comment">// 给属性赋值</span>\nobj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;kobe&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span>\n\n<span class="token comment">// 删除属性</span>\n<span class="token keyword">delete</span> obj<span class="token punctuation">.</span>name\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>\n\n<span class="token comment">// 遍历属性</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们想要对属性进行操作时, 进行一些限制，那么我们就可以使用属性描述符;</p><p>限制: 不允许某一个属性被赋值/不允许某个属性被删除/不允许某些属性在遍历时被遍历出来</p><p>通过属性描述符可以精准的添加或修改对象的属性；属性描述符需要使用 Object.defineProperty 来对属性进行添加或者修改；</p><h2 id="object-defineproperty" tabindex="-1"><a class="header-anchor" href="#object-defineproperty" aria-hidden="true">#</a> Object.defineProperty</h2><p>Object.defineProperty() 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此 对象。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可接收三个参数：</p><ul><li>obj 要定义属性的对象；</li><li>prop 要定义或修改的属性的名称或 Symbol；</li><li>descriptor 要定义或修改的属性描述符；</li></ul><p>返回值：</p><ul><li>被传递给函数的对象。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;why&#39;</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 属性描述符是一个对象</span>\nObject<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&#39;height&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 很多的配置</span>\n  <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">1.88</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>height<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="属性描述符分类" tabindex="-1"><a class="header-anchor" href="#属性描述符分类" aria-hidden="true">#</a> 属性描述符分类</h2><p>属性描述符的类型有两种：</p><ul><li>数据属性（Data Properties）描述符（Descriptor）；</li><li>存取属性（Accessor 访问器 Properties）描述符（Descriptor）；</li></ul><table><thead><tr><th style="text-align:center;"></th><th style="text-align:center;">configurable</th><th style="text-align:center;">enumerable</th><th style="text-align:center;">value</th><th style="text-align:center;">writable</th><th style="text-align:center;">get</th><th style="text-align:center;">set</th></tr></thead><tbody><tr><td style="text-align:center;">数据描述符</td><td style="text-align:center;">yes</td><td style="text-align:center;">yes</td><td style="text-align:center;">yes</td><td style="text-align:center;">yes</td><td style="text-align:center;">no</td><td style="text-align:center;">no</td></tr><tr><td style="text-align:center;">存取描述符</td><td style="text-align:center;">yes</td><td style="text-align:center;">yes</td><td style="text-align:center;">no</td><td style="text-align:center;">no</td><td style="text-align:center;">yes</td><td style="text-align:center;">yes</td></tr></tbody></table><h2 id="数据属性描述符" tabindex="-1"><a class="header-anchor" href="#数据属性描述符" aria-hidden="true">#</a> 数据属性描述符</h2><p>数据数据描述符有如下四个特性：</p><ul><li>[[Configurable]]：表示属性是否可以通过 delete 删除属性，是否可以修改它的特性，或者是否可以将它修改为存取属性 描述符； <ul><li>当我们直接在一个对象上定义某个属性时，这个属性的[[Configurable]]为 true；</li><li>当我们通过属性描述符定义一个属性时，这个属性的[[Configurable]]默认为 false；</li></ul></li><li>[[Enumerable]]：表示属性是否可以通过 for-in 或者 Object.keys()返回该属性； <ul><li>当我们直接在一个对象上定义某个属性时，这个属性的[[Enumerable]]为 true；</li><li>当我们通过属性描述符定义一个属性时，这个属性的[[Enumerable]]默认为 false；</li></ul></li><li>[[Writable]]：表示是否可以修改属性的值； <ul><li>当我们直接在一个对象上定义某个属性时，这个属性的[[Writable]]为 true；</li><li>当我们通过属性描述符定义一个属性时，这个属性的[[Writable]]默认为 false；</li></ul></li><li>[[value]]：属性的 value 值，读取属性时会返回该值，修改属性时，会对其进行修改； <ul><li>默认情况下这个值是 undefined；</li></ul></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;why&#39;</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 数据属性描述符</span>\n<span class="token comment">// 用了属性描述符, 那么会有默认的特性</span>\nObject<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&#39;address&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 很多配置</span>\n  <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;北京市&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 默认值undefined</span>\n  <span class="token comment">// 该特殊不可删除/也不可以重新定义属性描述符</span>\n  <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 默认值false</span>\n  <span class="token comment">// // 该特殊是配置对应的属性(address)是否是可以枚举</span>\n  <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 默认值false</span>\n  <span class="token comment">// // 该特性是属性是否是可以赋值(写入值)</span>\n  <span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 默认值false</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数据属性描述符测试代码" tabindex="-1"><a class="header-anchor" href="#数据属性描述符测试代码" aria-hidden="true">#</a> 数据属性描述符测试代码</h2><p>测试 configurable 的作用</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">delete</span> obj<span class="token punctuation">.</span>name\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// undefined</span>\n<span class="token keyword">delete</span> obj<span class="token punctuation">.</span>address\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>address<span class="token punctuation">)</span> <span class="token comment">// 北京市</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试 enumerable 的作用</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [&#39;age&#39;, &#39;address&#39;]</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试 Writable 的作用</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>obj<span class="token punctuation">.</span>address <span class="token operator">=</span> <span class="token string">&#39;上海市&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>address<span class="token punctuation">)</span> <span class="token comment">// 北京市</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="存取属性描述符" tabindex="-1"><a class="header-anchor" href="#存取属性描述符" aria-hidden="true">#</a> 存取属性描述符</h2><p>隐藏某一个私有属性不希望直接被外界使用和赋值; 如果我们希望截获某一个属性访问和设置值的过程时, 也会使用存储属性描述符</p><p>数据数据描述符有如下四个特性：</p><ul><li>[[Configurable]]：表示属性是否可以通过 delete 删除属性，是否可以修改它的特性，或者是否可以将它修改为存取属性 描述符； <ul><li>和数据属性描述符是一致的；</li></ul></li><li>[Enumerable]]：表示属性是否可以通过 for-in 或者 Object.keys()返回该属性； <ul><li>和数据属性描述符是一致的；</li></ul></li><li>[[get]]：获取属性时会执行的函数。默认为 undefined</li><li>[[set]]：设置属性时会执行的函数。默认为 undefined</li></ul><h2 id="存储属性描述符测试代码" tabindex="-1"><a class="header-anchor" href="#存储属性描述符测试代码" aria-hidden="true">#</a> 存储属性描述符测试代码</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&#39;address&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_address\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>_address <span class="token operator">=</span> value\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>address<span class="token punctuation">)</span>\n\nobj<span class="token punctuation">.</span>address <span class="token operator">=</span> <span class="token string">&#39;上海市&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>address<span class="token punctuation">)</span>\n\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;获取了一次address的值&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;设置了addres的值&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>直接在对象字面量上定义存取器</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 私有属性(js里面是没有严格意义的私有属性)</span>\n  <span class="token literal-property property">_age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>\n  <span class="token keyword">set</span> <span class="token function">age</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>_age <span class="token operator">=</span> value\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token keyword">get</span> <span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_age\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="同时定义多个属性" tabindex="-1"><a class="header-anchor" href="#同时定义多个属性" aria-hidden="true">#</a> 同时定义多个属性</h2><p>Object.defineProperties() 方法直接在一个对象上定义 多个 新的属性或修改现有属性，并且返回该对象。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">_age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\nObject<span class="token punctuation">.</span><span class="token function">defineProperties</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;why&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_age\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>_age <span class="token operator">=</span> value\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="对象方法补充" tabindex="-1"><a class="header-anchor" href="#对象方法补充" aria-hidden="true">#</a> 对象方法补充</h2><p>获取对象的属性描述符：</p><ul><li>getOwnPropertyDescriptor</li><li>getOwnPropertyDescriptors</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 获取某一个特性属性的属性描述符</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 获取对象的所有属性描述符</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptors</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>禁止对象扩展新属性： preventExtensions</p><ul><li>给一个对象添加新的属性会失败（在严格模式下会报错）；</li></ul></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;why&#39;</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 1.禁止对象继续添加新的属性</span>\nObject<span class="token punctuation">.</span><span class="token function">preventExtensions</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>\n\nobj<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">1.88</span>\nobj<span class="token punctuation">.</span>address <span class="token operator">=</span> <span class="token string">&#39;广州市&#39;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment">// {name: &#39;why&#39;, age: 18}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>密封对象，不允许配置和删除属性： seal</p><ul><li>实际是调用 preventExtensions</li><li>并且将现有属性的 configurable:false</li></ul></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 2.禁止对象配置/删除里面的属性 且禁止添加新属性</span>\n\n<span class="token comment">// for (var key in obj) {</span>\n<span class="token comment">//   Object.defineProperty(obj, key, {</span>\n<span class="token comment">//     configurable: false,</span>\n<span class="token comment">//     enumerable: true,</span>\n<span class="token comment">//     writable: true,</span>\n<span class="token comment">//     value: obj[key]</span>\n<span class="token comment">//   })</span>\n<span class="token comment">// }</span>\n\nObject<span class="token punctuation">.</span><span class="token function">seal</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>\n\n<span class="token keyword">delete</span> obj<span class="token punctuation">.</span>name\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// why</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>冻结对象，不允许修改现有属性： freeze <ul><li>实际上是调用 seal</li><li>并且将现有属性的 writable: false</li></ul></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 3.让属性不可以修改(writable: false)</span>\nObject<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>\n\nobj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;kobe&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',69)],l={},o=(0,a(3744).Z)(l,[["render",function(n,s){return(0,e.wg)(),(0,e.iD)("div",null,p)}]])}}]);