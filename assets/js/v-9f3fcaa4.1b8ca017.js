"use strict";(self.webpackChunkvuepress_theme_knzn=self.webpackChunkvuepress_theme_knzn||[]).push([[5414],{5714:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p=JSON.parse('{"key":"v-9f3fcaa4","path":"/3158f72d8efcc81e5ac5ef8ffe25b31b/","title":"12 ES6 知识点讲解","lang":"zh-CN","frontmatter":{"permalink":"/3158f72d8efcc81e5ac5ef8ffe25b31b/","title":"12 ES6 知识点讲解","author":"前端程序猿","tags":["javascript"],"categories":["大前端"],"postImage":"/images/javascript.webp"},"excerpt":"<p>ES6 中对 对象字面量 进行了增强，称之为 Enhanced object literals（增强对象字面量）。</p>\\n<p>字面量的增强主要包括下面几部分：</p>\\n<ul>\\n<li>属性的简写：Property Shorthand</li>\\n<li>方法的简写：Method Shorthand</li>\\n<li>计算属性名：Computed Property Names</li>\\n</ul>\\n","headers":[{"level":2,"title":"字面量的增强","slug":"字面量的增强","children":[]},{"level":2,"title":"解构 Destructuring","slug":"解构-destructuring","children":[{"level":3,"title":"数组的解构：","slug":"数组的解构","children":[]},{"level":3,"title":"对象的解构：","slug":"对象的解构","children":[]}]},{"level":2,"title":"解构的应用场景","slug":"解构的应用场景","children":[]},{"level":2,"title":"let/const 基本使用","slug":"let-const-基本使用","children":[{"level":3,"title":"let 关键字：","slug":"let-关键字","children":[]},{"level":3,"title":"const 关键字：","slug":"const-关键字","children":[]},{"level":3,"title":"注意：","slug":"注意","children":[]}]},{"level":2,"title":"let/const 作用域提升","slug":"let-const-作用域提升","children":[]},{"level":2,"title":"let/const 有没有作用域提升呢？","slug":"let-const-有没有作用域提升呢","children":[]},{"level":2,"title":"Window 对象添加属性","slug":"window-对象添加属性","children":[]},{"level":2,"title":"变量被保存到 VariableMap 中","slug":"变量被保存到-variablemap-中","children":[]},{"level":2,"title":"var 的块级作用域","slug":"var-的块级作用域","children":[]},{"level":2,"title":"let/const 的块级作用域","slug":"let-const-的块级作用域","children":[]},{"level":2,"title":"块级作用域的应用","slug":"块级作用域的应用","children":[]},{"level":2,"title":"块级作用域的补充","slug":"块级作用域的补充","children":[]},{"level":2,"title":"let-const 的暂时性死区","slug":"let-const-的暂时性死区","children":[]},{"level":2,"title":"var、let、const 的选择","slug":"var、let、const-的选择","children":[]},{"level":2,"title":"字符串模板基本使用","slug":"字符串模板基本使用","children":[]},{"level":2,"title":"标签模板字符串使用","slug":"标签模板字符串使用","children":[]},{"level":2,"title":"函数的默认参数","slug":"函数的默认参数","children":[]},{"level":2,"title":"函数的剩余参数","slug":"函数的剩余参数","children":[]},{"level":2,"title":"函数箭头函数的补充","slug":"函数箭头函数的补充","children":[]},{"level":2,"title":"展开语法","slug":"展开语法","children":[]},{"level":2,"title":"数值的表示","slug":"数值的表示","children":[]},{"level":2,"title":"Symbol 的基本使用","slug":"symbol-的基本使用","children":[]},{"level":2,"title":"Symbol 作为属性名","slug":"symbol-作为属性名","children":[]},{"level":2,"title":"相同值的 Symbol","slug":"相同值的-symbol","children":[]},{"level":2,"title":"Set 的基本使用","slug":"set-的基本使用","children":[]},{"level":2,"title":"Set 的常见方法","slug":"set-的常见方法","children":[]},{"level":2,"title":"WeakSet 使用","slug":"weakset-使用","children":[]},{"level":2,"title":"WeakSet 的应用","slug":"weakset-的应用","children":[]},{"level":2,"title":"Map 的基本使用","slug":"map-的基本使用","children":[]},{"level":2,"title":"Map 的常用方法","slug":"map-的常用方法","children":[]},{"level":2,"title":"WeakMap 的使用","slug":"weakmap-的使用","children":[]},{"level":2,"title":"WeakMap 的应用","slug":"weakmap-的应用","children":[]}],"git":{"updatedTime":1659091972000,"contributors":[{"name":"张焕标","email":"1140457303@qq.com","commits":1}]},"filePathRelative":"深入理解JavaScript/12-es6.md"}')},2798:(n,s,a)=>{a.r(s),a.d(s,{default:()=>o});var p=a(6252);const e=[(0,p.uE)('<p>ES6 中对 对象字面量 进行了增强，称之为 Enhanced object literals（增强对象字面量）。</p><p>字面量的增强主要包括下面几部分：</p><ul><li>属性的简写：Property Shorthand</li><li>方法的简写：Method Shorthand</li><li>计算属性名：Computed Property Names</li></ul><h2 id="字面量的增强" tabindex="-1"><a class="header-anchor" href="#字面量的增强" aria-hidden="true">#</a> 字面量的增强</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;why&#39;</span>\n<span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span>\n\n<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 1.property shorthand(属性的简写)</span>\n  name<span class="token punctuation">,</span>\n  age<span class="token punctuation">,</span>\n\n  <span class="token comment">// 2.method shorthand(方法的简写)</span>\n  <span class="token function-variable function">foo</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">baz</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n  <span class="token comment">// 3.computed property name(计算属性名)</span>\n  <span class="token punctuation">[</span>name <span class="token operator">+</span> <span class="token number">123</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&#39;hehehehe&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="解构-destructuring" tabindex="-1"><a class="header-anchor" href="#解构-destructuring" aria-hidden="true">#</a> 解构 Destructuring</h2><p>ES6 中新增了一个从数组或对象中方便获取数据的方法，称之为解构 Destructuring。</p><p>我们可以划分为：数组的解构和对象的解构</p><h3 id="数组的解构" tabindex="-1"><a class="header-anchor" href="#数组的解构" aria-hidden="true">#</a> 数组的解构：</h3><p>基本解构过程</p><p>顺序解构</p><p>解构出数组</p><p>默认值</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;cba&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;nba&#39;</span><span class="token punctuation">]</span>\n<span class="token comment">// var item1 = names[0]</span>\n<span class="token comment">// var item2 = names[1]</span>\n<span class="token comment">// var item3 = names[2]</span>\n\n<span class="token comment">// 对数组的解构: []</span>\n<span class="token keyword">var</span> <span class="token punctuation">[</span>item1<span class="token punctuation">,</span> item2<span class="token punctuation">,</span> item3<span class="token punctuation">]</span> <span class="token operator">=</span> names\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item1<span class="token punctuation">,</span> item2<span class="token punctuation">,</span> item3<span class="token punctuation">)</span>\n\n<span class="token comment">// 解构后面的元素</span>\n<span class="token keyword">var</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> itemz<span class="token punctuation">]</span> <span class="token operator">=</span> names\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>itemz<span class="token punctuation">)</span>\n\n<span class="token comment">// 解构出一个元素,后面的元素放到一个新数组中</span>\n<span class="token keyword">var</span> <span class="token punctuation">[</span>itemx<span class="token punctuation">,</span> <span class="token operator">...</span>newNames<span class="token punctuation">]</span> <span class="token operator">=</span> names\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>itemx<span class="token punctuation">,</span> newNames<span class="token punctuation">)</span>\n\n<span class="token comment">// 解构的默认值</span>\n<span class="token keyword">var</span> <span class="token punctuation">[</span>itema<span class="token punctuation">,</span> itemb<span class="token punctuation">,</span> itemc<span class="token punctuation">,</span> itemd <span class="token operator">=</span> <span class="token string">&#39;aaa&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> names\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>itemd<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="对象的解构" tabindex="-1"><a class="header-anchor" href="#对象的解构" aria-hidden="true">#</a> 对象的解构：</h3><p>基本解构过程</p><p>任意顺序</p><p>重命名</p><p>默认值</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;why&#39;</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">1.88</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 对象的解构: {}</span>\n<span class="token keyword">var</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> height <span class="token punctuation">}</span> <span class="token operator">=</span> obj\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> height<span class="token punctuation">)</span>\n\n<span class="token keyword">var</span> <span class="token punctuation">{</span> age <span class="token punctuation">}</span> <span class="token operator">=</span> obj\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span>\n\n<span class="token keyword">var</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> newName <span class="token punctuation">}</span> <span class="token operator">=</span> obj\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newName<span class="token punctuation">)</span>\n\n<span class="token keyword">var</span> <span class="token punctuation">{</span> <span class="token literal-property property">address</span><span class="token operator">:</span> newAddress <span class="token operator">=</span> <span class="token string">&#39;广州市&#39;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> obj\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newAddress<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="解构的应用场景" tabindex="-1"><a class="header-anchor" href="#解构的应用场景" aria-hidden="true">#</a> 解构的应用场景</h2><p>解构目前在开发中使用是非常多的：</p><p>比如在开发中拿到一个变量时，自动对其进行解构使用；</p><p>比如对函数的参数进行解构；</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">info</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>name<span class="token punctuation">,</span> info<span class="token punctuation">.</span>age<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">foo</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>\n\n<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> name<span class="token punctuation">,</span> age <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">bar</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="let-const-基本使用" tabindex="-1"><a class="header-anchor" href="#let-const-基本使用" aria-hidden="true">#</a> let/const 基本使用</h2><p>在 ES5 中我们声明变量都是使用的 var 关键字，从 ES6 开始新增了两个关键字可以声明变量：let、const</p><p>let、const 在其他编程语言中都是有的，所以也并不是新鲜的关键字；</p><p>但是 let、const 确确实实给 JavaScript 带来一些不一样的东西；</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token string">&#39;foo&#39;</span>\n<span class="token keyword">let</span> bar <span class="token operator">=</span> <span class="token string">&#39;bar&#39;</span>\n\n<span class="token comment">// const constant(常量/衡量)</span>\n<span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">&#39;abc&#39;</span>\nname <span class="token operator">=</span> <span class="token string">&#39;cba&#39;</span> <span class="token comment">// 报错</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="let-关键字" tabindex="-1"><a class="header-anchor" href="#let-关键字" aria-hidden="true">#</a> let 关键字：</h3><p>从直观的角度来说，let 和 var 是没有太大的区别的，都是用于声明一个变量</p><h3 id="const-关键字" tabindex="-1"><a class="header-anchor" href="#const-关键字" aria-hidden="true">#</a> const 关键字：</h3><p>const 关键字是 constant 的单词的缩写，表示常量、衡量的意思；它表示保存的数据一旦被赋值，就不能被修改；</p><p>但是如果赋值的是引用类型，那么可以通过引用找到对应的对象，修改对象的内容；</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 注意事项一: const本质上是传递的值不可以修改</span>\n<span class="token comment">// 但是如果传递的是一个引用类型(内存地址), 可以通过引用找到对应的对象, 去修改对象内部的属性, 这个是可以的</span>\n<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// obj = {}</span>\nobj<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token string">&#39;aaa&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>foo<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="注意" tabindex="-1"><a class="header-anchor" href="#注意" aria-hidden="true">#</a> 注意：</h3><p>另外 let、const 不允许重复声明变量；</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token string">&#39;abc&#39;</span>\n<span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token string">&#39;cba&#39;</span>\n\n<span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token string">&#39;abc&#39;</span>\n<span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token string">&#39;cba&#39;</span> <span class="token comment">// SyntaxError: Identifier &#39;foo&#39; has already been declared</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="let-const-作用域提升" tabindex="-1"><a class="header-anchor" href="#let-const-作用域提升" aria-hidden="true">#</a> let/const 作用域提升</h2><p>let、const 和 var 的另一个重要区别是作用域提升：</p><p>我们知道 var 声明的变量是会进行作用域提升的；但是如果我们使用 let 声明的变量，在声明之前访问会报错；</p><p>那么是不是意味着 foo 变量只有在代码执行阶段才会创建的呢？</p><p>事实上并不是这样的，我们可以看一下 ECMA262 对 let 和 const 的描述；</p><p>这些变量会被创建在包含他们的词法环境被实例化时，但是是不可以访问它们的，直到词法绑定被求值；</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span>\n<span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token string">&#39;foo&#39;</span>\n\n<span class="token comment">// let/const他们是没有作用域提升</span>\n<span class="token comment">// foo被创建出来了, 但是不能被访问</span>\n<span class="token comment">// 作用域提升: 能提前被访问</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span> <span class="token comment">// Reference(引用)Error: Cannot access &#39;foo&#39; before initialization(初始化)</span>\n<span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token string">&#39;foo&#39;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="let-const-有没有作用域提升呢" tabindex="-1"><a class="header-anchor" href="#let-const-有没有作用域提升呢" aria-hidden="true">#</a> let/const 有没有作用域提升呢？</h2><p>从上面我们可以看出，在执行上下文的词法环境创建出来的时候，变量事实上已经被创建了，只是这个变量是不能被访问的。</p><p>那么变量已经有了，但是不能被访问，是不是一种作用域的提升呢？</p><p>作用域提升：在声明变量的作用域中，如果这个变量可以在声明之前被访问，那么我们可以称之为作用域提升；在这里，它虽然被创建出来了，但是不能被访问，我认为不能称之为作用域提升；</p><p>所以我的观点是 let、const 没有进行作用域提升，但是会在解析阶段被创建出来。</p><h2 id="window-对象添加属性" tabindex="-1"><a class="header-anchor" href="#window-对象添加属性" aria-hidden="true">#</a> Window 对象添加属性</h2><p>我们知道，在全局通过 var 来声明一个变量，事实上会在 window 上添加一个属性：</p><p>但是 let、const 是不会给 window 上添加任何属性的。</p><p>那么我们可能会想这个变量是保存在哪里呢？</p><p>我们先回顾一下最新的 ECMA 标准中对执行上下文的描述</p><p>执行上下文(旧版)：每一个执行上下文会被关联到一个变量环境(variable object, VO),在源代码中的变量和函数声明会被作为属性添加到 VO 中。对于函数来说，参数也会被添加到 VO 中</p><p>执行上下文(新版)： 每一个执行上下文会关联到一个变量环境(VariableEnvironment)中，在执行代码中变量和函数的声明会作为环境记录（Environment Record) 添加到变量环境中。对于函数来说，参数也会被作为环境记录添加到变量环境中</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token string">&#39;foo&#39;</span>\n<span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token string">&#39;Hello World&#39;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>foo<span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>message<span class="token punctuation">)</span>\n\nwindow<span class="token punctuation">.</span>message <span class="token operator">=</span> <span class="token string">&#39;哈哈哈&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>\n\n<span class="token keyword">let</span> bar <span class="token operator">=</span> <span class="token string">&#39;foo&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>bar<span class="token punctuation">)</span> <span class="token comment">// undefined</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="变量被保存到-variablemap-中" tabindex="-1"><a class="header-anchor" href="#变量被保存到-variablemap-中" aria-hidden="true">#</a> 变量被保存到 VariableMap 中</h2><p>也就是说我们声明的变量和环境记录是被添加到变量环境中的：</p><p>但是标准有没有规定这个对象是 window 对象或者其他对象呢？其实并没有，那么 JS 引擎在解析的时候，其实会有自己的实现；比如 v8 中其实是通过 VariableMap 的一个 hashmap 来实现它们的存储的。</p><p>那么 window 对象呢？而 window 对象是早期的 GO 对象，在最新的实现中其实是浏览器添加的全局对象，并且一直保持了 window 和 var 之间值的相等性；</p><h2 id="var-的块级作用域" tabindex="-1"><a class="header-anchor" href="#var-的块级作用域" aria-hidden="true">#</a> var 的块级作用域</h2><p>在我们前面的学习中，JavaScript 只会形成两个作用域：全局作用域和函数作用域。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 在ES5中只有两个东西会形成作用域</span>\n<span class="token comment">// 1.全局作用域</span>\n<span class="token comment">// 2.函数作用域</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token string">&#39;bar&#39;</span>\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span> <span class="token comment">// error</span>\n\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">function</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ES5 中放到一个代码中定义的变量，外面是可以访问的：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 声明对象的字面量</span>\n<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;why&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// ES5中没有块级作用域</span>\n<span class="token comment">// 块代码(block code)</span>\n<span class="token punctuation">{</span>\n  <span class="token comment">// 声明一个变量</span>\n  <span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token string">&#39;foo&#39;</span>\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="let-const-的块级作用域" tabindex="-1"><a class="header-anchor" href="#let-const-的块级作用域" aria-hidden="true">#</a> let/const 的块级作用域</h2><p>在 ES6 中新增了块级作用域，并且通过 let、const、function、class 声明的标识符是具备块级作用域的限制的：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// ES6的代码块级作用域</span>\n<span class="token comment">// 对let/const/function/class声明的类型是有效</span>\n<span class="token punctuation">{</span>\n  <span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token string">&#39;why&#39;</span>\n  <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token keyword">function</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;demo function&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 不同的浏览器有不同实现的(大部分浏览器为了兼容以前的代码, 让function是没有块级作用域)</span>\n<span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Person is not defined</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是我们会发现函数拥有块级作用域，但是外面依然是可以访问的：</p><p>这是因为引擎会对函数的声明进行特殊的处理，允许像 var 那样进行提升；</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// if语句的代码就是块级作用域</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token string">&#39;foo&#39;</span>\n  <span class="token keyword">let</span> bar <span class="token operator">=</span> <span class="token string">&#39;bar&#39;</span>\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span> <span class="token comment">// foo</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span> <span class="token comment">// Uncaught ReferenceError: bar is not defined</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// switch语句的代码也是块级作用域</span>\n<span class="token keyword">var</span> color <span class="token operator">=</span> <span class="token string">&#39;red&#39;</span>\n\n<span class="token keyword">switch</span> <span class="token punctuation">(</span>color<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">case</span> <span class="token string">&#39;red&#39;</span><span class="token operator">:</span>\n    <span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token string">&#39;foo&#39;</span>\n    <span class="token keyword">let</span> bar <span class="token operator">=</span> <span class="token string">&#39;bar&#39;</span>\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span> <span class="token comment">// Uncaught ReferenceError: bar is not defined</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// for语句的代码也是块级作用域</span>\n<span class="token comment">// for (var i = 0; i &lt; 10; i++) {</span>\n<span class="token comment">// }</span>\n\n<span class="token comment">// console.log(i); // 10</span>\n\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment">// Uncaught ReferenceError: i is not defined</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="块级作用域的应用" tabindex="-1"><a class="header-anchor" href="#块级作用域的应用" aria-hidden="true">#</a> 块级作用域的应用</h2><p>我来看一个实际的案例：获取多个按钮监听点击</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> btns <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span>\n\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> btns<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    btns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;第&#39;</span> <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token string">&#39;个按钮被点击&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 let 或者 const 来实现：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> btns<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  btns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;第&#39;</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">&#39;个按钮被点击&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="块级作用域的补充" tabindex="-1"><a class="header-anchor" href="#块级作用域的补充" aria-hidden="true">#</a> 块级作用域的补充</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;cba&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;nba&#39;</span><span class="token punctuation">]</span>\n\n<span class="token comment">// 不可以使用const</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> names<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>names<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token punctuation">{</span>\n  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>names<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token punctuation">{</span>\n  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>names<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token punctuation">{</span>\n  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">2</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>names<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// for...of: ES6新增的遍历数组(对象)</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> names<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token punctuation">{</span>\n  <span class="token keyword">const</span> item <span class="token operator">=</span> <span class="token string">&#39;abc&#39;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token punctuation">{</span>\n  <span class="token keyword">const</span> item <span class="token operator">=</span> <span class="token string">&#39;cba&#39;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token comment">// Uncaught ReferenceError: item is not defined</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="let-const-的暂时性死区" tabindex="-1"><a class="header-anchor" href="#let-const-的暂时性死区" aria-hidden="true">#</a> let-const 的暂时性死区</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token string">&#39;foo&#39;</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span> <span class="token comment">// Uncaught ReferenceError: Cannot access &#39;foo&#39; before initialization</span>\n\n  <span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token string">&#39;abc&#39;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span> <span class="token comment">// Uncaught ReferenceError: Cannot access &#39;foo&#39; before initialization</span>\n\n  <span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token string">&#39;abc&#39;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="var、let、const-的选择" tabindex="-1"><a class="header-anchor" href="#var、let、const-的选择" aria-hidden="true">#</a> var、let、const 的选择</h2><p>那么在开发中，我们到底应该选择使用哪一种方式来定义我们的变量呢？</p><p>对于 var 的使用：我们需要明白一个事实，var 所表现出来的特殊性：比如作用域提升、window 全局对象、没有块级作用域等都是一些历史遗留问题；其实是 JavaScript 在设计之初的一种语言缺陷；当然目前市场上也在利用这种缺陷出一系列的面试题，来考察大家对 JavaScript 语言本身以及底层的理解；但是在实际工作中，我们可以使用最新的规范来编写，也就是不再使用 var 来定义变量了；</p><p>对于 let、const：</p><p>对于 let 和 const 来说，是目前开发中推荐使用的；我们会优先推荐使用 const，这样可以保证数据的安全性不会被随意的篡改；只有当我们明确知道一个变量后续会需要被重新赋值时，这个时候再使用 let；这种在很多其他语言里面也都是一种约定俗成的规范，尽量我们也遵守这种规范；</p><h2 id="字符串模板基本使用" tabindex="-1"><a class="header-anchor" href="#字符串模板基本使用" aria-hidden="true">#</a> 字符串模板基本使用</h2><p>在 ES6 之前，如果我们想要将字符串和一些动态的变量（标识符）拼接到一起，是非常麻烦和丑陋的（ugly）。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// ES6之前拼接字符串和其他标识符</span>\n<span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">&#39;why&#39;</span>\n<span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">18</span>\n<span class="token keyword">const</span> height <span class="token operator">=</span> <span class="token number">1.88</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;my name is &#39;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&#39;, age is &#39;</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">&#39;, height is &#39;</span> <span class="token operator">+</span> height<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ES6 允许我们使用字符串模板来嵌入 JS 的变量或者表达式来进行拼接：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// ES6提供模板字符串 ``</span>\n<span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, age is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, height is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>height<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先，我们会使用 `` 符号来编写字符串，称之为模板字符串；其次，在模板字符串中，我们可以通过 ${expression} 来嵌入动态的内容；</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> info <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">age double is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>age <span class="token operator">*</span> <span class="token number">2</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span>\n\n<span class="token keyword">function</span> <span class="token function">doubleAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> age <span class="token operator">*</span> <span class="token number">2</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> info2 <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">double age is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">doubleAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>info2<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="标签模板字符串使用" tabindex="-1"><a class="header-anchor" href="#标签模板字符串使用" aria-hidden="true">#</a> 标签模板字符串使用</h2><p>模板字符串还有另外一种用法：标签模板字符串（Tagged Template Literals）</p><p>我们一起来看一个普通的 JavaScript 的函数</p><p>如果我们使用标签模板字符串，并且在调用的时候插入其他的变量：</p><p>模板字符串被拆分了；第一个元素是数组，是被模块字符串拆分的字符串组合；后面的元素是一个个模块字符串传入的内容；</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 第一个参数依然是模块字符串中整个字符串, 只是被切成多块,放到了一个数组中</span>\n<span class="token comment">// 第二个参数是模块字符串中, 第一个 ${}</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">m<span class="token punctuation">,</span> n<span class="token punctuation">,</span> x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">,</span> x<span class="token punctuation">)</span> <span class="token comment">// [&#39;Hello&#39;, &#39;Wo&#39;, &#39;rld&#39;, raw: Array(3)] &#39;why&#39; 18</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">&#39;why&#39;</span>\n<span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">18</span>\nfoo<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">Wo</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">rld</span><span class="token template-punctuation string">`</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="函数的默认参数" tabindex="-1"><a class="header-anchor" href="#函数的默认参数" aria-hidden="true">#</a> 函数的默认参数</h2><p>在 ES6 之前，我们编写的函数参数是没有默认值的，所以我们在编写函数时，如果有下面的需求：</p><p>传入了参数，那么使用传入的参数；没有传入参数，那么使用一个默认值；</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// ES5以及之前给参数默认值</span>\n<span class="token doc-comment comment">/**\n * 缺点:\n *  1.写起来很麻烦, 并且代码的阅读性是比较差\n *  2.这种写法是有bug\n */</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">m<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  m <span class="token operator">=</span> m <span class="token operator">||</span> <span class="token string">&#39;aaa&#39;</span>\n  n <span class="token operator">=</span> n <span class="token operator">||</span> <span class="token string">&#39;bbb&#39;</span>\n\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而在 ES6 中，我们允许给函数一个默认值</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 1.ES6可以给函数参数提供默认值</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>m <span class="token operator">=</span> <span class="token string">&#39;aaa&#39;</span><span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token string">&#39;bbb&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// foo()</span>\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 2.对象参数和默认值以及解构</span>\n<span class="token keyword">function</span> <span class="token function">printInfo</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">,</span> age <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;why&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">printInfo</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;kobe&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">40</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 另外一种写法</span>\n<span class="token keyword">function</span> <span class="token function">printInfo1</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name <span class="token operator">=</span> <span class="token string">&#39;why&#39;</span><span class="token punctuation">,</span> age <span class="token operator">=</span> <span class="token number">18</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">printInfo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外参数的默认值我们通常会将其放到最后（在很多语言中，如果不放到最后其实会报错的）：但是 JavaScript 允许不将其放到最后，但是意味着还是会按照顺序来匹配；</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 3.有默认值的形参最好放到最后</span>\n<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z <span class="token operator">=</span> <span class="token number">30</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// bar(10, 20)</span>\n<span class="token function">bar</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外默认值会改变函数的 length 的个数，默认值以及后面的参数都不计算在 length 之内了。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">30</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>baz<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token comment">// 4</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="函数的剩余参数" tabindex="-1"><a class="header-anchor" href="#函数的剩余参数" aria-hidden="true">#</a> 函数的剩余参数</h2><p>ES6 中引用了 rest parameter，可以将不定数量的参数放入到一个数组中：</p><p>如果最后一个参数是 ... 为前缀的，那么它会将剩余的参数放到该参数中，并且作为一个数组；</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// rest paramaters必须放到最后</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">m<span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">)</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>\n\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么剩余参数和 arguments 有什么区别呢？</p><ul><li>剩余参数只包含那些没有对应形参的实参，而 arguments 对象包含了传给函数的所有实参；</li><li>arguments 对象不是一个真正的数组，而 rest 参数是一个真正的数组，可以进行数组的所有操作；</li><li>arguments 是早期的 ECMAScript 中为了方便去获取所有的参数提供的一个数据结构，而 rest 参数是 ES6 中提供 并且希望以此来替代 arguments 的；</li><li>剩余参数必须放到最后一个位置，否则会报错。</li></ul><h2 id="函数箭头函数的补充" tabindex="-1"><a class="header-anchor" href="#函数箭头函数的补充" aria-hidden="true">#</a> 函数箭头函数的补充</h2><p>在前面我们已经学习了箭头函数的用法，这里进行一些补充：</p><p>箭头函数是没有显式原型的，所以不能作为构造函数，使用 new 来创建对象；</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">bar</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// undefined</span>\n\n<span class="token comment">// bar is not a constructor</span>\n<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="展开语法" tabindex="-1"><a class="header-anchor" href="#展开语法" aria-hidden="true">#</a> 展开语法</h2><ul><li>可以在函数调用/数组构造时，将数组表达式或者 string 在语法层面展开；</li><li>还可以在构造字面量对象时, 将对象表达式按 key-value 的方式展开；</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;cba&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;nba&#39;</span><span class="token punctuation">]</span>\n<span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">&#39;why&#39;</span>\n<span class="token keyword">const</span> info <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;why&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">}</span>\n\n<span class="token comment">// 1.函数调用时</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// foo.apply(null, names)</span>\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token operator">...</span>names<span class="token punctuation">)</span>\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token operator">...</span>name<span class="token punctuation">)</span> <span class="token comment">// w h y</span>\n\n<span class="token comment">// 2.构造数组时</span>\n<span class="token keyword">const</span> newNames <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>names<span class="token punctuation">,</span> <span class="token operator">...</span>name<span class="token punctuation">]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newNames<span class="token punctuation">)</span> <span class="token comment">// [&#39;abc&#39;, &#39;cba&#39;, &#39;nba&#39;, &#39;w&#39;, &#39;h&#39;, &#39;y&#39;]</span>\n\n<span class="token comment">// 3.构建对象字面量时ES2018(ES9)</span>\n<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>info<span class="token punctuation">,</span> <span class="token literal-property property">address</span><span class="token operator">:</span> <span class="token string">&#39;广州市&#39;</span><span class="token punctuation">,</span> <span class="token operator">...</span>names <span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment">// {0: &#39;abc&#39;, 1: &#39;cba&#39;, 2: &#39;nba&#39;, name: &#39;why&#39;, age: 18, address: &#39;广州市&#39;}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：展开运算符其实是一种浅拷贝；</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> info <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;why&#39;</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">friend</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;kobe&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>info<span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;coderwhy&#39;</span> <span class="token punctuation">}</span>\n<span class="token comment">// console.log(obj)</span>\nobj<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;james&#39;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// james</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数值的表示" tabindex="-1"><a class="header-anchor" href="#数值的表示" aria-hidden="true">#</a> 数值的表示</h2><p>在 ES6 中规范了二进制和八进制的写法：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> num1 <span class="token operator">=</span> <span class="token number">100</span> <span class="token comment">// 十进制</span>\n\n<span class="token comment">// b -&gt; binary</span>\n<span class="token keyword">const</span> num2 <span class="token operator">=</span> <span class="token number">0b100</span> <span class="token comment">// 二进制</span>\n<span class="token comment">// o -&gt; octonary</span>\n<span class="token keyword">const</span> num3 <span class="token operator">=</span> <span class="token number">0o100</span> <span class="token comment">// 八进制</span>\n<span class="token comment">// x -&gt; hexadecimal</span>\n<span class="token keyword">const</span> num4 <span class="token operator">=</span> <span class="token number">0x100</span> <span class="token comment">// 十六进制</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> num3<span class="token punctuation">,</span> num4<span class="token punctuation">)</span> <span class="token comment">// 100 4 64 256</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外在 ES2021 新增特性：数字过长时，可以使用<code>_</code>作为连接符</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 大的数值的连接符(ES2021 ES12)</span>\n<span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token number">10_000_000_000_000_000</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="symbol-的基本使用" tabindex="-1"><a class="header-anchor" href="#symbol-的基本使用" aria-hidden="true">#</a> Symbol 的基本使用</h2><p>Symbol 是什么呢？Symbol 是 ES6 中新增的一个基本数据类型，翻译为符号。</p><p>那么为什么需要 Symbol 呢？</p><p>在 ES6 之前，对象的属性名都是字符串形式，那么很容易造成属性名的冲突；比如原来有一个对象，我们希望在其中添加一个新的属性和值，但是我们在不确定它原来内部有什么内容的情况下，很容易造成冲突，从而覆盖掉它内部的某个属性；</p><p>比如我们前面在讲 apply、call、bind 实现时，我们有给其中添加一个 fn 属性，那么如果它内部原来已经有了 fn 属性了 呢？</p><p>比如开发中我们使用混入，那么混入中出现了同名的属性，必然有一个会被覆盖掉；</p><p>Symbol 就是为了解决上面的问题，用来生成一个独一无二的值。</p><p>Symbol 值是通过 Symbol 函数来生成的，生成后可以作为属性名；也就是在 ES6 中，对象的属性名可以使用字符串，也可以使用 Symbol 值；</p><p>Symbol 即使多次创建值，它们也是不同的：Symbol 函数执行后每次创建出来的值都是独一无二的；我们也可以在创建 Symbol 值的时候传入一个描述 description：这个是 ES2019（ES10）新增的特性；</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// ES6中Symbol的基本使用</span>\n<span class="token keyword">const</span> s1 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> s2 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1 <span class="token operator">===</span> s2<span class="token punctuation">)</span> <span class="token comment">// false</span>\n\n<span class="token comment">// ES2019(ES10)中, Symbol还有一个描述(description)</span>\n<span class="token keyword">const</span> s3 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;aaa&#39;</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s3<span class="token punctuation">.</span>description<span class="token punctuation">)</span> <span class="token comment">// aaa</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="symbol-作为属性名" tabindex="-1"><a class="header-anchor" href="#symbol-作为属性名" aria-hidden="true">#</a> Symbol 作为属性名</h2><p>我们通常会使用 Symbol 在对象中表示唯一的属性名：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// Symbol值作为key</span>\n<span class="token comment">// 1.在定义对象字面量时使用</span>\n<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span>s1<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span>s2<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&#39;cba&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 2.新增属性</span>\nobj<span class="token punctuation">[</span>s3<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;nba&#39;</span>\n\n<span class="token comment">// 3.Object.defineProperty方式</span>\n<span class="token keyword">const</span> s4 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nObject<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> s4<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;mba&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>s1<span class="token punctuation">]</span><span class="token punctuation">,</span> obj<span class="token punctuation">[</span>s2<span class="token punctuation">]</span><span class="token punctuation">,</span> obj<span class="token punctuation">[</span>s3<span class="token punctuation">]</span><span class="token punctuation">,</span> obj<span class="token punctuation">[</span>s4<span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token comment">// 注意: 不能通过.语法获取</span>\n<span class="token comment">// console.log(obj.s1)</span>\n\n<span class="token comment">// 4.使用Symbol作为key的属性名,在遍历/Object.keys等中是获取不到这些Symbol值</span>\n<span class="token comment">// 需要Object.getOwnPropertySymbols来获取所有Symbol的key</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertySymbols</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> sKeys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertySymbols</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> sKey <span class="token keyword">of</span> sKeys<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>sKey<span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相同值的-symbol" tabindex="-1"><a class="header-anchor" href="#相同值的-symbol" aria-hidden="true">#</a> 相同值的 Symbol</h2><p>前面我们讲 Symbol 的目的是为了创建一个独一无二的值，那么如果我们现在就是想创建相同的 Symbol 应该怎么 来做呢？</p><p>我们可以使用 Symbol.for 方法来做到这一点；并且我们可以通过 Symbol.keyFor 方法来获取对应的 key；</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> sa <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">&#39;aaa&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> sb <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">&#39;aaa&#39;</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sa <span class="token operator">===</span> sb<span class="token punctuation">)</span> <span class="token comment">// true</span>\n\n<span class="token keyword">const</span> key <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">keyFor</span><span class="token punctuation">(</span>sa<span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token comment">// aaa</span>\n<span class="token keyword">const</span> sc <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sa <span class="token operator">===</span> sc<span class="token punctuation">)</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="set-的基本使用" tabindex="-1"><a class="header-anchor" href="#set-的基本使用" aria-hidden="true">#</a> Set 的基本使用</h2><p>在 ES6 之前，我们存储数据的结构主要有两种：数组、对象。在 ES6 中新增了另外两种数据结构：Set、Map，以及它们的另外形式 WeakSet、WeakMap。</p><p>Set 是一个新增的数据结构，可以用来保存数据，类似于数组，但是和数组的区别是元素不能重复。创建 Set 我们需要通过 Set 构造函数（暂时没有字面量创建的方式）：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nset<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>\nset<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>\nset<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span>\nset<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">333</span><span class="token punctuation">)</span>\n\nset<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span> <span class="token comment">// Set(4) {10, 20, 40, 333}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加对象时特别注意:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nset<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\nset<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\nset<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>\nset<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span> <span class="token comment">// Set(3) {{…}, {…}, {…}}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以发现 Set 中存放的元素是不会重复的，那么 Set 有一个非常常用的功能就是给数组去重。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 对数组去重(去除重复的元素)</span>\n<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">]</span>\n\n<span class="token comment">// 方法一</span>\n<span class="token keyword">const</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>newArr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 方法二</span>\n<span class="token keyword">const</span> arrSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>\n<span class="token keyword">const</span> newArr <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>arrSet<span class="token punctuation">)</span>\n<span class="token comment">// const newArr = [...arrSet];</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="set-的常见方法" tabindex="-1"><a class="header-anchor" href="#set-的常见方法" aria-hidden="true">#</a> Set 的常见方法</h2><p>Set 常见的属性：</p><ul><li>size：返回 Set 中元素的个数；</li></ul><p>Set 常用的方法：</p><ul><li>add(value)：添加某个元素，返回 Set 对象本身；</li><li>delete(value)：从 set 中删除和这个值相等的元素，返回 boolean 类型；</li><li>has(value)：判断 set 中是否存在某个元素，返回 boolean 类型；</li><li>clear()：清空 set 中所有的元素，没有返回值；</li><li>forEach(callback, [, thisArg])：通过 forEach 遍历 set；</li><li>另外 Set 是支持 for of 的遍历的。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// size属性</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrSet<span class="token punctuation">.</span>size<span class="token punctuation">)</span>\n\n<span class="token comment">// Set的方法</span>\n<span class="token comment">// add</span>\narrSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrSet<span class="token punctuation">)</span>\n\n<span class="token comment">// delete</span>\narrSet<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrSet<span class="token punctuation">)</span>\n\n<span class="token comment">// has</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrSet<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token comment">// clear</span>\n<span class="token comment">// arrSet.clear()</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrSet<span class="token punctuation">)</span>\n\n<span class="token comment">// 对Set进行遍历</span>\narrSet<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> arrSet<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="weakset-使用" tabindex="-1"><a class="header-anchor" href="#weakset-使用" aria-hidden="true">#</a> WeakSet 使用</h2><p>和 Set 类似的另外一个数据结构称之为 WeakSet，也是内部元素不能重复的数据结构。</p><p>那么和 Set 有什么区别呢？</p><ul><li>区别一：WeakSet 中只能存放对象类型，不能存放基本数据类型；</li><li>区别二：WeakSet 对元素的引用是弱引用，如果没有其他引用对某个对象进行引用，那么 GC 可以对该对象进行回收；</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> weakSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 1.区别一: 只能存放对象类型</span>\n<span class="token comment">// TypeError: Invalid value used in weak set</span>\nweakSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 2.区别二: 对对象是一个弱引用</span>\n<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;why&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">// 建立的是强引用</span>\nset<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>\n\n<span class="token comment">// 建立的是弱引用, 没有其它指向该对象的引用，会被垃圾回收</span>\nweakSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="weakset-的应用" tabindex="-1"><a class="header-anchor" href="#weakset-的应用" aria-hidden="true">#</a> WeakSet 的应用</h2><p>注意：WeakSet 不能遍历</p><p>因为 WeakSet 只是对对象的弱引用，如果我们遍历获取到其中的元素，那么有可能造成对象不能正常的销毁。所以存储到 WeakSet 中的对象是没办法获取的；</p><p>那么这个东西有什么用呢？事实上这个问题并不好回答，我们来使用一个 Stack Overflow 上的答案；</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> personSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    personSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">running</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>personSet<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;不能通过非构造方法创建出来的对象调用running方法&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;running~&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\np<span class="token punctuation">.</span><span class="token function">running</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">// p = null;</span>\n\np<span class="token punctuation">.</span><span class="token function">running</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;why&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// VM280:9 Uncaught Error: 不能通过非构造方法创建出来的对象调用running方法</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="map-的基本使用" tabindex="-1"><a class="header-anchor" href="#map-的基本使用" aria-hidden="true">#</a> Map 的基本使用</h2><p>另外一个新增的数据结构是 Map，用于存储映射关系。</p><p>但是我们可能会想，在之前我们可以使用对象来存储映射关系，他们有什么区别呢？</p><p>事实上我们对象存储映射关系只能用字符串（ES6 新增了 Symbol）作为属性名（key）；某些情况下我们可能希望通过其他类型作为 key，比如对象，这个时候会自动将对象转成字符串来作为 key；</p><p>JavaScript 中对象中是不能使用对象来作为 key 的</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;why&#39;</span> <span class="token punctuation">}</span>\n<span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;kobe&#39;</span> <span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> info <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span>obj1<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&#39;aaa&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span>obj2<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&#39;bbb&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span> <span class="token comment">// {[object Object]: &#39;bbb&#39;}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么我们就可以使用 Map：Map 就是允许我们对象类型来作为 key 的</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 构造方法的使用</span>\n<span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nmap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span> <span class="token string">&#39;aaa&#39;</span><span class="token punctuation">)</span>\nmap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj2<span class="token punctuation">,</span> <span class="token string">&#39;bbb&#39;</span><span class="token punctuation">)</span>\nmap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;ccc&#39;</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span> <span class="token comment">// Map(3) {{…} =&gt; &#39;aaa&#39;, {…} =&gt; &#39;bbb&#39;, 1 =&gt; &#39;ccc&#39;}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="map-的常用方法" tabindex="-1"><a class="header-anchor" href="#map-的常用方法" aria-hidden="true">#</a> Map 的常用方法</h2><p>Map 常见的属性：</p><ul><li>size：返回 Map 中元素的个数；</li></ul><p>Map 常见的方法：</p><ul><li>set(key, value)：在 Map 中添加 key、value，并且返回整个 Map 对象；</li><li>get(key)：根据 key 获取 Map 中的 value；</li><li>has(key)：判断是否包括某一个 key，返回 Boolean 类型；</li><li>delete(key)：根据 key 删除一个键值对，返回 Boolean 类型；</li><li>clear()：清空所有的元素；</li><li>forEach(callback, [, thisArg])：通过 forEach 遍历 Map；</li><li>Map 也可以通过 for of 进行遍历。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> map2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n  <span class="token punctuation">[</span>obj1<span class="token punctuation">,</span> <span class="token string">&#39;aaa&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span>obj2<span class="token punctuation">,</span> <span class="token string">&#39;bbb&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;ddd&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map2<span class="token punctuation">)</span> <span class="token comment">// Map(3) {{…} =&gt; &#39;aaa&#39;, {…} =&gt; &#39;bbb&#39;, 2 =&gt; &#39;ddd&#39;}</span>\n\n<span class="token comment">// 常见的属性和方法</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map2<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token comment">// 3</span>\n\n<span class="token comment">// set</span>\nmap2<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;why&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;eee&#39;</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map2<span class="token punctuation">)</span> <span class="token comment">// Map(4) {{…} =&gt; &#39;aaa&#39;, {…} =&gt; &#39;bbb&#39;, 2 =&gt; &#39;ddd&#39;, &#39;why&#39; =&gt; &#39;eee&#39;}</span>\n\n<span class="token comment">// get(key)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;why&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// eee</span>\n\n<span class="token comment">// has(key)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map2<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">&#39;why&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n\n<span class="token comment">// delete(key)</span>\nmap2<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">&#39;why&#39;</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map2<span class="token punctuation">)</span> <span class="token comment">// Map(3) {{…} =&gt; &#39;aaa&#39;, {…} =&gt; &#39;bbb&#39;, 2 =&gt; &#39;ddd&#39;}</span>\n\n<span class="token comment">// clear</span>\n<span class="token comment">// map2.clear()</span>\n<span class="token comment">// console.log(map2)</span>\n\n<span class="token comment">// 遍历map</span>\nmap2<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> key<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> map2<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token keyword">of</span> map2<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="weakmap-的使用" tabindex="-1"><a class="header-anchor" href="#weakmap-的使用" aria-hidden="true">#</a> WeakMap 的使用</h2><p>和 Map 类型的另外一个数据结构称之为 WeakMap，也是以键值对的形式存在的。</p><p>那么和 Map 有什么区别呢？</p><ul><li>区别一：WeakMap 的 key 只能使用对象，不接受其他的类型作为 key；</li><li>区别二：WeakMap 的 key 对对象想的引用是弱引用，如果没有其他引用引用这个对象，那么 GC 可以回收该对象；</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;obj1&#39;</span> <span class="token punctuation">}</span>\n<span class="token comment">// Map 的 key 是强引用</span>\n<span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nmap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&#39;aaa&#39;</span><span class="token punctuation">)</span>\n\n<span class="token comment">// WeakMap 的 key 是弱引用，如果没有其它指向该 key  的引用，会被垃圾回收</span>\n<span class="token keyword">const</span> weakMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nweakMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&#39;aaa&#39;</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 不能使用基本数据类型</span>\nweakMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;ccc&#39;</span><span class="token punctuation">)</span> <span class="token comment">// VM172:11 Uncaught TypeError: Invalid value used as weak map key</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>WeakMap 常见的方法有四个：</p><ul><li>set(key, value)：在 Map 中添加 key、value，并且返回整个 Map 对象；</li><li>get(key)：根据 key 获取 Map 中的 value；</li><li>has(key)：判断是否包括某一个 key，返回 Boolean 类型；</li><li>delete(key)：根据 key 删除一个键值对，返回 Boolean 类型；</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// get方法</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>weakMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// aaa</span>\n\n<span class="token comment">// has方法</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>weakMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n\n<span class="token comment">// delete方法</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>weakMap<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="weakmap-的应用" tabindex="-1"><a class="header-anchor" href="#weakmap-的应用" aria-hidden="true">#</a> WeakMap 的应用</h2><p>注意：WeakMap 也是不能遍历的;因为没有 forEach 方法，也不支持通过 for of 的方式进行遍历；那么我们的 WeakMap 有什么作用呢？</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 应用场景(vue3响应式原理)</span>\n<span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;why&#39;</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">obj1NameFn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;obj1NameFn1被执行&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">obj1NameFn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;obj1NameFn2被执行&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">obj1AgeFn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;obj1AgeFn1&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">obj1AgeFn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;obj1AgeFn2&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;kobe&#39;</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">1.88</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">address</span><span class="token operator">:</span> <span class="token string">&#39;广州市&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">obj2NameFn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;obj1NameFn1被执行&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">obj2NameFn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;obj1NameFn2被执行&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 1.创建WeakMap</span>\n<span class="token keyword">const</span> weakMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 2.收集依赖结构</span>\n<span class="token comment">// 2.1.对obj1收集的数据结构</span>\n<span class="token keyword">const</span> obj1Map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nobj1Map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>obj1NameFn1<span class="token punctuation">,</span> obj1NameFn2<span class="token punctuation">]</span><span class="token punctuation">)</span>\nobj1Map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>obj1AgeFn1<span class="token punctuation">,</span> obj1AgeFn2<span class="token punctuation">]</span><span class="token punctuation">)</span>\nweakMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span> obj1Map<span class="token punctuation">)</span>\n\n<span class="token comment">// 2.2.对obj2收集的数据结构</span>\n<span class="token keyword">const</span> obj2Map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nobj2Map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>obj2NameFn1<span class="token punctuation">,</span> obj2NameFn2<span class="token punctuation">]</span><span class="token punctuation">)</span>\nweakMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj2<span class="token punctuation">,</span> obj2Map<span class="token punctuation">)</span>\n\n<span class="token comment">// 3.如果obj1.name发生了改变</span>\n<span class="token comment">// Proxy/Object.defineProperty</span>\nobj1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;james&#39;</span>\n<span class="token keyword">const</span> targetMap <span class="token operator">=</span> weakMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span>\n<span class="token keyword">const</span> fns <span class="token operator">=</span> targetMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span>\nfns<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">item</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',201)],t={},o=(0,a(3744).Z)(t,[["render",function(n,s){return(0,p.wg)(),(0,p.iD)("div",null,e)}]])}}]);