"use strict";(self.webpackChunkvuepress_theme_knzn=self.webpackChunkvuepress_theme_knzn||[]).push([[1526],{8236:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e=JSON.parse('{"key":"v-6cf7166b","path":"/6b124f3a416ee9f7c29dfd6b27c772b7/","title":"02 JS 内存管理和闭包","lang":"zh-CN","frontmatter":{"permalink":"/6b124f3a416ee9f7c29dfd6b27c772b7/","title":"02 JS 内存管理和闭包","author":"前端程序猿","tags":["javascript"],"categories":["大前端"],"postImage":"/images/javascript.webp"},"excerpt":"<p>不管什么样的编程语言，在代码的执行过程中都是需要给它分配内存的，不同的是某些编程语言需要我们自己手动\\n的管理内存，某些编程语言会可以自动帮助我们管理内存：</p>\\n","headers":[{"level":2,"title":"认识内存管理","slug":"认识内存管理","children":[]},{"level":2,"title":"JS 的垃圾回收","slug":"js-的垃圾回收","children":[]},{"level":2,"title":"常见的 GC 算法 – 引用计数","slug":"常见的-gc-算法-–-引用计数","children":[]},{"level":2,"title":"常见的 GC 算法 – 标记清除","slug":"常见的-gc-算法-–-标记清除","children":[]},{"level":2,"title":"让人迷惑的闭包","slug":"让人迷惑的闭包","children":[]},{"level":2,"title":"JS 中函数是一等公民","slug":"js-中函数是一等公民","children":[]},{"level":2,"title":"JS 中闭包的定义","slug":"js-中闭包的定义","children":[{"level":3,"title":"在计算机科学中对闭包的定义（维基百科）","slug":"在计算机科学中对闭包的定义-维基百科","children":[]},{"level":3,"title":"我们再来看一下 MDN 对 JavaScript 闭包的解释","slug":"我们再来看一下-mdn-对-javascript-闭包的解释","children":[]},{"level":3,"title":"那么我的理解和总结","slug":"那么我的理解和总结","children":[]}]},{"level":2,"title":"闭包的访问过程","slug":"闭包的访问过程","children":[]},{"level":2,"title":"闭包的执行过程","slug":"闭包的执行过程","children":[]},{"level":2,"title":"闭包的内存泄露","slug":"闭包的内存泄露","children":[]},{"level":2,"title":"闭包的内存泄漏测试","slug":"闭包的内存泄漏测试","children":[]},{"level":2,"title":"AO 不使用的属性","slug":"ao-不使用的属性","children":[]}],"git":{"updatedTime":1659091972000,"contributors":[{"name":"张焕标","email":"1140457303@qq.com","commits":1}]},"filePathRelative":"深入理解JavaScript/02-JS-memory-management-and-closures.md"}')},3227:(n,a,s)=>{s.r(a),s.d(a,{default:()=>k});var e=s(6252);const p=s.p+"assets/img/1.46c654ae.jpg",t=s.p+"assets/img/2.954bda30.jpg",i=s.p+"assets/img/3.69bf6846.jpg",l=s.p+"assets/img/4.6cc4f2d3.jpg",c=s.p+"assets/img/6.a4e44ba5.jpg",o=s.p+"assets/img/7.644d4854.jpg",u=s.p+"assets/img/8.62d532d4.jpg",r=[(0,e.uE)('<p>不管什么样的编程语言，在代码的执行过程中都是需要给它分配内存的，不同的是某些编程语言需要我们自己手动 的管理内存，某些编程语言会可以自动帮助我们管理内存：</p><h2 id="认识内存管理" tabindex="-1"><a class="header-anchor" href="#认识内存管理" aria-hidden="true">#</a> 认识内存管理</h2><p>不管以什么样的方式来管理内存，内存的管理都会有如下的生命周期：</p><ul><li>第一步：分配申请你需要的内存（申请）；</li><li>第二步：使用分配的内存（存放一些东西，比如对象等）；</li><li>第三步：不需要使用时，对其进行释放；</li></ul><p>不同的编程语言对于第一步和第三步会有不同的实现：</p><ul><li>手动管理内存：比如 C、C++，包括早期的 OC，都是需要手动来管理内存的申请和释放的（malloc 和 free 函 数）；</li><li>自动管理内存：比如 Java、JavaScript、Python、Swift、Dart 等，它们有自动帮助我们管理内存；</li></ul><p>我们可以知道 JavaScript 通常情况下是不需要手动来管理的。JavaScript 会在定义变量时为我们分配内存。</p><p>但是内存分配方式是一样的吗？</p><p>JS 对于基本数据类型内存的分配会在执行时， 直接在栈空间进行分配；JS 对于复杂数据类型内存的分配会在堆内存 中开辟一块空间，并且将这块空间的指针返 回值变量引用；</p><p><img src="'+p+'" alt="JS内存结构"></p><h2 id="js-的垃圾回收" tabindex="-1"><a class="header-anchor" href="#js-的垃圾回收" aria-hidden="true">#</a> JS 的垃圾回收</h2><p>因为内存的大小是有限的，所以当内存不再需要的时候，我们需要对其进行释放，以便腾出更多的内存空间。</p><p>在手动管理内存的语言中，我们需要通过一些方式自己来释放不再需要的内存，比如 free 函数：</p><ul><li>但是这种管理的方式其实非常的低效，影响我们编写逻辑的代码的效率；</li><li>并且这种方式对开发者的要求也很高，并且一不小心就会产生内存泄露；</li></ul><p>所以大部分现代的编程语言都是有自己的垃圾回收机制：</p><ul><li>垃圾回收的英文是 Garbage Collection，简称 GC；</li><li>对于那些不再使用的对象，我们都称之为是垃圾，它需要被回收，以释放更多的内存空间；</li><li>而我们的语言运行环境，比如 Java 的运行环境 JVM，JavaScript 的运行环境 js 引擎都会内存 垃圾回收器；</li><li>垃圾回收器我们也会简称为 GC，所以在很多地方你看到 GC 其实指的是垃圾回收器；</li></ul><p>但是这里又出现了另外一个很关键的问题：GC 怎么知道哪些对象是不再使用的呢？这里就要用到 GC 的算法了</p><h2 id="常见的-gc-算法-–-引用计数" tabindex="-1"><a class="header-anchor" href="#常见的-gc-算法-–-引用计数" aria-hidden="true">#</a> 常见的 GC 算法 – 引用计数</h2><p>引用计数：当一个对象有一个引用指向它时，那么这个对象的引用就+1，当一个对象的引用为 0 时，这个对象就可以被销 毁掉；这个算法有一个很大的弊端就是会产生循环引用；</p><p>这个算法有一个很大的弊端就是会产生循环引用；</p><p><img src="'+t+'" alt="循环引用"></p><h2 id="常见的-gc-算法-–-标记清除" tabindex="-1"><a class="header-anchor" href="#常见的-gc-算法-–-标记清除" aria-hidden="true">#</a> 常见的 GC 算法 – 标记清除</h2><p>标记清除：</p><p>这个算法是设置一个根对象（root object），垃圾回收器会定期从这个根开始，找所有从根开始有引用到的对象，对 于哪些没有引用到的对象，就认为是不可用的对象；</p><p>这个算法可以很好的解决循环引用的问题；</p><p><img src="'+i+'" alt="标记清除"></p><p>JS 引擎比较广泛的采用的就是标记清除算法，当然类似于 V8 引擎为了进行更好的优化，它在算法的实现细节上也会结合 一些其他的算法。</p><h2 id="让人迷惑的闭包" tabindex="-1"><a class="header-anchor" href="#让人迷惑的闭包" aria-hidden="true">#</a> 让人迷惑的闭包</h2><p>闭包是 JavaScript 中一个非常容易让人迷惑的知识点：</p><p>这几天看到有同学在深入 JS 高级的交流群中发了这么一张图片；并且闭包也是群里面大家讨论最多的一个话题； <img src="'+l+'" alt="让人迷惑的闭包"></p><p>闭包确实是 JavaScript 中一个很难理解的知识点，接下来我们就对其一步步来进行剖析，看看它到底有什么神奇之 处</p><h2 id="js-中函数是一等公民" tabindex="-1"><a class="header-anchor" href="#js-中函数是一等公民" aria-hidden="true">#</a> JS 中函数是一等公民</h2><p>在 JavaScript 中，函数是非常重要的，并且是一等公民：那么就意味着函数的使用是非常灵活的；函数可以作为另外一个函数的参数，也可以作为另外一个函数的返回值来使用；</p><ul><li>自己编写高阶函数</li><li>使用内置的高阶函数</li></ul><h2 id="js-中闭包的定义" tabindex="-1"><a class="header-anchor" href="#js-中闭包的定义" aria-hidden="true">#</a> JS 中闭包的定义</h2><p>这里先来看一下闭包的定义，分成两个：在计算机科学中和在 JavaScript 中。</p><h3 id="在计算机科学中对闭包的定义-维基百科" tabindex="-1"><a class="header-anchor" href="#在计算机科学中对闭包的定义-维基百科" aria-hidden="true">#</a> 在计算机科学中对闭包的定义（维基百科）</h3><ul><li>闭包（英语：Closure），又称词法闭包（Lexical Closure）或函数闭包（function closures）；</li><li>是在支持 头等函数 的编程语言中，实现词法绑定的一种技术；</li><li>闭包在实现上是一个结构体，它存储了一个函数和一个关联的环境（相当于一个符号查找表）；</li><li>闭包跟函数最大的区别在于，当捕捉闭包的时候，它的 自由变量 会在补充时被确定，这样即使脱离了捕捉时的上下文，它也能照常运行；</li></ul><p>闭包的概念出现于 60 年代，最早实现闭包的程序是 Scheme，那么我们就可以理解为什么 JavaScript 中有闭包：因为 JavaScript 中有大量的设计是来源于 Scheme 的；</p><h3 id="我们再来看一下-mdn-对-javascript-闭包的解释" tabindex="-1"><a class="header-anchor" href="#我们再来看一下-mdn-对-javascript-闭包的解释" aria-hidden="true">#</a> 我们再来看一下 MDN 对 JavaScript 闭包的解释</h3><ul><li>一个函数和对其周围状态（lexical environment，词法环境）的引用捆绑在一起（或者说函数被引用包围），这样的组合就是闭包（closure）；</li><li>也就是说，闭包让你可以在一个内层函数中访问到其外层函数的作用域；</li><li>在 JavaScript 中，每当创建一个函数，闭包就会在函数创建的同时被创建出来；</li></ul><h3 id="那么我的理解和总结" tabindex="-1"><a class="header-anchor" href="#那么我的理解和总结" aria-hidden="true">#</a> 那么我的理解和总结</h3><ul><li>一个普通的函数 function，如果它可以访问外层作用于的自由变量，那么这个函数就是一个闭包；</li><li>从广义的角度来说：JavaScript 中的函数都是闭包；</li><li>从狭义的角度来说：JavaScript 中一个函数，如果访问了外层作用于的变量，那么它是一个闭包；</li></ul><h2 id="闭包的访问过程" tabindex="-1"><a class="header-anchor" href="#闭包的访问过程" aria-hidden="true">#</a> 闭包的访问过程</h2><p>如果我们编写了如下的代码，它一定是形成了闭包的：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">makeAdder</span><span class="token punctuation">(</span><span class="token parameter">count</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> count <span class="token operator">+</span> num\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> add10 <span class="token operator">=</span> <span class="token function">makeAdder</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add10</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="'+c+'" alt="闭包的访问过程"></p><h2 id="闭包的执行过程" tabindex="-1"><a class="header-anchor" href="#闭包的执行过程" aria-hidden="true">#</a> 闭包的执行过程</h2><p>那么函数继续执行呢？</p><p>这个时候 makeAdder 函数执行完毕，正常情况下我们的 AO 对象会被释放；但是因为在 0xb00 的函数中有作用域引用指向了这个 AO 对象，所以它不会被释放掉；</p><p><img src="'+o+'" alt="闭包的执行过程"></p><h2 id="闭包的内存泄露" tabindex="-1"><a class="header-anchor" href="#闭包的内存泄露" aria-hidden="true">#</a> 闭包的内存泄露</h2><p>那么我们为什么经常会说闭包是有内存泄露的呢？</p><p>在上面的案例中，如果后续我们不再使用 add10 函数了，那么该函数对象应该要被销毁掉，并且其引用着的父 作用域 AO 也应该被销毁掉；</p><p>但是目前因为在全局作用域下 add10 变量对 0xb00 的函数对象有引用，而 0xb00 的作用域中 AO（0x200）有引 用，所以最终会造成这些内存都是无法被释放的；</p><p>所以我们经常说的闭包会造成内存泄露，其实就是刚才的引用链中的所有对象都是无法释放的；</p><p>那么，怎么解决这个问题呢？</p><p>因为当将 add10 设置为 null 时，就不再对函数对象 0xb00 有引用，那么对应的 AO 对象 0x200 也就不可达了；</p><p>在 GC 的下一次检测中，它们就会被销毁掉；</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>add10 <span class="token operator">=</span> <span class="token keyword">null</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="闭包的内存泄漏测试" tabindex="-1"><a class="header-anchor" href="#闭包的内存泄漏测试" aria-hidden="true">#</a> 闭包的内存泄漏测试</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">testArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> arrFns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    arrFns<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">testArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      arrFns<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="'+u+'" alt="闭包的内存泄漏测试"></p><h2 id="ao-不使用的属性" tabindex="-1"><a class="header-anchor" href="#ao-不使用的属性" aria-hidden="true">#</a> AO 不使用的属性</h2><p>我们来研究一个问题：AO 对象不会被销毁时，是否里面的所有属性都不会被释放？</p><p>下面这段代码中 name 属于闭包的父作用域里面的变量；</p><p>我们知道形成闭包之后 count 一定不会被销毁掉，那么 name 是否会被销毁掉呢？</p><p>这里我打上了断点，我们可以在浏览器上看看结果；</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">makeAdder</span><span class="token punctuation">(</span><span class="token parameter">count</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&#39;why&#39;</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">debugger</span>\n    <span class="token keyword">return</span> count <span class="token operator">+</span> num\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> add10 <span class="token operator">=</span> <span class="token function">makeAdder</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add10</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add10</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',69)],d={},k=(0,s(3744).Z)(d,[["render",function(n,a){return(0,e.wg)(),(0,e.iD)("div",null,r)}]])}}]);