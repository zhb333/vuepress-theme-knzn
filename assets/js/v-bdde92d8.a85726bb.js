"use strict";(self.webpackChunkvuepress_theme_knzn=self.webpackChunkvuepress_theme_knzn||[]).push([[8690],{1179:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p=JSON.parse('{"key":"v-bdde92d8","path":"/f416b2c9905a0cd80514726e354d8d6e/","title":"JavaScript 数据结构之哈希表(散列表）","lang":"zh-CN","frontmatter":{"permalink":"/f416b2c9905a0cd80514726e354d8d6e/","title":"JavaScript 数据结构之哈希表(散列表）","date":"2019-03-17T13:46:08.000Z","categories":["frontEnd"],"tags":["js"]},"excerpt":"","headers":[{"level":2,"title":"一、 哈希表的介绍","slug":"一、-哈希表的介绍","children":[{"level":3,"title":"1. 哈希表的优势","slug":"_1-哈希表的优势","children":[]},{"level":3,"title":"2. 哈希表的缺点","slug":"_2-哈希表的缺点","children":[]},{"level":3,"title":"3. 哈希表的一些概念","slug":"_3-哈希表的一些概念","children":[]},{"level":3,"title":"4. 解决冲突的方法","slug":"_4-解决冲突的方法","children":[]},{"level":3,"title":"5. 链地址法","slug":"_5-链地址法","children":[]},{"level":3,"title":"6. 开发地址法","slug":"_6-开发地址法","children":[]},{"level":3,"title":"7. 哈希化的效率","slug":"_7-哈希化的效率","children":[]}]},{"level":2,"title":"二、 哈希函数","slug":"二、-哈希函数","children":[{"level":3,"title":"1. 优秀的哈希函数","slug":"_1-优秀的哈希函数","children":[]},{"level":3,"title":"2. 霍纳法则","slug":"_2-霍纳法则","children":[]},{"level":3,"title":"3. 质数的使用","slug":"_3-质数的使用","children":[]},{"level":3,"title":"4. 代码实现","slug":"_4-代码实现","children":[]}]},{"level":2,"title":"三、哈希表的实现","slug":"三、哈希表的实现","children":[]}],"git":{"updatedTime":1659094015000,"contributors":[{"name":"张焕标","email":"1140457303@qq.com","commits":1}]},"filePathRelative":"杂谈/js笔记/hash.md"}')},550:(n,s,a)=>{a.r(s),a.d(s,{default:()=>o});var p=a(6252);const t=[(0,p.uE)('<h2 id="一、-哈希表的介绍" tabindex="-1"><a class="header-anchor" href="#一、-哈希表的介绍" aria-hidden="true">#</a> 一、 哈希表的介绍</h2><h3 id="_1-哈希表的优势" tabindex="-1"><a class="header-anchor" href="#_1-哈希表的优势" aria-hidden="true">#</a> 1. 哈希表的优势</h3><p>哈希表通常是基于数组实现的，但相对于数组，它有很多优势</p><ul><li>快速的插入、删除、查找操作， 时间复杂度接近常量值，时间复杂度为 O(1)</li><li>哈希表的速度比树还要快，代码相对树来说简单很多</li></ul><h3 id="_2-哈希表的缺点" tabindex="-1"><a class="header-anchor" href="#_2-哈希表的缺点" aria-hidden="true">#</a> 2. 哈希表的缺点</h3><ul><li>哈希表中的数据没有顺序，因此不能通过固定的方式遍历元素</li><li>哈希表是通过空间来换取时间是数据结构，通过占用更多的内存空间来提高操作效率</li></ul><p><strong>哈希表的实现是基于数组的下标值的一种变换，这种变换通过哈希函数实现</strong></p><h3 id="_3-哈希表的一些概念" tabindex="-1"><a class="header-anchor" href="#_3-哈希表的一些概念" aria-hidden="true">#</a> 3. 哈希表的一些概念</h3><ul><li>哈希化： 将大数字转化为数组范围内下标的过程，我们称之为哈希化</li><li>哈希函数：大数字在进行哈希化的实现逻辑，封装在一个函数中，我们称这个函数为哈希函数</li><li>哈希表：通过哈希函数得到下标，并将数据插入到数组中，以及其它操作，对整个结构的封装，我们称之为哈希表</li></ul><h3 id="_4-解决冲突的方法" tabindex="-1"><a class="header-anchor" href="#_4-解决冲突的方法" aria-hidden="true">#</a> 4. 解决冲突的方法</h3><p>通过哈希函数得到的下标值，有可能会重复, 常见有两种解决方案</p><ul><li>链地址法(也叫拉链法)</li><li>开放地址法</li></ul><h3 id="_5-链地址法" tabindex="-1"><a class="header-anchor" href="#_5-链地址法" aria-hidden="true">#</a> 5. 链地址法</h3><p>示意图：</p><p><img src="https://upload-images.jianshu.io/upload_images/12493822-4d066af00b1b8fea.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="hash_link.jpg"></p><p>当哈希表产生冲突时，链地址法是常见的解决冲突的方法，数组中不再存储单一的值，也是存储一个链表(或数组)，将冲突的值依次追加到链表(或数组)中即可</p><h3 id="_6-开发地址法" tabindex="-1"><a class="header-anchor" href="#_6-开发地址法" aria-hidden="true">#</a> 6. 开发地址法</h3><p>开发地址法的主要工作方式是寻找空白的位置来添加重复的数据</p><p>寻找空白位置，有三种不同的方法</p><ul><li>线性探测: <ul><li>插入元素产生冲突时，也就是位置上已经存在元素，以步长为 1，往后寻找空白位置，并插入数据</li><li>线性探测，在插入连续的数据时，会产生聚集，导致冲突数据位置之间的距离很远，影响哈希表的操作效率</li></ul></li><li>二次探测 <ul><li>二次探测对步长做了优化，比如下标从 x 开始，那么步长可以是 x + 1, x + 2^2, x + 3^3 ......, 这样探测的距离比较远，可以避免连续数据产生的聚集问题</li><li>二次探测的问题是，不断的插入连续的数据，也会产生步长不一的聚集</li><li>效率比线性探测高</li></ul></li><li>再哈希法 <ul><li>为了解决，线性探测和二次探测可能产生的聚集问题，我们可以使用再哈希法</li><li>再哈希法，是使用数据的关键字，用另一个哈希函数，再做一次哈希，用这次哈希化的结果作为步长</li><li>再哈希函数的算法 <ul><li>stepSize = constant - (key % constant)</li><li>constant 为小于数组长度的质数</li><li>key 数据的关键字</li></ul></li></ul></li></ul><p>开发地址法中查找元素时，也需要安装步长线性查找，但遇到空白位置时，就可以停止查找</p><p>开发地址法中删除元素时，不能直接把该元素的位置设为 null, 否则会影响查找操作，应该设置成一个特殊值，当查找时，遇到这个值，才能知道，后面可能还有查找的相关数据</p><h3 id="_7-哈希化的效率" tabindex="-1"><a class="header-anchor" href="#_7-哈希化的效率" aria-hidden="true">#</a> 7. 哈希化的效率</h3><p>填充因子 = 总数据项 / 哈希表长度</p><p>开发地址法的填充因子，最大值为 1 链地址法的填充因子可以大于 1， 因为数组中存放的是链表，链表上又可以添加多个数据</p><p>探测次数与填充因子有关，随着填充因子的增长, 需要探测的次数会越来越多</p><p>开发地址法中， 线性探测的效率最低， 二次探测和再哈希法的效率差不多， 这三种算法的探测次数都随着填充因子的增大，呈现指数增长的趋势</p><p>链地址法，随填充因子的增大，探测次数与填充因子，呈现线性增长的趋势</p><p>因此，链地址法的效率比开放地址法的效率高很多</p><h2 id="二、-哈希函数" tabindex="-1"><a class="header-anchor" href="#二、-哈希函数" aria-hidden="true">#</a> 二、 哈希函数</h2><h3 id="_1-优秀的哈希函数" tabindex="-1"><a class="header-anchor" href="#_1-优秀的哈希函数" aria-hidden="true">#</a> 1. 优秀的哈希函数</h3><p>一个好的哈希函数，应该满足：</p><ul><li>尽可能小的计算量(使用霍纳法则)</li><li>哈希化的结果，使得元素可以均匀分布在数组中</li></ul><h3 id="_2-霍纳法则" tabindex="-1"><a class="header-anchor" href="#_2-霍纳法则" aria-hidden="true">#</a> 2. 霍纳法则</h3><p>用于对多项式求值问题</p><p>表达式： Pn(x)= anx^n + a(n－1)x^(n-1) + … + a1x + a0 (时间复杂度为 O(n^2))</p><p>霍纳法则表示法： ((…(((anx + an － 1)x + an － 2)x + an －3)…)x + a1)x + a0 (时间复杂度为 O(n))</p><p>关于霍纳法则，需要去了解其相关介绍</p><h3 id="_3-质数的使用" tabindex="-1"><a class="header-anchor" href="#_3-质数的使用" aria-hidden="true">#</a> 3. 质数的使用</h3><p>使用质数可以使数据尽可能均匀的分布</p><p>使用质数的地方有</p><ul><li>数组的长度</li><li>幂的底数</li></ul><h3 id="_4-代码实现" tabindex="-1"><a class="header-anchor" href="#_4-代码实现" aria-hidden="true">#</a> 4. 代码实现</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">hashFunc</span><span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span> max</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> hashCode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> primeNum <span class="token operator">=</span> <span class="token number">37</span><span class="token punctuation">;</span> <span class="token comment">// 质数</span>\n\n  <span class="token comment">// 霍纳法则，计算 hashCode</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    hashCode <span class="token operator">=</span> primeNum <span class="token operator">*</span> hashCode <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> hashCode <span class="token operator">%</span> max<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、哈希表的实现" tabindex="-1"><a class="header-anchor" href="#三、哈希表的实现" aria-hidden="true">#</a> 三、哈希表的实现</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">HashTable</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>storage <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>limit <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span> <span class="token comment">// 默认数组长度</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 判断是否是质数</span>\n  <span class="token function">isPrime</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> temp <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> temp<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> i <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 获取质数</span>\n  <span class="token function">getPrime</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isPrime</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      num <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> num<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 哈希函数</span>\n  <span class="token function">hashFunc</span><span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span> max</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> hashCode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 霍纳算法</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      hashCode <span class="token operator">=</span> hashCode <span class="token operator">*</span> <span class="token number">37</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> hashCode <span class="token operator">%</span> max<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 插入数据</span>\n  <span class="token function">put</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 通过哈希函数计算数组下标</span>\n    <span class="token keyword">const</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hashFunc</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>limit<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> bucket <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>storage<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bucket<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 计算得到的下标还未存放数据</span>\n      bucket <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>storage<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> bucket<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">let</span> isOverwrite <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 是否为修改操作</span>\n\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> tuple <span class="token keyword">of</span> bucket<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 循环判断是否为修改操作</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>tuple<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        tuple<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>\n        isOverwrite <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isOverwrite<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 不是修改操作，执行插入操作</span>\n      bucket<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>\n\n      <span class="token comment">// 如果填充因子大于 0.75 需要对数组进行扩容</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">/</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0.75</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> primeNum <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getPrime</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>limit <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>primeNum<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 获取数据</span>\n  <span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hashFunc</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>limit<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> bucket <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>storage<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bucket<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> tuple <span class="token keyword">of</span> bucket<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>tuple<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> tuple<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 删除数据</span>\n  <span class="token function">remove</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hashFunc</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>limit<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> bucket <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>storage<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bucket<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bucket<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> tuple <span class="token operator">=</span> bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>tuple<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        bucket<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n        <span class="token comment">// 如果填充因子小于0.25，需要缩小数组容量</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">/</span> <span class="token keyword">this</span><span class="token punctuation">.</span>limit <span class="token operator">&lt;</span> <span class="token number">0.25</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>limit <span class="token operator">&gt;</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">const</span> primeNum <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getPrime</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>limit <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>primeNum<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> tuple<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 重新设置数组长度</span>\n  <span class="token function">resize</span><span class="token punctuation">(</span><span class="token parameter">newLimit</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> oldStorage <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>storage<span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>limit <span class="token operator">=</span> newLimit<span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>storage <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token comment">// 将旧数据从新添加到哈希表中</span>\n    oldStorage<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">bucket</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bucket<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> tuple <span class="token keyword">of</span> bucket<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token operator">...</span>tuple<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',46)],e={},o=(0,a(3744).Z)(e,[["render",function(n,s){return(0,p.wg)(),(0,p.iD)("div",null,t)}]])}}]);