"use strict";(self.webpackChunkvuepress_theme_knzn=self.webpackChunkvuepress_theme_knzn||[]).push([[4965],{8675:(s,e,n)=>{n.r(e),n.d(e,{data:()=>a});const a=JSON.parse('{"key":"v-19883268","path":"/73f4fe47418e5f1e41dc4f8c3ef7134e/","title":"31 逐条来看 tsconfig.json 配置","lang":"zh-CN","frontmatter":{"permalink":"/73f4fe47418e5f1e41dc4f8c3ef7134e/","title":"31 逐条来看 tsconfig.json 配置","author":"前端程序猿","tags":["typescript"],"categories":["大前端"],"postImage":"/images/typescript.webp"},"excerpt":"<p>tsconfig.json 是放在项目根目录，用来配置一些编译选项等。当我们使用 tsc 命令编译项目，且没有指定输入文件时，编译器就会去查找 tsconfig.json 文件。如果在当前目录没找到，就会逐级向父文件夹查找。我们也可以通过在 tsc 命令中加上–project 参数，来指定一个包含 tsconfig.json 文件的目录。如果命令行上指定了输入文件时，tsconfig.json 的配置会被忽略。</p>\\n","headers":[{"level":2,"title":"1 compileOnSave","slug":"_1-compileonsave","children":[]},{"level":2,"title":"2 files","slug":"_2-files","children":[]},{"level":2,"title":"3 include","slug":"_3-include","children":[]},{"level":2,"title":"4 exclude","slug":"_4-exclude","children":[]},{"level":2,"title":"5 extends","slug":"_5-extends","children":[]},{"level":2,"title":"6 compilerOptions","slug":"_6-compileroptions","children":[{"level":3,"title":"target","slug":"target","children":[]},{"level":3,"title":"module","slug":"module","children":[]},{"level":3,"title":"lib","slug":"lib","children":[]},{"level":3,"title":"allowJs","slug":"allowjs","children":[]},{"level":3,"title":"checkJs","slug":"checkjs","children":[]},{"level":3,"title":"declaration","slug":"declaration","children":[]},{"level":3,"title":"sourceMap","slug":"sourcemap","children":[]},{"level":3,"title":"outFile","slug":"outfile","children":[]},{"level":3,"title":"outDir","slug":"outdir","children":[]},{"level":3,"title":"rootDir","slug":"rootdir","children":[]},{"level":3,"title":"removeComments","slug":"removecomments","children":[]},{"level":3,"title":"noEmit","slug":"noemit","children":[]},{"level":3,"title":"importHelpers","slug":"importhelpers","children":[]},{"level":3,"title":"isolatedModules","slug":"isolatedmodules","children":[]},{"level":3,"title":"noImplicitAny","slug":"noimplicitany","children":[]},{"level":3,"title":"alwaysStrict","slug":"alwaysstrict","children":[]},{"level":3,"title":"strictNullChecks","slug":"strictnullchecks","children":[]},{"level":3,"title":"strictFunctionTypes","slug":"strictfunctiontypes","children":[]},{"level":3,"title":"strictPropertyInitialization","slug":"strictpropertyinitialization","children":[]},{"level":3,"title":"strictBindCallApply","slug":"strictbindcallapply","children":[]},{"level":3,"title":"strict","slug":"strict","children":[]},{"level":3,"title":"noUnusedLocals","slug":"nounusedlocals","children":[]},{"level":3,"title":"noUnusedParameters","slug":"nounusedparameters","children":[]},{"level":3,"title":"noImplicitReturns","slug":"noimplicitreturns","children":[]},{"level":3,"title":"noFallthroughCasesInSwitch","slug":"nofallthroughcasesinswitch","children":[]},{"level":3,"title":"moduleResolution","slug":"moduleresolution","children":[]},{"level":3,"title":"baseUrl","slug":"baseurl","children":[]},{"level":3,"title":"paths","slug":"paths","children":[]},{"level":3,"title":"rootDirs","slug":"rootdirs","children":[]},{"level":3,"title":"typeRoots","slug":"typeroots","children":[]},{"level":3,"title":"types","slug":"types","children":[]},{"level":3,"title":"allowSyntheticDefaultImports","slug":"allowsyntheticdefaultimports","children":[]},{"level":3,"title":"sourceRoot","slug":"sourceroot","children":[]},{"level":3,"title":"mapRoot","slug":"maproot","children":[]},{"level":3,"title":"inlineSourceMap","slug":"inlinesourcemap","children":[]},{"level":3,"title":"inlineSources","slug":"inlinesources","children":[]},{"level":3,"title":"experimentalDecorators","slug":"experimentaldecorators","children":[]},{"level":3,"title":"emitDecoratorMetadata","slug":"emitdecoratormetadata","children":[]},{"level":3,"title":"本节小结","slug":"本节小结","children":[]}]}],"git":{"updatedTime":1659093557000,"contributors":[{"name":"张焕标","email":"1140457303@qq.com","commits":1}]},"filePathRelative":"TypeScript学习笔记/31-Look-at-the-tsconfig-json-configuration-one-by-one.md"}')},5746:(s,e,n)=>{n.r(e),n.d(e,{default:()=>u});var a=n(6252);const t=(0,a.uE)('<p>tsconfig.json 是放在项目根目录，用来配置一些编译选项等。当我们使用 tsc 命令编译项目，且没有指定输入文件时，编译器就会去查找 tsconfig.json 文件。如果在当前目录没找到，就会逐级向父文件夹查找。我们也可以通过在 tsc 命令中加上–project 参数，来指定一个包含 tsconfig.json 文件的目录。如果命令行上指定了输入文件时，tsconfig.json 的配置会被忽略。</p><blockquote><p>天才就是长期劳动的结果。 ——牛顿</p></blockquote><p>本小结我们主要讲 tsconfig.json 文件的可配项以及功能。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 直接在项目根目录下执行tsc命令，会自动根据tsconfig.json配置项编译</span>\ntsc\n<span class="token comment"># 指定要编译的项目，即tsconfig.json所在文件目录</span>\ntsc --project ./dir/project\n<span class="token comment"># 指定要编译的文件，忽略tsconfig.json文件配置</span>\ntsc ./src/main.ts\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来我们看一下 tsconfig.json 里都有哪些可配置项。tsconfig.json 文件里有几个主要的配置项：</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;compileOnSave&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;files&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;include&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;exclude&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;extends&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们来逐个学习它们的作用，以及可配置的值：</p><h2 id="_1-compileonsave" tabindex="-1"><a class="header-anchor" href="#_1-compileonsave" aria-hidden="true">#</a> 1 compileOnSave</h2><p>compileOnSave 的值是 true 或 false。如果设为 true，在我们编辑了项目中文件保存的时候，编辑器会根据 tsconfig.json 的配置重新生成文件，不过这个要编辑器支持</p><h2 id="_2-files" tabindex="-1"><a class="header-anchor" href="#_2-files" aria-hidden="true">#</a> 2 files</h2><p>files 可以配置一个数组列表，里面包含指定文件的相对或绝对路径。编译器在编译的时候只会编译包含在 files 中列出的文件。如果不指定，则取决于有没有设置 include 选项；如果没有 include 选项，则默认会编译根目录以及所有子目录中的文件。这里列出的路径必须是指定文件，而不是某个文件夹，而且不能使用<code>*</code>、<code>?</code>、<code>**/</code>等通配符。</p><h2 id="_3-include" tabindex="-1"><a class="header-anchor" href="#_3-include" aria-hidden="true">#</a> 3 include</h2><p>include 也可以指定要编译的路径列表，但和 files 的区别在于，这里的路径可以是文件夹，也可以是文件，可以使用相对和绝对路径，而且可以使用通配符。比如&quot;./src&quot;即表示要编译 src 文件夹下的所有文件以及子文件夹的文件。</p><h2 id="_4-exclude" tabindex="-1"><a class="header-anchor" href="#_4-exclude" aria-hidden="true">#</a> 4 exclude</h2><p>exclude 表示要排除的、不编译的文件，它也可以指定一个列表，规则和 include 一样，可以是文件可以是文件夹，可以是相对路径或绝对路径，可以使用通配符。</p><h2 id="_5-extends" tabindex="-1"><a class="header-anchor" href="#_5-extends" aria-hidden="true">#</a> 5 extends</h2><p>extends 可以通过指定一个其它的 tsconfig.json 文件路径，来继承这个配置文件里的配置，继承来的文件配置会覆盖当前文件定义的配置。TS 在 3.2 版本开始，支持继承一个来自 Node.js 包的 tsconfig.json 配置文件。</p><h2 id="_6-compileroptions" tabindex="-1"><a class="header-anchor" href="#_6-compileroptions" aria-hidden="true">#</a> 6 compilerOptions</h2><p>最后要讲的这个 compilerOptions 是重点了，它用来设置编译选项。因为它包含很多的可配置项，下面我们来看下 compilerOptions 里的所有可配项：</p><ul><li><strong>我们先来看第一类，一些比较基本的配置：</strong></li></ul><h3 id="target" tabindex="-1"><a class="header-anchor" href="#target" aria-hidden="true">#</a> target</h3><p>target 用于指定编译之后的版本目标，可选值有：ES3(默认值)、ES5、ES2015、ES2016、ES2017、ESNEXT。如果不配置 target 项，默认是讲代码转译为 ES3 的版本，如果设为 ESNEXT，则为最新 ES 规范版本。</p><h3 id="module" tabindex="-1"><a class="header-anchor" href="#module" aria-hidden="true">#</a> module</h3><p>module 用来指定要使用的模块标准，可选值有 commonjs、amd、system、umd、es2015(或写 es6)。如果不设置 module 选项，则如果 target 设为 ES6，那么 module 默认值为 ES6，否则是 commonjs。</p><h3 id="lib" tabindex="-1"><a class="header-anchor" href="#lib" aria-hidden="true">#</a> lib</h3><p>lib 用于指定要包含在编译中的库文件。如果你要使用一些 ES6 的新语法，你需要引入 ES6 这个库，或者也可以写 ES2015。如果没有指定 lib 配置，默认会加载一些库，而加载什么库是受 target 影响的。如果 target 为 ES5，默认包含的库有 DOM、ES5 和 ScriptHost；如果 target 是 ES6，默认引入的库有 DOM、ES6、DOM.Iterable 和 ScriptHost。</p><h3 id="allowjs" tabindex="-1"><a class="header-anchor" href="#allowjs" aria-hidden="true">#</a> allowJs</h3><p>allowJs 设置的值为 true 或 false，用来指定是否允许编译 JS 文件，默认是 false，即不编译 JS 文件。</p><h3 id="checkjs" tabindex="-1"><a class="header-anchor" href="#checkjs" aria-hidden="true">#</a> checkJs</h3><p>checkJs 的值为 true 或 false，用来指定是否检查和报告 JS 文件中的错误，默认是 false。</p><h3 id="declaration" tabindex="-1"><a class="header-anchor" href="#declaration" aria-hidden="true">#</a> declaration</h3><p>declaration 的值为 true 或 false，用来指定是否在编译的时候生成响应的&quot;.d.ts&quot;声明文件。如果设为 true，编译每个 ts 文件之后会生成一个 js 文件和一个声明文件。但是 declaration 和 allowJs 不能同时设为 true。</p><h3 id="sourcemap" tabindex="-1"><a class="header-anchor" href="#sourcemap" aria-hidden="true">#</a> sourceMap</h3><p>sourceMap 的值为 true 或 false，用来指定编译时是否生成.map 文件。</p><h3 id="outfile" tabindex="-1"><a class="header-anchor" href="#outfile" aria-hidden="true">#</a> outFile</h3><p>outFile 用于指定将输出文件合并为一个文件，它的值为一个文件路径名，比如设置为&quot;./dist/main.js&quot;，则输出的文件为一个 main.js 文件。但是要注意，只有设置 module 的值为 amd 和 system 模块时才支持这个配置。</p><h3 id="outdir" tabindex="-1"><a class="header-anchor" href="#outdir" aria-hidden="true">#</a> outDir</h3><p>outDir 用来指定输出文件夹，值为一个文件夹路径字符串，输出的文件都将放置在这个文件夹。</p><h3 id="rootdir" tabindex="-1"><a class="header-anchor" href="#rootdir" aria-hidden="true">#</a> rootDir</h3><p>用来指定编译文件的根目录，编译器会在根目录查找入口文件，如果编译器发现以 rootDir 的值作为根目录查找入口文件并不会把所有文件加载进去的话会报错，但是不会停止编译。</p><h3 id="removecomments" tabindex="-1"><a class="header-anchor" href="#removecomments" aria-hidden="true">#</a> removeComments</h3><p>removeComments 值为 true 或 false，用于指定是否将编译后的文件中的注释删掉，设为 true 的话即删掉注释，默认为 false。</p><h3 id="noemit" tabindex="-1"><a class="header-anchor" href="#noemit" aria-hidden="true">#</a> noEmit</h3><p>不生成编译文件，这个一般很少用了。</p><h3 id="importhelpers" tabindex="-1"><a class="header-anchor" href="#importhelpers" aria-hidden="true">#</a> importHelpers</h3><p>importHelpers 的值为 true 或 false，指定是否引入 tslib 里的辅助工具函数</p><h3 id="isolatedmodules" tabindex="-1"><a class="header-anchor" href="#isolatedmodules" aria-hidden="true">#</a> isolatedModules</h3><p>isolatedModules 的值为 true 或 false，指定是否将每个文件作为单独的模块，默认为 true，它不可以和 declaration 同时设定。</p><ul><li><strong>第二类是和严格类型检查相关的，开启了这些检查如果有错会报错：</strong></li></ul><h3 id="noimplicitany" tabindex="-1"><a class="header-anchor" href="#noimplicitany" aria-hidden="true">#</a> noImplicitAny</h3><p>noImplicitAny 的值为 true 或 false，如果我们没有为一些值设置明确的类型，编译器会默认这个值为 any 类型，如果将 noImplicitAny 设为 true，则如果没有设置明确的类型会报错，默认值为 false。</p><h3 id="alwaysstrict" tabindex="-1"><a class="header-anchor" href="#alwaysstrict" aria-hidden="true">#</a> alwaysStrict</h3><p>alwaysStrict 的值为 true 或 false，指定始终以严格模式检查每个模块，并且在编译之后的 JS 文件中加入&quot;use strict&quot;字符串，用来告诉浏览器该 JS 为严格模式。</p><h3 id="strictnullchecks" tabindex="-1"><a class="header-anchor" href="#strictnullchecks" aria-hidden="true">#</a> strictNullChecks</h3><p>strictNullChecks 的值为 true 或 false，当设为 true 时，null 和 undefined 值不能赋值给非这两种类型的值，别的类型的值也不能赋给它们。 除了 any 类型，还有个例外就是 undefined 可以赋值给 void 类型。</p><h3 id="strictfunctiontypes" tabindex="-1"><a class="header-anchor" href="#strictfunctiontypes" aria-hidden="true">#</a> strictFunctionTypes</h3><p>strictFunctionTypes 的值为 true 或 false，用来指定是否使用函数参数双向协变检查。还记得我们讲类型兼容性的时候讲过函数参数双向协变的这个例子：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">let</span> <span class="token function-variable function">funcA</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">let</span> <span class="token function-variable function">funcB</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\nfuncA <span class="token operator">=</span> funcB\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果开启了 strictFunctionTypes，这个赋值就会报错，默认为 false</p><h3 id="strictpropertyinitialization" tabindex="-1"><a class="header-anchor" href="#strictpropertyinitialization" aria-hidden="true">#</a> strictPropertyInitialization</h3><p>strictPropertyInitialization 的值为 true 或 false，设为 true 后会检查类的非 undefined 属性是否已经在构造函数里初始化，如果要开启这项，需要同时开启 strictNullChecks，默认为 false。</p><h3 id="strictbindcallapply" tabindex="-1"><a class="header-anchor" href="#strictbindcallapply" aria-hidden="true">#</a> strictBindCallApply</h3><p>strictBindCallApply 的值为 true 或 false，设为 true 后会对 bind、call 和 apply 绑定方法参数的检测是严格检测的，如下面的例子：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> a <span class="token operator">+</span> b\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// error Property &#39;1&#39; is missing in type &#39;[number]&#39; but required in type &#39;[number, string]&#39;</span>\n<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// error 不能将类型“number”分配给类型“string”</span>\n<span class="token keyword">let</span> ccd <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// right</span>\n<span class="token keyword">let</span> ccsd <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// right</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="strict" tabindex="-1"><a class="header-anchor" href="#strict" aria-hidden="true">#</a> strict</h3><p>strict 的值为 true 或 false，用于指定是否启动所有类型检查，如果设为 true 则会同时开启前面这几个严格类型检查，默认为 false。</p><ul><li><strong>第三类为额外的一些检查，开启了这些检查如果有错会提示不会报错：</strong></li></ul><h3 id="nounusedlocals" tabindex="-1"><a class="header-anchor" href="#nounusedlocals" aria-hidden="true">#</a> noUnusedLocals</h3><p>noUnusedLocals 的值为 true 或 false，用于检查是否有定义了但是没有使用的变量，对于这一点的检测，使用 ESLint 可以在你书写代码的时候做提示，你可以配合使用。它的默认值为 false。</p><h3 id="nounusedparameters" tabindex="-1"><a class="header-anchor" href="#nounusedparameters" aria-hidden="true">#</a> noUnusedParameters</h3><p>noUnusedParameters 的值为 true 或 false，用于检查是否有在函数体中没有使用的参数，这个也可以配合 ESLint 来做检查，它默认是 false。</p><h3 id="noimplicitreturns" tabindex="-1"><a class="header-anchor" href="#noimplicitreturns" aria-hidden="true">#</a> noImplicitReturns</h3><p>noImplicitReturns 的值为 true 或 false，用于检查函数是否有返回值，设为 true 后，如果函数没有返回值则会提示，默认为 false。</p><h3 id="nofallthroughcasesinswitch" tabindex="-1"><a class="header-anchor" href="#nofallthroughcasesinswitch" aria-hidden="true">#</a> noFallthroughCasesInSwitch</h3><p>noFallthroughCasesInSwitch 的值为 true 或 false，用于检查 switch 中是否有 case 没有使用 break 跳出 switch，默认为 false。</p><ul><li><strong>接下来是模块解析相关的：</strong></li></ul><h3 id="moduleresolution" tabindex="-1"><a class="header-anchor" href="#moduleresolution" aria-hidden="true">#</a> moduleResolution</h3><p>moduleResolution 用于选择模块解析策略，有&quot;node&quot;和&quot;classic&quot;两种类型，我们在讲模块解析的时候已经讲过了。</p><h3 id="baseurl" tabindex="-1"><a class="header-anchor" href="#baseurl" aria-hidden="true">#</a> baseUrl</h3><p>baseUrl 用于设置解析非相对模块名称的基本目录，这个我们在讲《模块和命名空间》的“模块解析配置项”一节时已经讲过了，相对模块不会受 baseUrl 的影响。</p><h3 id="paths" tabindex="-1"><a class="header-anchor" href="#paths" aria-hidden="true">#</a> paths</h3><p>paths 用于设置模块名到基于 baseUrl 的路径映射，我们前面也讲过，比如这样配置：</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;baseUrl&quot;</span><span class="token operator">:</span> <span class="token string">&quot;.&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 如果使用paths，必须设置baseUrl</span>\n    <span class="token property">&quot;paths&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">&quot;jquery&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;node_modules/jquery/dist/jquery&quot;</span><span class="token punctuation">]</span> <span class="token comment">// 此处映射是相对于&quot;baseUrl&quot;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还有当我们要为没有声明文件的第三方模块写声明文件时，我们可以先如下设置：</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;baseUrl&quot;</span><span class="token operator">:</span> <span class="token string">&quot;.&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 如果使用paths，必须设置baseUrl</span>\n    <span class="token property">&quot;paths&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">&quot;*&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;./node_modules/@types/*&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;./typings/*&quot;</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在 tsconfig.json 文件所在的目录里建一个 typings 文件夹，然后为要写声明文件的模块建一个同名文件夹，比如我们要为 make-dir 这个模块写声明文件，那么就在 typings 文件夹下新建一个文件夹，命名为 make-dir，然后在 make-dir 文件夹新建一个 index.d.ts 声明文件来为这个模块补充声明。</p><h3 id="rootdirs" tabindex="-1"><a class="header-anchor" href="#rootdirs" aria-hidden="true">#</a> rootDirs</h3><p>rootDirs 可以指定一个路径列表，在构建时编译器会将这个路径列表中的路径内容都放到一个文件夹中，我们在前面也学习了。</p><h3 id="typeroots" tabindex="-1"><a class="header-anchor" href="#typeroots" aria-hidden="true">#</a> typeRoots</h3><p>typeRoots 用来指定声明文件或文件夹的路径列表，如果指定了此项，则只有在这里列出的声明文件才会被加载。</p><h3 id="types" tabindex="-1"><a class="header-anchor" href="#types" aria-hidden="true">#</a> types</h3><p>types 用来指定需要包含的模块，只有在这里列出的模块声明文件才会被加载进来。</p><h3 id="allowsyntheticdefaultimports" tabindex="-1"><a class="header-anchor" href="#allowsyntheticdefaultimports" aria-hidden="true">#</a> allowSyntheticDefaultImports</h3><p>allowSyntheticDefaultImports 的值为 true 或 false，用来指定允许从没有默认导出的模块中默认导入。</p><ul><li><strong>接下来的是 source map 的一些配置项：</strong></li></ul><h3 id="sourceroot" tabindex="-1"><a class="header-anchor" href="#sourceroot" aria-hidden="true">#</a> sourceRoot</h3><p>sourceRoot 用于指定调试器应该找到 TypeScript 文件而不是源文件位置，这个值会被写进.map 文件里。</p><h3 id="maproot" tabindex="-1"><a class="header-anchor" href="#maproot" aria-hidden="true">#</a> mapRoot</h3><p>mapRoot 用于指定调试器找到映射文件而非生成文件的位置，指定 map 文件的根路径，该选项会影响.map 文件中的 sources 属性。</p><h3 id="inlinesourcemap" tabindex="-1"><a class="header-anchor" href="#inlinesourcemap" aria-hidden="true">#</a> inlineSourceMap</h3><p>inlineSourceMap 值为 true 或 false，指定是否将 map 文件的内容和 js 文件编译在同一个 js 文件中。如果设为 true，则 map 的内容会以//# sourceMappingURL=然后接 base64 字符串的形式插入在 js 文件底部。</p><h3 id="inlinesources" tabindex="-1"><a class="header-anchor" href="#inlinesources" aria-hidden="true">#</a> inlineSources</h3><p>inlineSources 的值是 true 或 false，用于指定是否进一步将.ts 文件的内容也包含到输出文件中。</p><ul><li><strong>最后还有两个其他的配置项：</strong></li></ul><h3 id="experimentaldecorators" tabindex="-1"><a class="header-anchor" href="#experimentaldecorators" aria-hidden="true">#</a> experimentalDecorators</h3><p>experimentalDecorators 的值是 true 或 false，用于指定是否启用实验性的装饰器特性，我们在讲装饰器的时候已经学习过了。</p><h3 id="emitdecoratormetadata" tabindex="-1"><a class="header-anchor" href="#emitdecoratormetadata" aria-hidden="true">#</a> emitDecoratorMetadata</h3><p>emitDecoratorMetadata 的值为 true 或 false，用于指定是否为装饰器提供元数据支持。关于元数据，也是 ES6 的新标准，可以通过 Reflect 提供的静态方法获取元数据，如果需要使用 Reflect 的一些方法，需要引入 ES2015.Reflect 这个库。</p><h3 id="本节小结" tabindex="-1"><a class="header-anchor" href="#本节小结" aria-hidden="true">#</a> 本节小结</h3>',109),i=(0,a.Uk)("本小节我们逐条看了 tsconfig.json 文件里可以配置的项目，随着后面 TypeScript 的升级，可能配置项会比这里多，你可以参考官方文档的升级日志来查看更新。本小节我们学了六个顶级配置项：compileOnSave、files、include、exclude、extends 和 compilerOptions，其中我们最常用的是 compilerOptions，用来配置编译选项。有一些参数是只能在 tsconfig.json 文件里配置的，而有一些则既可以在 tsconfig.json 文件配置，也可以在 tsc 命令行中指定，具体一个参数可以在哪里指定，可以参考"),o={href:"https://www.tslang.cn/docs/handbook/compiler-options.html",target:"_blank",rel:"noopener noreferrer"},l=(0,a.Uk)("编译选项列表"),r=(0,a.Uk)("，这里有标注。"),p=(0,a._)("p",null,"下个小节我们来开始接触书写声明文件，学会了如何书写声明文件后，你就可以使用任何第三方插件、库或者框架进行开发了。",-1),c={},u=(0,n(3744).Z)(c,[["render",function(s,e){const n=(0,a.up)("ExternalLinkIcon");return(0,a.wg)(),(0,a.iD)("div",null,[t,(0,a._)("p",null,[i,(0,a._)("a",o,[l,(0,a.Wm)(n)]),r]),p])}]])}}]);