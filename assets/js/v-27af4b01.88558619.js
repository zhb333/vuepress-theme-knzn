"use strict";(self.webpackChunkvuepress_theme_knzn=self.webpackChunkvuepress_theme_knzn||[]).push([[4347],{2960:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t=JSON.parse('{"key":"v-27af4b01","path":"/8dfcfd0e2bca9513a5b65c044f1fb493/","title":"JavaScript 数据结构之栈","lang":"zh-CN","frontmatter":{"permalink":"/8dfcfd0e2bca9513a5b65c044f1fb493/","title":"JavaScript 数据结构之栈","date":"2019-02-12T00:30:20.000Z","categories":["frontEnd"],"tags":["js"]},"excerpt":"","headers":[{"level":2,"title":"一、 认识栈","slug":"一、-认识栈","children":[]},{"level":2,"title":"二、栈的一个面试题","slug":"二、栈的一个面试题","children":[]},{"level":2,"title":"三、 栈结构的实现","slug":"三、-栈结构的实现","children":[]},{"level":2,"title":"五、 案例: 十进制转二进制","slug":"五、-案例-十进制转二进制","children":[]},{"level":2,"title":"六、 案例： 十进制转任意进制","slug":"六、-案例-十进制转任意进制","children":[]}],"git":{"updatedTime":1659094015000,"contributors":[{"name":"张焕标","email":"1140457303@qq.com","commits":1}]},"filePathRelative":"杂谈/js笔记/stack.md"}')},1506:(n,s,a)=>{a.r(s),a.d(s,{default:()=>c});var t=a(6252);const p=[(0,t.uE)('<h2 id="一、-认识栈" tabindex="-1"><a class="header-anchor" href="#一、-认识栈" aria-hidden="true">#</a> 一、 认识栈</h2><p>示意图</p><p><img src="https://upload-images.jianshu.io/upload_images/12493822-5a2f877fa19d07f2.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="stack.jpg"></p><p>栈(stack),是一种受限的线性结构, 特点是：后进先出(LIFO)</p><ul><li>只允许在栈顶添加和删除元素</li><li>向栈插入元素又称为：入栈、进栈、压栈</li><li>从一个栈删除元素又称为：出栈、退栈</li></ul><p>如：生活中的盘子的叠放, 编程中的函数调用栈,递归等</p><h2 id="二、栈的一个面试题" tabindex="-1"><a class="header-anchor" href="#二、栈的一个面试题" aria-hidden="true">#</a> 二、栈的一个面试题</h2><p>有六个元素 6,5,4,3,2,1, 按顺序进栈，请问下列哪个不是合法的出栈序列(C)</p><p>A. 543612 B. 453216 C. 346521 D. 234156</p><p>解析：</p><ul><li>A 选项入栈出栈分析 <ul><li>65 -&gt; 5 出栈</li><li>6 &lt;- 4 入栈</li><li>64 -&gt; 4 出栈</li><li>6 &lt;- 3 入栈</li><li>63 -&gt; 3 出栈</li><li>6 -&gt; 6 出栈</li><li>&lt;- 2 入栈</li><li>2 &lt;- 1 入栈</li><li>21 -&gt; 1 出栈</li><li>2 -&gt; 2 出栈</li></ul></li><li>B 选项入栈出栈分析 <ul><li>654 -&gt; 4 出栈</li><li>65 -&gt; 5 出栈</li><li>6 &lt;- 3 入栈</li><li>63 -&gt; 3 出栈</li><li>6 &lt;- 2 入栈</li><li>62 -&gt; 2 出栈</li><li>6 &lt;- 1 入栈</li><li>61 -&gt; 1 出栈</li><li>6 -&gt; 出栈</li></ul></li><li>C 选项入栈出栈分析 <ul><li>6543 -&gt; 3 出栈</li><li>654 -&gt; 4 出栈</li><li>65 -&gt; 6 (错误, 只能移除栈顶元素，此时栈顶元素是 5)</li></ul></li><li>D 选项入栈出栈分析 <ul><li>65432 -&gt; 2 出栈</li><li>6543 -&gt; 3 出栈</li><li>654 -&gt; 4 出栈</li><li>65 &lt;- 1 入栈</li><li>651 -&gt; 1 出栈</li><li>65 -&gt; 5 出栈</li><li>6 -&gt; 6 出栈</li></ul></li></ul><h2 id="三、-栈结构的实现" tabindex="-1"><a class="header-anchor" href="#三、-栈结构的实现" aria-hidden="true">#</a> 三、 栈结构的实现</h2><p>可基于数组, 也可基于链表, 因为都是对栈顶元素的操作，不涉及数组的位移问题，因此使用这两种数据结构来实现栈，效率差不多</p><p>基于数组实现栈：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Stack</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>栈的常见操作:</p><ul><li>push 添加新元素到栈顶</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">push</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>pop 移除栈顶元素，同时返回被移除的元素</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>peek 返回栈顶元素，不对栈做任何修改</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>isEmpty 如果栈里没有任何元素返回 true, 否则返回 false</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>size 返回栈里的元素个数</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>toString() 将栈结构的内容以字符形式返回</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result<span class="token punctuation">,</span> item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> result <span class="token operator">+</span> item <span class="token operator">+</span> <span class="token string">&#39; &#39;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>四、完整代码</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Stack</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// push 添加新元素到栈顶</span>\n  <span class="token function">push</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// pop 移除栈顶元素，同时返回被移除的元素</span>\n  <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// peek 返回栈顶元素，不对栈做任何修改</span>\n  <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// isEmpty 如果栈里没有任何元素返回true, 否则返回false</span>\n  <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// size 返回栈里的元素个数</span>\n  <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length\n  <span class="token punctuation">}</span>\n  <span class="token comment">// toString() 将栈结构的内容以字符形式返回</span>\n  <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result<span class="token punctuation">,</span> item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> result <span class="token operator">+</span> item <span class="token operator">+</span> <span class="token string">&#39; &#39;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\nstack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">)</span>\nstack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span>\nstack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span>\nstack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 300</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 4</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 19 90 97 300</span>\n\nstack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nstack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nstack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 19</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 1</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 19</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n\nstack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="五、-案例-十进制转二进制" tabindex="-1"><a class="header-anchor" href="#五、-案例-十进制转二进制" aria-hidden="true">#</a> 五、 案例: 十进制转二进制</h2><p>示意图：</p><p><img src="https://upload-images.jianshu.io/upload_images/12493822-9fd611fcdcc50371.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="dec2bin.jpg"></p><p>要把十进制转化为二进制，需要把该十进制数一直与2整除，直到结果为0， 整除过程中得到的余数，按反方向读取形成的二进制，即为十进制转化的二进制形式</p><p>代码实现：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">dec2bin</span><span class="token punctuation">(</span><span class="token parameter">decNum</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 定义栈对象</span>\n  <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">while</span><span class="token punctuation">(</span>decNum <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 获取余数并放入栈中</span>\n    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>decNum <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span>\n    <span class="token comment">// 获取整除后的结果, 进行下一次运算</span>\n    decNum <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>decNum <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 从栈中取出余数，并拼接成二进制字符串</span>\n  <span class="token keyword">let</span> binaryString <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>\n  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    binaryString <span class="token operator">+=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> binaryString\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">dec2bin</span><span class="token punctuation">(</span><span class="token number">29</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 11101</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="六、-案例-十进制转任意进制" tabindex="-1"><a class="header-anchor" href="#六、-案例-十进制转任意进制" aria-hidden="true">#</a> 六、 案例： 十进制转任意进制</h2><p>我们可以根据上一个十进制转二进制的例子, 进一步改写成将十进制转任意进制</p><p>下面的代码可以将十进制转为36进制以内的任何进制数</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">dec2any</span><span class="token punctuation">(</span><span class="token parameter">decNum<span class="token punctuation">,</span> system</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> digitStr <span class="token operator">=</span> <span class="token string">&#39;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&#39;</span>\n\n  <span class="token comment">// 检查能转化的最大进制数</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>system <span class="token operator">&gt;</span> digitStr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">the system param can&#39;t greater than </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>digitStr<span class="token punctuation">.</span>length<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>decNum <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 求得余数，入栈</span>\n    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>decNum <span class="token operator">%</span> system<span class="token punctuation">)</span>\n    <span class="token comment">// 求得进行下一次计算的十进制数</span>\n    decNum <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>decNum <span class="token operator">/</span> system<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 从栈中取出余数，并拼接成二进制字符串</span>\n  <span class="token keyword">let</span> systemStr <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    systemStr <span class="token operator">+=</span> digitStr<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> systemStr\n<span class="token punctuation">}</span>\n\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">dec2any</span><span class="token punctuation">(</span><span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 11101</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">dec2any</span><span class="token punctuation">(</span><span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 29</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">dec2any</span><span class="token punctuation">(</span><span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 1D</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">dec2any</span><span class="token punctuation">(</span><span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 报错 the system param can&#39;t greater than 36</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',42)],e={},c=(0,a(3744).Z)(e,[["render",function(n,s){return(0,t.wg)(),(0,t.iD)("div",null,p)}]])}}]);