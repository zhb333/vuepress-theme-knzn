"use strict";(self.webpackChunkvuepress_theme_knzn=self.webpackChunkvuepress_theme_knzn||[]).push([[8864],{9073:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e=JSON.parse('{"key":"v-4a07565a","path":"/b8af3df83141baf6062ba5c9f164f661/","title":"27 使用命名空间封装代码","lang":"zh-CN","frontmatter":{"permalink":"/b8af3df83141baf6062ba5c9f164f661/","title":"27 使用命名空间封装代码","author":"前端程序猿","tags":["typescript"],"categories":["大前端"],"postImage":"/images/typescript.webp"},"excerpt":"<p>命名空间在 1.5 之前的版本中，是叫做“内部模块”。在 1.5 版本之前，ES6 模块还没正式成为标准，所以 TS 对于模块的实现，是将模块分为“内部模块”和“外部模块”两种。内部模块使用 module 来定义，而外部模块使用 export 来指定哪个内容对外部可见。</p>\\n","headers":[{"level":2,"title":"1 定义和使用","slug":"_1-定义和使用","children":[]},{"level":2,"title":"2 拆分为多个文件","slug":"_2-拆分为多个文件","children":[]},{"level":2,"title":"3. 别名","slug":"_3-别名","children":[]},{"level":2,"title":"小结","slug":"小结","children":[]}],"git":{"updatedTime":1659093557000,"contributors":[{"name":"张焕标","email":"1140457303@qq.com","commits":1}]},"filePathRelative":"TypeScript学习笔记/27-Encapsulating-code-with-namespaces.md"}')},745:(n,s,a)=>{a.r(s),a.d(s,{default:()=>o});var e=a(6252);const t=[(0,e.uE)('<p>命名空间在 1.5 之前的版本中，是叫做“内部模块”。在 1.5 版本之前，ES6 模块还没正式成为标准，所以 TS 对于模块的实现，是将模块分为“内部模块”和“外部模块”两种。内部模块使用 module 来定义，而外部模块使用 export 来指定哪个内容对外部可见。</p><blockquote><p>理想必须要人们去实现它，它不但需要决心和勇敢而且需要知识。 ——吴玉章</p></blockquote><p>1.5 版本开始，使用“命名空间”代替“内部模块”说法，并且使用 namespace 代替原有的 module 关键字，而“外部 模块”则改为“模块”。</p><p>命名空间的作用与使用场景和模块还是有区别的：</p><p>当我们是在程序内部用于防止全局污染，想把相关的内容都放在一起的时候，使用命名空间；当我们封装了一个工具或者库，要适用于模块系统中引入使用时，适合使用模块。</p><h2 id="_1-定义和使用" tabindex="-1"><a class="header-anchor" href="#_1-定义和使用" aria-hidden="true">#</a> 1 定义和使用</h2><p>命名空间的定义实际相当于定义了一个大的对象，里面可以定义变量、接口、类、方法等等，但是如果不使用 export 关键字指定此内容要对外可见的话，外部是没法访问到的。来看下怎么写，我们想要把所有涉及到内容验证的方法都放到一起，文件名叫 validation.ts：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">namespace</span> Validation <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> isLetterReg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[A-Za-z]+$</span><span class="token regex-delimiter">/</span></span> <span class="token comment">// 这里定义一个正则</span>\n  <span class="token keyword">export</span> <span class="token keyword">const</span> isNumberReg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[0-9]+$</span><span class="token regex-delimiter">/</span></span> <span class="token comment">// 这里再定义一个正则，与isLetterReg的区别在于他使用export导出了</span>\n  <span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">checkLetter</span> <span class="token operator">=</span> <span class="token punctuation">(</span>text<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> isLetterReg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们创建了一个命名空间叫做 Validation，它里面定义了三个内容，两个正则表达式，但是区别在于 isLetterReg 没有使用 export 修饰，而 isNumberReg 使用了 export 修饰。最后一个函数，也是用了 export 修饰。</p><p>这里要说明一点的是，命名空间在引入的时候，如果是使用 tsc 命令行编译文件，比如是在 index.ts 文件使用这个命名空间，先直接像下面这样写：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">/// &lt;reference path=&quot;validation.ts&quot;/&gt;</span>\n<span class="token keyword">let</span> isLetter <span class="token operator">=</span> Validation<span class="token punctuation">.</span><span class="token function">checkLetter</span><span class="token punctuation">(</span><span class="token string">&#39;sdfsd&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> reg <span class="token operator">=</span> Validation<span class="token punctuation">.</span>isNumberReg\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>isLetter<span class="token punctuation">)</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>来解释下，命名空间如果不是使用 webpack 等工具编译，而是使用 tsc 编译，那只需要在使用外部命名空间的地方使用<code>/// &lt;reference path=“namespace.ts”/&gt;</code>来引入，注意三斜线 ”///“ 开头，然后在 path 属性指定相对于当前文件，这个命名空间文件的路径。然后编译时，需要指定一个参数 outFile，这个参数来制定输出的文件名：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>tsc --outFile src/index.js src/index.ts\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>–outFile 用来指定输出的文件路径和文件名，最后指定要编译的文件。还有一点要注意，使用 outFile 只支持 amd 和 system 两种模块标准，所以需要在 tsconfig.json 里，设置 module 编译选项。</p><p>来看下编译后的文件 index.js：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">var</span> Validation\n<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>Validation<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> isLetterReg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[A-Za-z]+$</span><span class="token regex-delimiter">/</span></span>\n  Validation<span class="token punctuation">.</span>isNumberReg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[0-9]+$</span><span class="token regex-delimiter">/</span></span>\n  Validation<span class="token punctuation">.</span><span class="token function-variable function">checkLetter</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> isLetterReg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Validation <span class="token operator">||</span> <span class="token punctuation">(</span>Validation <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token comment">/// &lt;reference path=&quot;namespace.ts&quot;/&gt;</span>\n<span class="token keyword">var</span> isLetter <span class="token operator">=</span> Validation<span class="token punctuation">.</span><span class="token function">checkLetter</span><span class="token punctuation">(</span><span class="token string">&#39;sdfsd&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">var</span> reg <span class="token operator">=</span> Validation<span class="token punctuation">.</span>isNumberReg\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>isLetter<span class="token punctuation">)</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，编译后的 JS 文件将命名空间定义的文件 Validation.ts 文件的内容和 index.ts 的内容合并到了最后输出的文件。</p><p>如果我们要在 webpack 等工具中开发项目，并时时运行，如果只通过<code>/// &lt;reference path=“Validation.ts”/&gt;</code>来引入命名空间，你会发现运行起来之后，浏览器控制台会报 Validation is not defined 的错误。所以如果是要在项目中时时使用，需要使用 export 将命名空间导出，其实就是作为模块导出，然后在 index.ts 中引入，先来看 Validation.ts 文件：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">namespace</span> Validation <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> isLetterReg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[A-Za-z]+$</span><span class="token regex-delimiter">/</span></span>\n  <span class="token keyword">export</span> <span class="token keyword">const</span> isNumberReg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[0-9]+$</span><span class="token regex-delimiter">/</span></span>\n  <span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">checkLetter</span> <span class="token operator">=</span> <span class="token punctuation">(</span>text<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> isLetterReg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在 index.ts 文件中引入并使用：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Validation <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./Validation.ts&#39;</span>\n<span class="token keyword">let</span> isLetter <span class="token operator">=</span> Validation<span class="token punctuation">.</span><span class="token function">checkLetter</span><span class="token punctuation">(</span><span class="token string">&#39;sdfsd&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> reg <span class="token operator">=</span> Validation<span class="token punctuation">.</span>isNumberReg\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>isLetter<span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span> <span class="token comment">// /^[0-9]+$/</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里要提醒大家的是，命名空间本来就是防止变量污染，但是模块也能起到这个作用，而且使用模块还可以自己定义引入之后的名字。所以，并不建议导出一个命名空间，这种情况你应该是用模块。</p><h2 id="_2-拆分为多个文件" tabindex="-1"><a class="header-anchor" href="#_2-拆分为多个文件" aria-hidden="true">#</a> 2 拆分为多个文件</h2><p>随着内容不断增多，我们可以将同一个命名空间拆成多个文件分开维护，尽管分成了多个文件，但它们仍然是同一个命名空间。下面我们将 Validation.ts 拆开成 LetterValidation.ts 和 NumberValidation.ts：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// LetterValidation.ts</span>\n<span class="token keyword">namespace</span> Validation <span class="token punctuation">{</span>\n  <span class="token keyword">export</span> <span class="token keyword">const</span> isLetterReg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[A-Za-z]+$</span><span class="token regex-delimiter">/</span></span>\n  <span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">checkLetter</span> <span class="token operator">=</span> <span class="token punctuation">(</span>text<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> isLetterReg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// NumberValidation.ts</span>\n<span class="token keyword">namespace</span> Validation <span class="token punctuation">{</span>\n  <span class="token keyword">export</span> <span class="token keyword">const</span> isNumberReg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[0-9]+$</span><span class="token regex-delimiter">/</span></span>\n  <span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">checkNumber</span> <span class="token operator">=</span> <span class="token punctuation">(</span>text<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> isNumberReg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// index.ts</span>\n<span class="token comment">/// &lt;reference path=&quot;./LetterValidation.js&quot;/&gt;</span>\n<span class="token comment">/// &lt;reference path=&quot;./NumberValidation.js&quot;/&gt;</span>\n<span class="token keyword">let</span> isLetter <span class="token operator">=</span> Validation<span class="token punctuation">.</span><span class="token function">checkLetter</span><span class="token punctuation">(</span><span class="token string">&#39;sdfsd&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> reg <span class="token operator">=</span> Validation<span class="token punctuation">.</span>isNumberReg\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>isLetter<span class="token punctuation">)</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们使用命令行来编译一下：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>tsc --outFile src/index.js src/index.ts\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>最后输出的 index.js 文件是这样的：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> Validation\n<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">Validation</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  Validation<span class="token punctuation">.</span>isLetterReg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[A-Za-z]+$</span><span class="token regex-delimiter">/</span></span>\n  Validation<span class="token punctuation">.</span><span class="token function-variable function">checkLetter</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> Validation<span class="token punctuation">.</span>isLetterReg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Validation <span class="token operator">||</span> <span class="token punctuation">(</span>Validation <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token keyword">var</span> Validation\n<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">Validation</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  Validation<span class="token punctuation">.</span>isNumberReg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[0-9]+$</span><span class="token regex-delimiter">/</span></span>\n  Validation<span class="token punctuation">.</span><span class="token function-variable function">checkNumber</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> Validation<span class="token punctuation">.</span>isNumberReg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Validation <span class="token operator">||</span> <span class="token punctuation">(</span>Validation <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token comment">/// &lt;reference path=&quot;./LetterValidation.ts&quot;/&gt;</span>\n<span class="token comment">/// &lt;reference path=&quot;./NumberValidation.ts&quot;/&gt;</span>\n<span class="token keyword">var</span> isLetter <span class="token operator">=</span> Validation<span class="token punctuation">.</span><span class="token function">checkLetter</span><span class="token punctuation">(</span><span class="token string">&#39;sdfsd&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">var</span> reg <span class="token operator">=</span> Validation<span class="token punctuation">.</span>isNumberReg\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>isLetter<span class="token punctuation">)</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，我们使用 reference 引入的两个命名空间都被编译在了一个文件，而且是按照引入的顺序编译的。我们先引入的是 LetterValidation，所以编译后的 js 文件中，LetterValidation 的内容在前面。而且看代码可以看出，两个验证器最后都合并到了一起，所以 Validation 对象有两个正则表达式，两个方法。</p><h2 id="_3-别名" tabindex="-1"><a class="header-anchor" href="#_3-别名" aria-hidden="true">#</a> 3. 别名</h2><p>我们使用 import 给常用的对象起一个别名，但是要注意，这个别名和类型别名不是一回事，而且这儿的 import 也只是为了创建别名不是引入模块。来看怎么使用，这是官方文档的原始例子：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">namespace</span> Shapes <span class="token punctuation">{</span>\n  <span class="token keyword">export</span> <span class="token keyword">namespace</span> Polygons <span class="token punctuation">{</span>\n    <span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Triangle</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Squaire</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">import</span> polygons <span class="token operator">=</span> Shapes<span class="token punctuation">.</span>Polygons <span class="token comment">// 使用 import 关键字给 Shapes.Polygons 取一个别名polygons</span>\n<span class="token keyword">let</span> sq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">polygons</span><span class="token punctuation">.</span><span class="token function">Square</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过这个例子我们可以看到，使用 import 关键字来定义命名空间中某个输出元素的别名，可以减少我们深层次获取属性的成本</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>本小节我们学习了如何使用命名空间来封装逻辑相似的代码块，来提高复用性且避免命名污染。我们学习了命名空间的基本定义和使用，使用 namespace 来定义命名空间，形式和定义接口很像，只不过是使用 namespace 来定义，而且在命名空间内可以定义任何内容。需要提供给外部使用的内容，需要使用 export 关键字指出，外部才能访问到。我们还可以将一个命名空间拆分成多个文件，这种适合逻辑较多，放到同一个文件内内容较多的情况。最后我们还学习了使用别名，来给命名空间内的某个命名空间起一个别名，减少访问多级嵌套的属性的访问成本。最后我们要说的一点是，基本上我们是可以使用模块来代替命名空间的，所以我们应该尽量使用模块来封装代码。</p><p>下个小节我们将学习声明合并，编译器会对多个文件中、同一个文件中声明的同名的一些内容进行合并，我们下个小节来进行学习。</p>',37)],p={},o=(0,a(3744).Z)(p,[["render",function(n,s){return(0,e.wg)(),(0,e.iD)("div",null,t)}]])}}]);