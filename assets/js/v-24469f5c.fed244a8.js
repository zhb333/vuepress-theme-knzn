"use strict";(self.webpackChunkvuepress_theme_knzn=self.webpackChunkvuepress_theme_knzn||[]).push([[2603],{6402:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t=JSON.parse('{"key":"v-24469f5c","path":"/ecd4bf1a92f1785235ccb7ba0f93ec1c/","title":"MongoDB 创建文档","lang":"zh-CN","frontmatter":{"permalink":"/ecd4bf1a92f1785235ccb7ba0f93ec1c/","title":"MongoDB 创建文档","date":"2019-09-09T20:03:32.000Z","categories":["backEnd"],"tags":["mongoDB"]},"excerpt":"","headers":[{"level":2,"title":"一、创建数据库","slug":"一、创建数据库","children":[]},{"level":2,"title":"二、db.collection.insertOne()创建当个文档","slug":"二、db-collection-insertone-创建当个文档","children":[]},{"level":2,"title":"三、db.collection.insertOne 操作失败的情况","slug":"三、db-collection-insertone-操作失败的情况","children":[]},{"level":2,"title":"四、自动生成文档主键","slug":"四、自动生成文档主键","children":[]},{"level":2,"title":"五、db.collection.insertMany()创建多个文档","slug":"五、db-collection-insertmany-创建多个文档","children":[]},{"level":2,"title":"六、db.collection.insertMany 操作失败的情况","slug":"六、db-collection-insertmany-操作失败的情况","children":[]},{"level":2,"title":"七、db.collection.insert() 创建一个或多个文档","slug":"七、db-collection-insert-创建一个或多个文档","children":[]},{"level":2,"title":"八、db.collection.insert() 操作失败的情况","slug":"八、db-collection-insert-操作失败的情况","children":[]},{"level":2,"title":"九、db.collection.save() 保存文档","slug":"九、db-collection-save-保存文档","children":[]},{"level":2,"title":"十、ObjectId() 文档主键","slug":"十、objectid-文档主键","children":[]},{"level":2,"title":"十一、 复合主键","slug":"十一、-复合主键","children":[]},{"level":2,"title":"十二、总结","slug":"十二、总结","children":[]}],"git":{"updatedTime":1659094015000,"contributors":[{"name":"张焕标","email":"1140457303@qq.com","commits":1}]},"filePathRelative":"杂谈/mongoDB笔记/02-create-document.md"}')},8426:(n,s,a)=>{a.r(s),a.d(s,{default:()=>l});var t=a(6252);const e=[(0,t.uE)('<h2 id="一、创建数据库" tabindex="-1"><a class="header-anchor" href="#一、创建数据库" aria-hidden="true">#</a> 一、创建数据库</h2><p>使用 <code>use databaseName</code> 命令切换数据库，如果数据库不存在则创建</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;</span> use <span class="token builtin class-name">test</span>\nswitched to db <span class="token builtin class-name">test</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>show collections</code> 命令查看数据库下的所有集合，新建的数据库的集合为 0 个</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;</span> show collections\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="二、db-collection-insertone-创建当个文档" tabindex="-1"><a class="header-anchor" href="#二、db-collection-insertone-创建当个文档" aria-hidden="true">#</a> 二、<code>db.collection.insertOne()</code>创建当个文档</h2><p>The <code>insertOne()</code> method has the following syntax:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>db.collection.insertOne<span class="token punctuation">(</span>\n   <span class="token operator">&lt;</span>document<span class="token operator">&gt;</span>,\n   <span class="token punctuation">{</span>\n      writeConcern: <span class="token operator">&lt;</span>document<span class="token operator">&gt;</span>\n   <span class="token punctuation">}</span>\n<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th style="text-align:center;">参数</th><th style="text-align:center;">类型</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">document</td><td style="text-align:center;">document</td><td style="text-align:left;">要插入到集合中的文档</td></tr><tr><td style="text-align:center;">writeConcern</td><td style="text-align:center;">document</td><td style="text-align:left;">(可选的) 表示一个文档的安全写级别<br>如果在事务中运行，请不要设置该参数<br>(以后文章会讲到)</td></tr></tbody></table><p>往 <code>department</code> 这个集合插入第一条文档(<code>department</code>集合不存在时，会自动创建，并插入数据)</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>db<span class="token punctuation">.</span>department<span class="token punctuation">.</span><span class="token function">insertOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">_id</span><span class="token operator">:</span> <span class="token string">&quot;employee1&quot;</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token punctuation">{</span> <span class="token string">&quot;acknowledged&quot;</span> <span class="token builtin class-name">:</span> true, <span class="token string">&quot;insertedId&quot;</span> <span class="token builtin class-name">:</span> <span class="token string">&quot;employee1&quot;</span> <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>返回：一个文档描述</p><ul><li><code>acknowledged</code> 安全写级别默认开启</li><li><code>insertedId</code> 写入集合的文档主键 <code>_id</code> 的值</li></ul><h2 id="三、db-collection-insertone-操作失败的情况" tabindex="-1"><a class="header-anchor" href="#三、db-collection-insertone-操作失败的情况" aria-hidden="true">#</a> 三、<code>db.collection.insertOne</code> 操作失败的情况</h2><p>文档主键必须唯一，重复创建相同 <code>_id</code> 的文档时，将创建失败</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>\n  db<span class="token punctuation">.</span>department<span class="token punctuation">.</span><span class="token function">insertOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">_id</span><span class="token operator">:</span> <span class="token string">&quot;employee1&quot;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;lisi&quot;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">19</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>WriteError<span class="token punctuation">(</span><span class="token punctuation">{</span>\n\t<span class="token string">&quot;index&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">0</span>,\n\t<span class="token string">&quot;code&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">11000</span>,\n\t<span class="token string">&quot;errmsg&quot;</span> <span class="token builtin class-name">:</span> <span class="token string">&quot;E11000 duplicate key error collection: test.department index: _id_ dup key: { _id: <span class="token entity" title="\\&quot;">\\&quot;</span>employee1<span class="token entity" title="\\&quot;">\\&quot;</span> }&quot;</span>,\n\t<span class="token string">&quot;op&quot;</span> <span class="token builtin class-name">:</span> <span class="token punctuation">{</span>\n\t\t<span class="token string">&quot;_id&quot;</span> <span class="token builtin class-name">:</span> <span class="token string">&quot;employee1&quot;</span>,\n\t\t<span class="token string">&quot;name&quot;</span> <span class="token builtin class-name">:</span> <span class="token string">&quot;lisi&quot;</span>,\n\t\t<span class="token string">&quot;age&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">19</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、自动生成文档主键" tabindex="-1"><a class="header-anchor" href="#四、自动生成文档主键" aria-hidden="true">#</a> 四、自动生成文档主键</h2><p>人为的指定文档主键，并不安全，如果不指定 <code>_id</code>的值，<code>MongoDB</code> 会自动调用<code>ObjectId()</code> 生成文档主键，并确保唯一性</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;</span> ObjectId<span class="token punctuation">(</span><span class="token punctuation">)</span>\nObjectId<span class="token punctuation">(</span><span class="token string">&quot;5f4fe0abb3dbdc66cacb3b8e&quot;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>不指定 <code>_id</code> 进行创建</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>db<span class="token punctuation">.</span>department<span class="token punctuation">.</span><span class="token function">insertOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;lisi&quot;</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">19</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token punctuation">{</span>\n\t<span class="token string">&quot;acknowledged&quot;</span> <span class="token builtin class-name">:</span> true,\n\t<span class="token string">&quot;insertedId&quot;</span> <span class="token builtin class-name">:</span> ObjectId<span class="token punctuation">(</span><span class="token string">&quot;5f4fe031b3dbdc66cacb3b8d&quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="五、db-collection-insertmany-创建多个文档" tabindex="-1"><a class="header-anchor" href="#五、db-collection-insertmany-创建多个文档" aria-hidden="true">#</a> 五、<code>db.collection.insertMany()</code>创建多个文档</h2><p>The <code>insertMany()</code> method has the following syntax:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>db.collection.insertMany<span class="token punctuation">(</span>\n   <span class="token punctuation">[</span> <span class="token operator">&lt;</span>document <span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span> , <span class="token operator">&lt;</span>document <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>, <span class="token punctuation">..</span>. <span class="token punctuation">]</span>,\n   <span class="token punctuation">{</span>\n      writeConcern: <span class="token operator">&lt;</span>document<span class="token operator">&gt;</span>,\n      ordered: <span class="token operator">&lt;</span>boolean<span class="token operator">&gt;</span>\n   <span class="token punctuation">}</span>\n<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th style="text-align:center;">参数</th><th style="text-align:center;">类型</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">document</td><td style="text-align:center;">document</td><td style="text-align:left;">要插入到集合中的文档数组</td></tr><tr><td style="text-align:center;">writeConcern</td><td style="text-align:center;">document</td><td style="text-align:left;">(可选的) 表示一个文档的安全写级别<br>如果在事务中运行，请不要设置该参数<br>(以后文章会讲到)</td></tr><tr><td style="text-align:center;">ordered</td><td style="text-align:center;">boolean</td><td style="text-align:left;">(可选的) 一个布尔值，指定<code>mongod</code>实例应该执行有序插入还是无序插入。默认值为<code>true</code> <br> 如果为<code>false</code>，则执行无序插入，如果其中一个文档发生错误，则继续处理数组中的其余文档。</td></tr></tbody></table><p>一次性创建两个文档</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>db<span class="token punctuation">.</span>department<span class="token punctuation">.</span><span class="token function">insertMany</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;joe&quot;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;lily&quot;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">17</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token punctuation">{</span>\n\t<span class="token string">&quot;acknowledged&quot;</span> <span class="token builtin class-name">:</span> true,\n\t<span class="token string">&quot;insertedIds&quot;</span> <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>\n\t\tObjectId<span class="token punctuation">(</span><span class="token string">&quot;5f4fe3cdb3dbdc66cacb3b8f&quot;</span><span class="token punctuation">)</span>,\n\t\tObjectId<span class="token punctuation">(</span><span class="token string">&quot;5f4fe3cdb3dbdc66cacb3b90&quot;</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回：一个文档描述</p><ul><li><code>acknowledged</code> 安全写级别默认开启</li><li><code>insertedIds</code> 对于每个成功插入的文档，一个<code>_id</code> 数组</li></ul><h2 id="六、db-collection-insertmany-操作失败的情况" tabindex="-1"><a class="header-anchor" href="#六、db-collection-insertmany-操作失败的情况" aria-hidden="true">#</a> 六、<code>db.collection.insertMany</code> 操作失败的情况</h2><p>文档主键必须唯一，重复创建相同 <code>_id</code> 的文档时，将创建失败</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>\n  db<span class="token punctuation">.</span>department<span class="token punctuation">.</span><span class="token function">insertMany</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      <span class="token literal-property property">_id</span><span class="token operator">:</span> <span class="token string">&quot;employee1&quot;</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;mike&quot;</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">19</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>\n      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;lucy&quot;</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">17</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>BulkWriteError<span class="token punctuation">(</span><span class="token punctuation">{</span>\n\t<span class="token string">&quot;writeErrors&quot;</span> <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>\n\t\t<span class="token punctuation">{</span>\n\t\t\t<span class="token string">&quot;index&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">0</span>,\n\t\t\t<span class="token string">&quot;code&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">11000</span>,\n\t\t\t<span class="token string">&quot;errmsg&quot;</span> <span class="token builtin class-name">:</span> <span class="token string">&quot;E11000 duplicate key error collection: test.department index: _id_ dup key: { _id: <span class="token entity" title="\\&quot;">\\&quot;</span>employee1<span class="token entity" title="\\&quot;">\\&quot;</span> }&quot;</span>,\n\t\t\t<span class="token string">&quot;op&quot;</span> <span class="token builtin class-name">:</span> <span class="token punctuation">{</span>\n\t\t\t\t<span class="token string">&quot;_id&quot;</span> <span class="token builtin class-name">:</span> <span class="token string">&quot;employee1&quot;</span>,\n\t\t\t\t<span class="token string">&quot;name&quot;</span> <span class="token builtin class-name">:</span> <span class="token string">&quot;mike&quot;</span>,\n\t\t\t\t<span class="token string">&quot;age&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">19</span>\n\t\t\t<span class="token punctuation">}</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">]</span>,\n\t<span class="token string">&quot;writeConcernErrors&quot;</span> <span class="token builtin class-name">:</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span>,\n\t<span class="token string">&quot;nInserted&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">0</span>,\n\t<span class="token string">&quot;nUpserted&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">0</span>,\n\t<span class="token string">&quot;nMatched&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">0</span>,\n\t<span class="token string">&quot;nModified&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">0</span>,\n\t<span class="token string">&quot;nRemoved&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">0</span>,\n\t<span class="token string">&quot;upserted&quot;</span> <span class="token builtin class-name">:</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上报错信息中发现 <code>nInserted</code> 值为 <code>0</code>, 即两条数据均没有创建成功</p><p><strong>当我们配置 <code>ordered</code> 为 <code>false</code> 时, 结果将会有所不同</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>\n  db<span class="token punctuation">.</span>department<span class="token punctuation">.</span><span class="token function">insertMany</span><span class="token punctuation">(</span>\n    <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        <span class="token literal-property property">_id</span><span class="token operator">:</span> <span class="token string">&quot;employee1&quot;</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;mike&quot;</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">19</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span>\n        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;lucy&quot;</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">17</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>\n      <span class="token literal-property property">ordered</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>BulkWriteError<span class="token punctuation">(</span><span class="token punctuation">{</span>\n\t<span class="token string">&quot;writeErrors&quot;</span> <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>\n\t\t<span class="token punctuation">{</span>\n\t\t\t<span class="token string">&quot;index&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">0</span>,\n\t\t\t<span class="token string">&quot;code&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">11000</span>,\n\t\t\t<span class="token string">&quot;errmsg&quot;</span> <span class="token builtin class-name">:</span> <span class="token string">&quot;E11000 duplicate key error collection: test.department index: _id_ dup key: { _id: <span class="token entity" title="\\&quot;">\\&quot;</span>employee1<span class="token entity" title="\\&quot;">\\&quot;</span> }&quot;</span>,\n\t\t\t<span class="token string">&quot;op&quot;</span> <span class="token builtin class-name">:</span> <span class="token punctuation">{</span>\n\t\t\t\t<span class="token string">&quot;_id&quot;</span> <span class="token builtin class-name">:</span> <span class="token string">&quot;employee1&quot;</span>,\n\t\t\t\t<span class="token string">&quot;name&quot;</span> <span class="token builtin class-name">:</span> <span class="token string">&quot;mike&quot;</span>,\n\t\t\t\t<span class="token string">&quot;age&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">19</span>\n\t\t\t<span class="token punctuation">}</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">]</span>,\n\t<span class="token string">&quot;writeConcernErrors&quot;</span> <span class="token builtin class-name">:</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span>,\n\t<span class="token string">&quot;nInserted&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">1</span>,\n\t<span class="token string">&quot;nUpserted&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">0</span>,\n\t<span class="token string">&quot;nMatched&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">0</span>,\n\t<span class="token string">&quot;nModified&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">0</span>,\n\t<span class="token string">&quot;nRemoved&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">0</span>,\n\t<span class="token string">&quot;upserted&quot;</span> <span class="token builtin class-name">:</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的结果可以发现 <code>nInserted</code> 的值为 <code>1</code>, 即有一条数据创建成功，<code>_id</code> 为 <code>employee1</code> 的文档，因为主键重复创建失败，另一条文档因为没有错误，所以成功被创建</p><h2 id="七、db-collection-insert-创建一个或多个文档" tabindex="-1"><a class="header-anchor" href="#七、db-collection-insert-创建一个或多个文档" aria-hidden="true">#</a> 七、<code>db.collection.insert()</code> 创建一个或多个文档</h2><p>The insert() method has the following syntax:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>db.collection.insert<span class="token punctuation">(</span>\n   <span class="token operator">&lt;</span>document or array of documents<span class="token operator">&gt;</span>,\n   <span class="token punctuation">{</span>\n     writeConcern: <span class="token operator">&lt;</span>document<span class="token operator">&gt;</span>,\n     ordered: <span class="token operator">&lt;</span>boolean<span class="token operator">&gt;</span>\n   <span class="token punctuation">}</span>\n<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th style="text-align:center;">参数</th><th style="text-align:center;">类型</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">document</td><td style="text-align:center;">document</td><td style="text-align:left;">要插入到集合中的文档数组</td></tr><tr><td style="text-align:center;">writeConcern</td><td style="text-align:center;">document</td><td style="text-align:left;">(可选的) 表示一个文档的安全写级别<br>如果在事务中运行，请不要设置该参数<br>(以后文章会讲到)</td></tr><tr><td style="text-align:center;">ordered</td><td style="text-align:center;">boolean</td><td style="text-align:left;">(可选的) 一个布尔值，指定<code>mongod</code>实例应该执行有序插入还是无序插入。默认值为<code>true</code> <br> 如果为<code>false</code>，则执行无序插入，如果其中一个文档发生错误，则继续处理数组中的其余文档。</td></tr></tbody></table><p>创建一个文档</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>db<span class="token punctuation">.</span>department<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;jake&quot;</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">19</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>WriteResult<span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string">&quot;nInserted&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>创建一个文档返回 <code>WriteResult</code> 对象</p><p>创建多个文档</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>db<span class="token punctuation">.</span>department<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;王五&quot;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">19</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;李二狗&quot;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">17</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>BulkWriteResult<span class="token punctuation">(</span><span class="token punctuation">{</span>\n\t<span class="token string">&quot;writeErrors&quot;</span> <span class="token builtin class-name">:</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span>,\n\t<span class="token string">&quot;writeConcernErrors&quot;</span> <span class="token builtin class-name">:</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span>,\n\t<span class="token string">&quot;nInserted&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">2</span>,\n\t<span class="token string">&quot;nUpserted&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">0</span>,\n\t<span class="token string">&quot;nMatched&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">0</span>,\n\t<span class="token string">&quot;nModified&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">0</span>,\n\t<span class="token string">&quot;nRemoved&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">0</span>,\n\t<span class="token string">&quot;upserted&quot;</span> <span class="token builtin class-name">:</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建多个文档返回 <code>BulkWriteResult</code> 对象</p><h2 id="八、db-collection-insert-操作失败的情况" tabindex="-1"><a class="header-anchor" href="#八、db-collection-insert-操作失败的情况" aria-hidden="true">#</a> 八、<code>db.collection.insert()</code> 操作失败的情况</h2><p>创建一个文档失败的情况</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>db<span class="token punctuation">.</span>department<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">_id</span><span class="token operator">:</span> <span class="token string">&quot;employee1&quot;</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;李二蛋&quot;</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>WriteResult<span class="token punctuation">(</span><span class="token punctuation">{</span>\n\t<span class="token string">&quot;nInserted&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">0</span>,\n\t<span class="token string">&quot;writeError&quot;</span> <span class="token builtin class-name">:</span> <span class="token punctuation">{</span>\n\t\t<span class="token string">&quot;code&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">11000</span>,\n\t\t<span class="token string">&quot;errmsg&quot;</span> <span class="token builtin class-name">:</span> <span class="token string">&quot;E11000 duplicate key error collection: test.department index: _id_ dup key: { _id: <span class="token entity" title="\\&quot;">\\&quot;</span>employee1<span class="token entity" title="\\&quot;">\\&quot;</span> }&quot;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回 <code>WriteResult</code> 对象， 和创建成功返回同样类型的错误对象</p><p>创建多个文档失败的情况</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>db<span class="token punctuation">.</span>department<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    <span class="token literal-property property">_id</span><span class="token operator">:</span> <span class="token string">&quot;employee1&quot;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;李四娣&quot;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;李逍遥&quot;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">33</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>BulkWriteResult<span class="token punctuation">(</span><span class="token punctuation">{</span>\n\t<span class="token string">&quot;writeErrors&quot;</span> <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>\n\t\t<span class="token punctuation">{</span>\n\t\t\t<span class="token string">&quot;index&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">0</span>,\n\t\t\t<span class="token string">&quot;code&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">11000</span>,\n\t\t\t<span class="token string">&quot;errmsg&quot;</span> <span class="token builtin class-name">:</span> <span class="token string">&quot;E11000 duplicate key error collection: test.department index: _id_ dup key: { _id: <span class="token entity" title="\\&quot;">\\&quot;</span>employee1<span class="token entity" title="\\&quot;">\\&quot;</span> }&quot;</span>,\n\t\t\t<span class="token string">&quot;op&quot;</span> <span class="token builtin class-name">:</span> <span class="token punctuation">{</span>\n\t\t\t\t<span class="token string">&quot;_id&quot;</span> <span class="token builtin class-name">:</span> <span class="token string">&quot;employee1&quot;</span>,\n\t\t\t\t<span class="token string">&quot;name&quot;</span> <span class="token builtin class-name">:</span> <span class="token string">&quot;李四娣&quot;</span>,\n\t\t\t\t<span class="token string">&quot;age&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">16</span>\n\t\t\t<span class="token punctuation">}</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">]</span>,\n\t<span class="token string">&quot;writeConcernErrors&quot;</span> <span class="token builtin class-name">:</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span>,\n\t<span class="token string">&quot;nInserted&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">0</span>,\n\t<span class="token string">&quot;nUpserted&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">0</span>,\n\t<span class="token string">&quot;nMatched&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">0</span>,\n\t<span class="token string">&quot;nModified&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">0</span>,\n\t<span class="token string">&quot;nRemoved&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">0</span>,\n\t<span class="token string">&quot;upserted&quot;</span> <span class="token builtin class-name">:</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回 <code>BulkWriteResult</code> 对象， 和创建成功返回同样类型的错误对象</p><p>当设置 <code>ordered</code> 参数为 <code>false</code> 时，则执行无序插入，如果其中一个文档发生错误，则继续处理数组中的其余文档</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>db<span class="token punctuation">.</span>department<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>\n  <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      <span class="token literal-property property">_id</span><span class="token operator">:</span> <span class="token string">&quot;employee1&quot;</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;李四娣&quot;</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>\n      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;李逍遥&quot;</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">33</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    <span class="token literal-property property">ordered</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>BulkWriteResult<span class="token punctuation">(</span><span class="token punctuation">{</span>\n\t<span class="token string">&quot;writeErrors&quot;</span> <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>\n\t\t<span class="token punctuation">{</span>\n\t\t\t<span class="token string">&quot;index&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">0</span>,\n\t\t\t<span class="token string">&quot;code&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">11000</span>,\n\t\t\t<span class="token string">&quot;errmsg&quot;</span> <span class="token builtin class-name">:</span> <span class="token string">&quot;E11000 duplicate key error collection: test.department index: _id_ dup key: { _id: <span class="token entity" title="\\&quot;">\\&quot;</span>employee1<span class="token entity" title="\\&quot;">\\&quot;</span> }&quot;</span>,\n\t\t\t<span class="token string">&quot;op&quot;</span> <span class="token builtin class-name">:</span> <span class="token punctuation">{</span>\n\t\t\t\t<span class="token string">&quot;_id&quot;</span> <span class="token builtin class-name">:</span> <span class="token string">&quot;employee1&quot;</span>,\n\t\t\t\t<span class="token string">&quot;name&quot;</span> <span class="token builtin class-name">:</span> <span class="token string">&quot;李四娣&quot;</span>,\n\t\t\t\t<span class="token string">&quot;age&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">16</span>\n\t\t\t<span class="token punctuation">}</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">]</span>,\n\t<span class="token string">&quot;writeConcernErrors&quot;</span> <span class="token builtin class-name">:</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span>,\n\t<span class="token string">&quot;nInserted&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">1</span>,\n\t<span class="token string">&quot;nUpserted&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">0</span>,\n\t<span class="token string">&quot;nMatched&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">0</span>,\n\t<span class="token string">&quot;nModified&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">0</span>,\n\t<span class="token string">&quot;nRemoved&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">0</span>,\n\t<span class="token string">&quot;upserted&quot;</span> <span class="token builtin class-name">:</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回结果发现，有一个报错，<code>nInserted</code> 为 <code>1</code> 则表示成功创建了 1 个文档</p><h2 id="九、db-collection-save-保存文档" tabindex="-1"><a class="header-anchor" href="#九、db-collection-save-保存文档" aria-hidden="true">#</a> 九、<code>db.collection.save()</code> 保存文档</h2><blockquote><p>The <code>save()</code> method uses either the insert or the update command.</p></blockquote><p><code>save()</code>方法， 当保存新文档时，会调用 <code>insert()</code> 方法创建文档，当保存的文档 <code>_id</code> 已存在，会调用 <code>update()</code> 方法更新文档</p><p><strong>提示:</strong> <code>MongoDB</code> 不推荐 <code>db.collection.save()</code> 方法。而是使用<code>db.collection.insertOne()</code>或<code>db.collection.replaceOne()</code>。</p><p><code>update()</code>、 <code>db.collection.replaceOne()</code> 更新文档操作，后面的文章会讲解</p><p>The save() method has the following form:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>db.collection.save<span class="token punctuation">(</span>\n   <span class="token operator">&lt;</span>document<span class="token operator">&gt;</span>,\n   <span class="token punctuation">{</span>\n     writeConcern: <span class="token operator">&lt;</span>document<span class="token operator">&gt;</span>\n   <span class="token punctuation">}</span>\n<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>save()</code> 方法创建一个文档</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>db<span class="token punctuation">.</span>department<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;郑屠户&quot;</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">55</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>WriteResult<span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string">&quot;nInserted&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用 <code>save()</code> 方法创建多个文档</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>db<span class="token punctuation">.</span>department<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;楚霸王&quot;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">37</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;李寻欢&quot;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">33</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>BulkWriteResult<span class="token punctuation">(</span><span class="token punctuation">{</span>\n\t<span class="token string">&quot;writeErrors&quot;</span> <span class="token builtin class-name">:</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span>,\n\t<span class="token string">&quot;writeConcernErrors&quot;</span> <span class="token builtin class-name">:</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span>,\n\t<span class="token string">&quot;nInserted&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">2</span>,\n\t<span class="token string">&quot;nUpserted&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">0</span>,\n\t<span class="token string">&quot;nMatched&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">0</span>,\n\t<span class="token string">&quot;nModified&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">0</span>,\n\t<span class="token string">&quot;nRemoved&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">0</span>,\n\t<span class="token string">&quot;upserted&quot;</span> <span class="token builtin class-name">:</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>可以发现，运行结果与 <code>insert()</code> 通用</strong></p><h2 id="十、objectid-文档主键" tabindex="-1"><a class="header-anchor" href="#十、objectid-文档主键" aria-hidden="true">#</a> 十、<code>ObjectId()</code> 文档主键</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>ObjectId<span class="token punctuation">(</span><span class="token operator">&lt;</span>hexadecimal<span class="token operator">&gt;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th style="text-align:center;">参数</th><th style="text-align:center;">类型</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">hexadecimal</td><td style="text-align:center;">String</td><td style="text-align:left;">(可选的)十二位的十六进制字符串值</td></tr></tbody></table><p>十二位的十六进制表示为：</p><ul><li>一个 4 字节的时间戳值，表示<code>ObjectId</code>的创建，自 Unix 时代以来以秒为单位进行度量</li><li>一个 5 字节的随机值</li><li>一个 3 字节的递增计数器，初始化为一个随机值</li></ul><p>方法和属性：</p><table><thead><tr><th style="text-align:center;">Attribute/Method</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">str</td><td style="text-align:left;">返回对象的十六进制字符串表示形式。</td></tr><tr><td style="text-align:center;">ObjectId.getTimestamp()</td><td style="text-align:left;">将对象的时间戳部分作为日期返回。</td></tr><tr><td style="text-align:center;">ObjectId.toString()</td><td style="text-align:left;">以字符串文本&quot; ObjectId(…)&quot;的形式返回 JavaScript 表示形式。</td></tr><tr><td style="text-align:center;">ObjectId.valueOf()</td><td style="text-align:left;">返回以十六进制字符串形式表示的对象。返回的字符串是 str 属性</td></tr></tbody></table><p>创建一个 <code>ObjectId</code></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;</span> const objId <span class="token operator">=</span> ObjectId<span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token operator">&gt;</span> objId\nObjectId<span class="token punctuation">(</span><span class="token string">&quot;5f5084376310a4635f151165&quot;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>传入十六进制字符串创建 <code>ObjectId</code></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;</span> ObjectId<span class="token punctuation">(</span>objId.str<span class="token punctuation">)</span>\nObjectId<span class="token punctuation">(</span><span class="token string">&quot;5f5084376310a4635f151165&quot;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>属性和方法：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;</span> objId.str\n5f5084376310a4635f151165\n<span class="token operator">&gt;</span> objId.toString<span class="token punctuation">(</span><span class="token punctuation">)</span>\nObjectId<span class="token punctuation">(</span><span class="token string">&quot;5f5084376310a4635f151165&quot;</span><span class="token punctuation">)</span>\n<span class="token operator">&gt;</span> objId.valueOf<span class="token punctuation">(</span><span class="token punctuation">)</span>\n5f5084376310a4635f151165\n<span class="token operator">&gt;</span> objId.getTimestamp<span class="token punctuation">(</span><span class="token punctuation">)</span>\nISODate<span class="token punctuation">(</span><span class="token string">&quot;2020-09-03T05:50:47Z&quot;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="十一、-复合主键" tabindex="-1"><a class="header-anchor" href="#十一、-复合主键" aria-hidden="true">#</a> 十一、 复合主键</h2><p>文档主键的值为另一个文档</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>db<span class="token punctuation">.</span>department<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">_id</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token string">&quot;leaving&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">&quot;male&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;白小飞&quot;</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">35</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>WriteResult<span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string">&quot;nInserted&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>复合主键也要满足唯一性</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>WriteResult<span class="token punctuation">(</span><span class="token punctuation">{</span>\n\t<span class="token string">&quot;nInserted&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">0</span>,\n\t<span class="token string">&quot;writeError&quot;</span> <span class="token builtin class-name">:</span> <span class="token punctuation">{</span>\n\t\t<span class="token string">&quot;code&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">11000</span>,\n\t\t<span class="token string">&quot;errmsg&quot;</span> <span class="token builtin class-name">:</span> <span class="token string">&quot;E11000 duplicate key error collection: test.department index: _id_ dup key: { _id: { status: <span class="token entity" title="\\&quot;">\\&quot;</span>leaving<span class="token entity" title="\\&quot;">\\&quot;</span>, gender: <span class="token entity" title="\\&quot;">\\&quot;</span>male<span class="token entity" title="\\&quot;">\\&quot;</span> } }&quot;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不过，当复合主键文档的键值对顺序改变时，<code>MongoDB</code> 会认为是不同的文档主键</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>db<span class="token punctuation">.</span>department<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">_id</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">&quot;male&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token string">&quot;leaving&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;杨贵妃&quot;</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>WriteResult<span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string">&quot;nInserted&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="十二、总结" tabindex="-1"><a class="header-anchor" href="#十二、总结" aria-hidden="true">#</a> 十二、总结</h2><ul><li><code>db.collection.insertOne()</code> 将一个文档插入到集合中</li><li><code>db.collection.insertMany()</code> 将多个文档插入到集合中</li><li><code>db.collection.insert()</code> 将一个或多个文档插入到集合中。</li><li><code>db.collection.save()</code> 更新现有文档或插入新文档</li><li><code>ObjectId()</code> 生成文档主键对象</li><li>复合主键的概念</li></ul>',120)],p={},l=(0,a(3744).Z)(p,[["render",function(n,s){return(0,t.wg)(),(0,t.iD)("div",null,e)}]])}}]);