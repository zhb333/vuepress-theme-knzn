"use strict";(self.webpackChunkvuepress_theme_knzn=self.webpackChunkvuepress_theme_knzn||[]).push([[506],{7213:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e=JSON.parse('{"key":"v-6e5a5958","path":"/e8fe98604ce4913d7934f5b7096ded6e/","title":"21 索引类型：获取索引类型和索引值类型","lang":"zh-CN","frontmatter":{"permalink":"/e8fe98604ce4913d7934f5b7096ded6e/","title":"21 索引类型：获取索引类型和索引值类型","author":"前端程序猿","tags":["typescript"],"categories":["大前端"],"postImage":"/images/typescript.webp"},"excerpt":"<p>我们这里要讲的，可不是前面讲接口的时候讲的索引类型。在学习接口内容的时候，我们讲过可以指定索引的类型。而本小节我们讲的索引类型包含两个内容：索引类型查询和索引访问操作符。</p>\\n","headers":[{"level":2,"title":"1 索引类型查询操作符","slug":"_1-索引类型查询操作符","children":[]},{"level":2,"title":"2 索引访问操作符","slug":"_2-索引访问操作符","children":[]},{"level":2,"title":"本节小结","slug":"本节小结","children":[]}],"git":{"updatedTime":1659093557000,"contributors":[{"name":"张焕标","email":"1140457303@qq.com","commits":1}]},"filePathRelative":"TypeScript学习笔记/21-Index-Type-Get-Index-Type-and-Index-Value-Type.md"}')},7772:(n,s,a)=>{a.r(s),a.d(s,{default:()=>o});var e=a(6252);const p=[(0,e.uE)('<p>我们这里要讲的，可不是前面讲接口的时候讲的索引类型。在学习接口内容的时候，我们讲过可以指定索引的类型。而本小节我们讲的索引类型包含两个内容：索引类型查询和索引访问操作符。</p><blockquote><p>横眉冷对千夫指，俯首甘为孺子牛。 ——鲁迅</p></blockquote><h2 id="_1-索引类型查询操作符" tabindex="-1"><a class="header-anchor" href="#_1-索引类型查询操作符" aria-hidden="true">#</a> 1 索引类型查询操作符</h2><p>keyof 操作符，连接一个类型，会返回一个由这个类型的所有属性名组成的联合类型。来看例子：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Info</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span>\n  age<span class="token operator">:</span> <span class="token builtin">number</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> infoProp<span class="token operator">:</span> <span class="token keyword">keyof</span> Info\ninfoProp <span class="token operator">=</span> <span class="token string">&#39;name&#39;</span>\ninfoProp <span class="token operator">=</span> <span class="token string">&#39;age&#39;</span>\ninfoProp <span class="token operator">=</span> <span class="token string">&#39;no&#39;</span> <span class="token comment">// error 不能将类型“&quot;no&quot;”分配给类型“&quot;name&quot; | &quot;age&quot;”</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过例子可以看到，这里的 keyof Info 其实相当于&quot;name&quot; | “age”。通过和泛型结合使用，TS 就可以检查使用了动态属性名的代码：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">getValue</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>obj<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> names<span class="token operator">:</span> <span class="token constant">K</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 这里使用泛型，并且约束泛型变量K的类型是&quot;keyof T&quot;，也就是类型T的所有字段名组成的联合类型</span>\n  <span class="token keyword">return</span> names<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> obj<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 指定getValue的返回值类型为T[K][]，即类型为T的值的属性值组成的数组</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> info <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;lison&#39;</span><span class="token punctuation">,</span>\n  age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> values<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">getValue</span><span class="token punctuation">(</span>info<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\nvalues <span class="token operator">=</span> <span class="token function">getValue</span><span class="token punctuation">(</span>info<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// error 不能将类型“number[]”分配给类型“string[]”</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-索引访问操作符" tabindex="-1"><a class="header-anchor" href="#_2-索引访问操作符" aria-hidden="true">#</a> 2 索引访问操作符</h2><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Info</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span>\n  age<span class="token operator">:</span> <span class="token builtin">number</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">type</span> <span class="token class-name">NameType</span> <span class="token operator">=</span> Info<span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">]</span>\n<span class="token keyword">let</span> name<span class="token operator">:</span> NameType <span class="token operator">=</span> <span class="token number">123</span> <span class="token comment">// error 不能将类型“123”分配给类型“string”</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再来看个例子：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">getProperty</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>o<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token constant">K</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> o<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token comment">// o[name] is of type T[K]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个函数中，两个参数的类型分别为泛型 T 和 K，而函数的返回值类型为 T[K]，只要函数的返回值也是这种形式，即访问参数 o 的参数 name 属性，即可。</p><p>最后我们来看个结合接口的例子：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Obj<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> key<span class="token operator">:</span> <span class="token keyword">keyof</span> Obj<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token comment">// keys的类型为number</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里需要注意，在讲接口一节时，讲索引类型的时候我们讲过，如果索引类型为 number，那么实现该接口的对象的属性名必须是 number 类型；但是如果接口的索引类型是 string 类型，那么实现该接口的对象的属性名设置为数值类型的值也是可以的，因为数值最后还是会先转换为字符串。这里一样，如果接口的索引类型设置为 string 的话，<code>keyof Obj&lt;number&gt;</code>等同于类型 number | string：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Obj<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> key<span class="token operator">:</span> <span class="token keyword">keyof</span> Obj<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token comment">// keys的类型为number | string</span>\nkey <span class="token operator">=</span> <span class="token number">123</span> <span class="token comment">// right</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以使用访问操作符，获取索引签名的类型</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Obj<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> obj<span class="token operator">:</span> Obj<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> value<span class="token operator">:</span> Obj<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">]</span> <span class="token comment">// value的类型是number，也就是age的属性值18的类型</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还有一点，我们在讲后面知识的时候会遇到，就是当 tsconfig.json 里 strictNullChecks 设为 false 时，通过 Type[keyof Type]获取到的，是除去 never &amp; undefined &amp; null 这三个类型之后的字段值类型组成的联合类型，来看例子：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Type</span> <span class="token punctuation">{</span>\n  a<span class="token operator">:</span> <span class="token builtin">never</span>\n  b<span class="token operator">:</span> <span class="token builtin">never</span>\n  c<span class="token operator">:</span> <span class="token builtin">string</span>\n  d<span class="token operator">:</span> <span class="token builtin">number</span>\n  e<span class="token operator">:</span> <span class="token keyword">undefined</span>\n  f<span class="token operator">:</span> <span class="token keyword">null</span>\n  g<span class="token operator">:</span> object\n<span class="token punctuation">}</span>\n<span class="token keyword">type</span> <span class="token class-name">test</span> <span class="token operator">=</span> Type<span class="token punctuation">[</span><span class="token keyword">keyof</span> Type<span class="token punctuation">]</span>\n<span class="token comment">// test的类型是string | number | object</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个例子中接口 Type 有几个属性，通过索引访问操作符和索引类型查询操作符可以选出类型不为 never &amp; undefined &amp; null 的类型。</p><h2 id="本节小结" tabindex="-1"><a class="header-anchor" href="#本节小结" aria-hidden="true">#</a> 本节小结</h2><p>本小节我们学习了两个类型操作符：索引类型查询操作符 keyof，和索引访问操作符[]。通过 keyof 我们能够获取一个类型的所有属性名组成的联合类型，通过[]我们可以获取某个类型定义中指定字段值的类型。我们还学习了它们的组合使用方法，当 tsconfig.json 里 strictNullChecks 设为 false 时，我们可以通过[keyof Type]获取一个类型定义的所有除去 never &amp; undefined &amp; null 的字段值的类型组成的联合类型。</p><p>下个小节我们将学习一种新的复用现有类型定义，产生新类型定义的一种类型——映射类型。</p>',24)],t={},o=(0,a(3744).Z)(t,[["render",function(n,s){return(0,e.wg)(),(0,e.iD)("div",null,p)}]])}}]);