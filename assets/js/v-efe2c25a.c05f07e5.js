"use strict";(self.webpackChunkvuepress_theme_knzn=self.webpackChunkvuepress_theme_knzn||[]).push([[8176],{9092:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e=JSON.parse('{"key":"v-efe2c25a","path":"/01e124a17e05f4b1ae2d0d8ac6bb961b/","title":"05 TS 中补充的六个类型","lang":"zh-CN","frontmatter":{"permalink":"/01e124a17e05f4b1ae2d0d8ac6bb961b/","title":"05 TS 中补充的六个类型","author":"前端程序猿","tags":["typescript"],"categories":["大前端"],"postImage":"/images/typescript.webp"},"excerpt":"<p>上个小节我们学习了八个 JavaScript 中常见的数据类型，你也学会了如何给一个变量指定类型。本小节我们将接触\\n几个 TypeScript 中引入的新类型，这里面可能有你在其他强类型语言中见过的概念，接下来让我们一起来学习。</p>\\n","headers":[{"level":2,"title":"1. 元组","slug":"_1-元组","children":[]},{"level":2,"title":"2. 枚举","slug":"_2-枚举","children":[]},{"level":2,"title":"3. Any","slug":"_3-any","children":[]},{"level":2,"title":"4. void","slug":"_4-void","children":[]},{"level":2,"title":"5. never","slug":"_5-never","children":[]},{"level":2,"title":"6. unknown","slug":"_6-unknown","children":[]},{"level":2,"title":"7. 拓展阅读","slug":"_7-拓展阅读","children":[{"level":3,"title":"7.1 交叉类型","slug":"_7-1-交叉类型","children":[]},{"level":3,"title":"7.3 联合类型","slug":"_7-3-联合类型","children":[]}]},{"level":2,"title":"补充说明","slug":"补充说明","children":[]},{"level":2,"title":"小结","slug":"小结","children":[]}],"git":{"updatedTime":1659093557000,"contributors":[{"name":"张焕标","email":"1140457303@qq.com","commits":1}]},"filePathRelative":"TypeScript学习笔记/05-six-types-supplemented-in-TS.md"}')},4601:(n,s,a)=>{a.r(s),a.d(s,{default:()=>o});var e=a(6252);const p=[(0,e.uE)('<p>上个小节我们学习了八个 JavaScript 中常见的数据类型，你也学会了如何给一个变量指定类型。本小节我们将接触 几个 TypeScript 中引入的新类型，这里面可能有你在其他强类型语言中见过的概念，接下来让我们一起来学习。</p><blockquote><p>衡量一个人的真正品格，是看他在知道没人看见的时候干些什么 ——孟德斯鸠</p></blockquote><h2 id="_1-元组" tabindex="-1"><a class="header-anchor" href="#_1-元组" aria-hidden="true">#</a> 1. 元组</h2><p>元组可以看做是数组的拓展，它表示已知元素数量和类型的数组。确切地说，是已知数组中每一个位置上的元素的 类型，来看例子：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">let</span> tuple<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">boolean</span><span class="token punctuation">]</span>\ntuple <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">]</span>\ntuple <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">]</span> <span class="token comment">// error 不能将类型“number”分配给类型“string”。 不能将类型“string”分配给类型“number”。</span>\ntuple <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token comment">// error Property &#39;2&#39; is missing in type &#39;[string, number]&#39; but required in type &#39;[string, number, boolean]&#39;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，上面我们定义了一个元组 tuple，它包含三个元素，且每个元素的类型是固定的。当我们为 tuple 赋值 时：各个位置上的元素类型都要对应，元素个数也要一致。</p><p>我们还可以给单个元素赋值：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>tuple<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里我们给元组 tuple 的索引为 1 即第二个元素赋值为 3，第二个元素类型为 number，我们赋值给 3，所以没有问 题。</p><p>当我们访问元组中元素时，TypeScript 会对我们在元素上做的操作进行检查：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>tuple<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;:&#39;</span><span class="token punctuation">)</span> <span class="token comment">// right 类型&quot;string&quot;拥有属性&quot;split&quot;</span>\ntuple<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;:&#39;</span><span class="token punctuation">)</span> <span class="token comment">// error 类型“number”上不存在属性“split”</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的例子中，我们访问的 tuple 的第二个元素的元素类型为 number，而数值没有 split 方法，所以会报错。</p><p>在 2.6 版本之前，TypeScript 对于元组长度的校验和 2.6 之后的版本有所不同，我们来看下面的例子，前后版本对 于该情况的处理：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">let</span> tuple<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span>\ntuple <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token comment">// right 类型和个数都对应，没问题</span>\n<span class="token comment">// 2.6版本之前如下也不会报错</span>\ntuple <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">]</span>\n<span class="token comment">// 2.6版本之后如下会报错</span>\ntuple <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">]</span> <span class="token comment">// error 不能将类型“[string, number, string]”分配给类型“[string, number]”。 属性“length”的类型不兼容。</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个赋给元组的值有三个元素，是比我们定义的元组类型元素个数多的：</p><ul><li>在 2.6 及之前版本中，超出规定个数的元素称作越界元素，但是只要越界元素的类型是定义的类型中的一种即 可。比如我们定义的类型有两种：string 和 number，越界的元素是 string 类型，属于联合类型 string | number ， 所以没问题，联合类型的概念我们后面会讲到。</li><li>在 2.6 之后的版本，去掉了这个越界元素是联合类型的子类型即可的条件，要求元组赋值必须类型和个数都对 应。</li></ul><p>在 2.6 之后的版本，[string, number]元组类型的声明效果上可以看做等同于下面的声明：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Tuple</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>\n  <span class="token number">0</span><span class="token operator">:</span> <span class="token builtin">string</span>\n  <span class="token number">1</span><span class="token operator">:</span> <span class="token builtin">number</span>\n  length<span class="token operator">:</span> <span class="token number">2</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这个声明中，我们定义接口 <code>Tuple</code> ，它继承数组类型，并且数组元素的类型是 <code>number</code> 和 <code>string</code> 构成的联合类 型，这样接口 <code>Tuple</code> 就拥有了数组类型所有的特性。并且我们明确指定索引为 0 的值为 <code>string</code> 类型，索引为 1 的值为 <code>number</code> 类型，同时我们指定 <code>length</code> 属性的类型字面量为 2，这样当我们再指定一个类型为这个接口 Tuple 的时 候，这个值必须是数组，而且如果元素个数超过 2 个时，它的 length 就不是 2 是大于 2 的数了，就不满足这个接口定义 了，所以就会报错；当然，如果元素个数不够 2 个也会报错，因为索引为 0 或 1 的值缺失。接口我们后面会在后面专 门的一节来讲，所以暂时不懂也没关系。</p><p>如果你想要和 2.6 及之前版本一样的元组特性，那你可以这样定义接口：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Tuple</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>\n  <span class="token number">0</span><span class="token operator">:</span> <span class="token builtin">string</span>\n  <span class="token number">1</span><span class="token operator">:</span> <span class="token builtin">number</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也就是去掉接口中定义的 <code>length: 2</code> ，这样 <code>Tuple</code> 接口的 <code>length</code>就是从 <code>Array</code>继承过来的 <code>number</code> 类型，而不用必须是 2 了。</p><h2 id="_2-枚举" tabindex="-1"><a class="header-anchor" href="#_2-枚举" aria-hidden="true">#</a> 2. 枚举</h2><p><code>enum</code> 类型在 C++这些语言中比较常见，TypeScript 在 ES 原有类型基础上加入枚举类型，使我们在 TypeScript 中 也可以给一组数值赋予名字，这样对开发者来说较为友好。比如我们要定义一组角色，每一个角色用一个数字代 表，就可以使用枚举类型来定义：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">enum</span> Roles <span class="token punctuation">{</span>\n  <span class="token constant">SUPER_ADMIN</span><span class="token punctuation">,</span>\n  <span class="token constant">ADMIN</span><span class="token punctuation">,</span>\n  <span class="token constant">USER</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面定义的枚举类型 Roles 里面有三个值，TypeScript 会为它们每个值分配编号，默认从 0 开始，依次排列，所以 它们对应的值是：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">enum</span> Roles <span class="token punctuation">{</span>\n  <span class="token constant">SUPER_ADMIN</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>\n  <span class="token constant">ADMIN</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>\n  <span class="token constant">USER</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们使用的时候，就可以使用名字而不需要记数字和名称的对照关系了：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> superAdmin <span class="token operator">=</span> Roles<span class="token punctuation">.</span><span class="token constant">SUPER_ADMIN</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>superAdmin<span class="token punctuation">)</span> <span class="token comment">// 0</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>你也可以修改这个数值，比如你想让这个编码从 1 开始而不是 0，可以如下定义：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">enum</span> Roles <span class="token punctuation">{</span>\n  <span class="token constant">SUPER_ADMIN</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>\n  <span class="token constant">ADMIN</span><span class="token punctuation">,</span>\n  <span class="token constant">USER</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样当你访问 <code>Roles.ADMIN</code>时，它的值就是 2 了。</p><p>你也可以为每个值都赋予不同的、不按顺序排列的值：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">enum</span> Roles <span class="token punctuation">{</span>\n  <span class="token constant">SUPER_ADMIN</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>\n  <span class="token constant">ADMIN</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span>\n  <span class="token constant">USER</span> <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过名字 Roles.SUPER_ADMIN 可以获取到它对应的值 1，同时你也可以通过值获取到它的名字，以上面任意数值 这个例子为前提：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Roles<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// &#39;ADMIN&#39;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>更多枚举的知识我们会在后面专门的一节讲解，在这里我们只是先有个初步的认识即可。</p><h2 id="_3-any" tabindex="-1"><a class="header-anchor" href="#_3-any" aria-hidden="true">#</a> 3. Any</h2><p>JavaScript 的类型是灵活的，程序有时也是多变的。有时，我们在编写代码的时候，并不能清楚地知道一个值到底 是什么类型，这时就需要用到 any 类型，即任意类型。我们来看例子：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">let</span> value<span class="token operator">:</span> <span class="token builtin">any</span>\nvalue <span class="token operator">=</span> <span class="token number">123</span>\nvalue <span class="token operator">=</span> <span class="token string">&#39;abc&#39;</span>\nvalue <span class="token operator">=</span> <span class="token boolean">false</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以看到，我们定义变量 value，指定它的类型为 any，接下来赋予任何类型的值都是可以的。</p><p>我们还可以在定义数组类型时使用 any 来指定数组中的元素类型为任意类型：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> array<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">]</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>但是请注意，不要滥用 any，如果任何值都指定为 any 类型，那么 TypeScript 将失去它的意义。</p><p>所以如果类型是未知的，更安全的做法是使用 unknown 类型，我们本小节后面会讲到。</p><h2 id="_4-void" tabindex="-1"><a class="header-anchor" href="#_4-void" aria-hidden="true">#</a> 4. void</h2><p>void 和 any 相反，any 是表示任意类型，而 void 是表示没有任意类型，就是什么类型都不是，这在我们定义函 数，函数没有返回值时会用到：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> consoleText <span class="token operator">=</span> <span class="token punctuation">(</span>text<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个函数没有返回任何的值，所以它的返回类型为 void。现在你只需知道 void 表达的含义即可，后面我们会用专 门的一节来学习函数。</p><p>void 类型的变量只能赋值为 undefined 和 null ，其他类型不能赋值给 void 类型的变量</p><h2 id="_5-never" tabindex="-1"><a class="header-anchor" href="#_5-never" aria-hidden="true">#</a> 5. never</h2><p>never 类型指那些永不存在的值的类型，它是那些总会抛出异常或根本不会有返回值的函数表达式的返回值类型， 当变量被永不为真的类型保护（后面章节会详细介绍）所约束时，该变量也是 never 类型。</p><p>这个类型比较难理解，我们先来看几个例子：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> errorFunc <span class="token operator">=</span> <span class="token punctuation">(</span>message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">never</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个 errorFunc 函数总是会抛出异常，所以它的返回值类型是 never，用来表明它的返回值是永不存在的。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> infiniteFunc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">never</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>infiniteFunc</code> 也是根本不会有返回值的函数，它和之前讲 void 类型时的 <code>consoleText</code> 函数不同， <code>consoleText</code> 函数没 有返回值，是我们在定义函数的时候没有给它返回值，而 <code>infiniteFunc</code> 是死循环是根本不会返回值的，所以它们二者 还是有区别的。</p><p>never 类型是任何类型的子类型，所以它可以赋值给任何类型；而没有类型是 never 的子类型，所以除了它自身没 有任何类型可以赋值给 never 类型，any 类型也不能赋值给 never 类型。我们来看例子：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">let</span> neverVariable <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nneverVariable <span class="token operator">=</span> <span class="token number">123</span> <span class="token comment">// error 不能将类型&quot;number&quot;分配给类型&quot;never&quot;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面例子我们定义了一个立即执行函数，也就是 <code>&quot;let neverVariable = &quot;</code> 右边的内容。右边的函数体内是一个死循环， 所以这个函数调用后的返回值类型为 never，所以赋值之后 neverVariable 的类型是 never 类型，当我们给 neverVariable 赋值 123 时，就会报错，因为除它自身外任何类型都不能赋值给 never 类型。</p><h2 id="_6-unknown" tabindex="-1"><a class="header-anchor" href="#_6-unknown" aria-hidden="true">#</a> 6. unknown</h2><p><code>unknown</code> 类型是 TypeScript 在 3.0 版本新增的类型，它表示未知的类型，这样看来它貌似和 any 很像，但是还是有区 别的，也就是所谓的“unknown 相对于 any 是安全的”。怎么理解呢？我们知道当一个值我们不能确定它的类型的时 候，可以指定它是 any 类型；但是当指定了 any 类型之后，这个值基本上是“废”了，你可以随意对它进行属性方法的 访问，不管有的还是没有的，可以把它当做任意类型的值来使用，这往往会产生问题，如下：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">let</span> value<span class="token operator">:</span> <span class="token builtin">any</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span>name<span class="token punctuation">)</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span>length<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这些语句都不会报错，因为 value 是 any 类型，所以后面三个操作都有合法的情况，当 value 是一个对象时，访问 name 属性是没问题的；当 value 是数值类型的时候，调用它的 toFixed 方法没问题；当 value 是字符串或数组时获取它 的 length 属性是没问题的。</p><p>而当你指定值为 unknown 类型的时候，如果没有通过基于控制流的类型断言来缩小范围的话，是不能对它进行任何 操作的，关于类型断言，我们后面小节会讲到。总之这里你知道了，unknown 类型的值不是可以随便操作的。</p><p>我们这里只是先来了解 unknown 和 any 的区别，unknown 还有很多复杂的规则，但是涉及到很多后面才学到的知识， 所以需要我们学习了高级类型之后才能再讲解。</p><h2 id="_7-拓展阅读" tabindex="-1"><a class="header-anchor" href="#_7-拓展阅读" aria-hidden="true">#</a> 7. 拓展阅读</h2><p>这要讲的不是 TypeScript 中新增的基本类型，而是高级类型中的两个比较常用类型：联合类型和交叉类型。我们之 所以要提前讲解，是因为它俩比较简单，而且很是常用，所以我们先来学习下。</p><h3 id="_7-1-交叉类型" tabindex="-1"><a class="header-anchor" href="#_7-1-交叉类型" aria-hidden="true">#</a> 7.1 交叉类型</h3><p>交叉类型就是取多个类型的并集，使用 <code>&amp;</code> 符号定义，被&amp;符链接的多个类型构成一个交叉类型，表示这个类型同时 具备这几个连接起来的类型的特点，来看例子：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> merge <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>arg1<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> arg2<span class="token operator">:</span> <span class="token constant">U</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">&amp;</span> <span class="token constant">U</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">&amp;</span> <span class="token constant">U</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 这里指定返回值的类型兼备T和U两个类型变量代表的类型的特点</span>\n  res <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span> <span class="token comment">// 这里使用Object.assign方法，返回一个合并后的对象；</span>\n  <span class="token comment">// 关于该方法，请在例子下面补充中学习</span>\n  <span class="token keyword">return</span> res\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> info1 <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;lison&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> info2 <span class="token operator">=</span> <span class="token punctuation">{</span>\n  age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> lisonInfo <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>info1<span class="token punctuation">,</span> info2<span class="token punctuation">)</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lisonInfo<span class="token punctuation">.</span>address<span class="token punctuation">)</span> <span class="token comment">// error 类型“{ name: string; } &amp; { age: number; }”上不存在属性“address”</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>:::info 补充阅读： Object.assign 方法可以合并多个对象，将多个对象的属性添加到一个对象中并返回，有一点要注意 的是，如果属性值是对象或者数组这种保存的是内存引用的引用类型，会保持这个引用，也就是如果在 Object.assign 返回的的对象中修改某个对象属性值，原来用来合并的对象也会受到影响。 :::</p><p>可以看到，传入的两个参数分别是带有属性 name 和 age 的两个对象，所以它俩的交叉类型要求返回的对象既有 name 属性又有 age 属性。</p><h3 id="_7-3-联合类型" tabindex="-1"><a class="header-anchor" href="#_7-3-联合类型" aria-hidden="true">#</a> 7.3 联合类型</h3><p>联合类型在前面课时中几次提到，现在我们来看一下。联合类型实际是几个类型的结合，但是和交叉类型不同，联 合类型是要求只要符合联合类型中任意一种类型即可，它使用 <code>|</code> 符号定义。当我们的程序具有多样性，元素类型不 唯一时，即使用联合类型。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> getLength <span class="token operator">=</span> <span class="token punctuation">(</span>content<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> content <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> content<span class="token punctuation">.</span>length\n  <span class="token keyword">else</span> <span class="token keyword">return</span> content<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length\n<span class="token punctuation">}</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 3</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 3</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们指定参数既可以是字符串类型也可以是数值类型，这个 getLength 函数的定义中，其实还涉及到一个知识 点，就是类型保护，就是 <code>typeof content === “string”</code> ，后面进阶部分我们会学到。</p><h2 id="补充说明" tabindex="-1"><a class="header-anchor" href="#补充说明" aria-hidden="true">#</a> 补充说明</h2><p>有一个问题我需要在这里提前声明一下，以免你在自己联系专栏中例子的时候遇到困惑。在讲解语法知识的时候， 会有很多例子，在定义一些类型值，比如枚举，或者后面讲的接口等的时候，对于他们的命名我并不会考虑重复 性，比如我这里讲枚举的定义定义了一个名字叫 Status 的枚举值，在别处我又定义了一个同名的接口，那这个时候 你可能会看到如下这种错误提示：</p><p><code>枚举声明只能与命名空间或其他枚举声明合并</code></p><p>正如你看到的，这里这个错误，是因为你在同一个文件不同地方、或者不同文件中，定义了相同名称的值，而由于 TypeScript 的声明合并策略，他会将同名的一些可合并的声明进行合并，当同名的两个值或类型不能合并的时候， 就会报错；或者可以合并的连个同名的值不符合要求，也会有问题。关于声明合并和哪些声明可以合并，以及声明 需要符合的条件等我们会在后面章节学到。这里你只要知道，类似于这种报错中提到“声明合并”的或者无法重新声 明块范围变量，可能都是因为有相同名称的定义。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>本小节我们学习了六个 TypeScript 中新增的数据类型，它们是：元组、枚举、Any、void、never 和 unknown，其中 枚举我们会在后面一个单独的小节进行详细学习，unknown 会在我们学习了高级类型之后再补充。我们还学习了两 个简单的高级类型：联合类型和交叉类型。我们还学习了 any 类型与 never 类型和 unknown 类型相比的区别，简单来 说，any 和 never 的概念是对立的，而 any 和 unknown 类型相似，但是 unknown 与 any 相比是较为安全的类型，它并不 允许无条件地随意操作。我们学习的联合类型和交叉类型，是各种类型的结合，我们可以使用几乎任何类型，来组 成联合类型和交叉类型。</p><p>下个小节我们将详细学习 Symbol 的所有知识，Symbol 是 ES6 标准提出的新概念，TypeScript 已经支持了该语法，下 节课我们将进行全面学习。</p>',84)],t={},o=(0,a(3744).Z)(t,[["render",function(n,s){return(0,e.wg)(),(0,e.iD)("div",null,p)}]])}}]);