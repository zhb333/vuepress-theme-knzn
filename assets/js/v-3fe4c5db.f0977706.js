"use strict";(self.webpackChunkvuepress_theme_knzn=self.webpackChunkvuepress_theme_knzn||[]).push([[6737],{3739:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e=JSON.parse('{"key":"v-3fe4c5db","path":"/97d70457f39a340c0d7841d9602a8b34/","title":"TypeScript 基础类型","lang":"zh-CN","frontmatter":{"permalink":"/97d70457f39a340c0d7841d9602a8b34/","title":"TypeScript 基础类型","date":"2019-04-17T11:36:10.000Z","categories":["frontEnd"],"tags":["TypeScript"]},"excerpt":"","headers":[{"level":2,"title":"1-布尔值","slug":"_1-布尔值","children":[]},{"level":2,"title":"2-数值","slug":"_2-数值","children":[]},{"level":2,"title":"3-字符串","slug":"_3-字符串","children":[]},{"level":2,"title":"4-数组","slug":"_4-数组","children":[]},{"level":2,"title":"5-元组","slug":"_5-元组","children":[]},{"level":2,"title":"6-枚举值","slug":"_6-枚举值","children":[]},{"level":2,"title":"7-any","slug":"_7-any","children":[]},{"level":2,"title":"8-void","slug":"_8-void","children":[]},{"level":2,"title":"9-null","slug":"_9-null","children":[]},{"level":2,"title":"10-undefined","slug":"_10-undefined","children":[]},{"level":2,"title":"11-never","slug":"_11-never","children":[]},{"level":2,"title":"12-object","slug":"_12-object","children":[]},{"level":2,"title":"13-断言类型","slug":"_13-断言类型","children":[]}],"git":{"updatedTime":1659094015000,"contributors":[{"name":"张焕标","email":"1140457303@qq.com","commits":1}]},"filePathRelative":"杂谈/js笔记/02-basic.md"}')},4595:(n,s,a)=>{a.r(s),a.d(s,{default:()=>o});var e=a(6252);const t=[(0,e.uE)('<h2 id="_1-布尔值" tabindex="-1"><a class="header-anchor" href="#_1-布尔值" aria-hidden="true">#</a> 1-布尔值</h2><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 布尔类型</span>\n<span class="token keyword">let</span> bool<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">true</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-数值" tabindex="-1"><a class="header-anchor" href="#_2-数值" aria-hidden="true">#</a> 2-数值</h2><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 数值类型</span>\n<span class="token keyword">let</span> num<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">123</span>\nnum <span class="token operator">=</span> <span class="token number">0b1111011</span>\nnum <span class="token operator">=</span> <span class="token number">0o173</span>\nnum <span class="token operator">=</span> <span class="token number">0x7b</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-字符串" tabindex="-1"><a class="header-anchor" href="#_3-字符串" aria-hidden="true">#</a> 3-字符串</h2><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 字符串类型</span>\n<span class="token keyword">let</span> str<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;abc&#39;</span>\nstr <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>str<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token template-punctuation string">`</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-数组" tabindex="-1"><a class="header-anchor" href="#_4-数组" aria-hidden="true">#</a> 4-数组</h2><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 数组类型</span>\n<span class="token keyword">let</span> arr<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>\n<span class="token keyword">let</span> arr1<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>\n<span class="token keyword">let</span> arr2<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>\n<span class="token keyword">let</span> arr3<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">]</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-元组" tabindex="-1"><a class="header-anchor" href="#_5-元组" aria-hidden="true">#</a> 5-元组</h2><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 元组类型： 固定长度，固定位置，固定类型</span>\n<span class="token keyword">let</span> tuple<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">boolean</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">]</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-枚举值" tabindex="-1"><a class="header-anchor" href="#_6-枚举值" aria-hidden="true">#</a> 6-枚举值</h2><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 枚举类型</span>\n<span class="token keyword">enum</span> Roles <span class="token punctuation">{</span>\n  SuperUser<span class="token punctuation">,</span>\n  Admin<span class="token punctuation">,</span>\n  User\n<span class="token punctuation">}</span>\n\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Roles<span class="token punctuation">.</span>User<span class="token punctuation">)</span> <span class="token comment">// 2</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Roles<span class="token punctuation">[</span>Roles<span class="token punctuation">.</span>User<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// Use</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 编译后的结果</span>\n<span class="token keyword">var</span> Roles<span class="token punctuation">;</span>\n<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">Roles</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    Roles<span class="token punctuation">[</span>Roles<span class="token punctuation">[</span><span class="token string">&quot;SuperUser&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;SuperUser&quot;</span><span class="token punctuation">;</span>\n    Roles<span class="token punctuation">[</span>Roles<span class="token punctuation">[</span><span class="token string">&quot;Admin&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Admin&quot;</span><span class="token punctuation">;</span>\n    Roles<span class="token punctuation">[</span>Roles<span class="token punctuation">[</span><span class="token string">&quot;User&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;User&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Roles <span class="token operator">||</span> <span class="token punctuation">(</span>Roles <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 从4开始自增长</span>\n<span class="token keyword">enum</span> Shop <span class="token punctuation">{</span>\n  Collect<span class="token punctuation">,</span>\n  Order <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span>\n  Payed\n<span class="token punctuation">}</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Shop<span class="token punctuation">.</span>Collect<span class="token punctuation">)</span> <span class="token comment">// 0</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Shop<span class="token punctuation">.</span>Payed<span class="token punctuation">)</span> <span class="token comment">// 5</span>\n\n<span class="token comment">// 全部自定义值</span>\n<span class="token keyword">enum</span> Car <span class="token punctuation">{</span>\n  Ford <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>\n  <span class="token constant">VOLKSWAGEN</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span>\n  Tesla <span class="token operator">=</span> <span class="token number">5</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 字符串枚举</span>\n<span class="token keyword">enum</span> Fruits <span class="token punctuation">{</span>\n  Apple <span class="token operator">=</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span>\n  Banana <span class="token operator">=</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span>\n  Cherry <span class="token operator">=</span> <span class="token string">&#39;c&#39;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-any" tabindex="-1"><a class="header-anchor" href="#_7-any" aria-hidden="true">#</a> 7-any</h2><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// any 类型: 任何类型</span>\n<span class="token keyword">let</span> value<span class="token operator">:</span> <span class="token builtin">any</span>\nvalue <span class="token operator">=</span> <span class="token number">2</span>\nvalue <span class="token operator">=</span> <span class="token string">&#39;b&#39;</span>\nvalue <span class="token operator">=</span> <span class="token boolean">false</span>\n<span class="token keyword">const</span> arr4<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">]</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-void" tabindex="-1"><a class="header-anchor" href="#_8-void" aria-hidden="true">#</a> 8-void</h2><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// void 类型: 什么类型都不是</span>\n<span class="token keyword">const</span> consoleText <span class="token operator">=</span> <span class="token punctuation">(</span>text<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> v<span class="token operator">:</span> <span class="token keyword">void</span>\nv <span class="token operator">=</span> <span class="token keyword">undefined</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9-null" tabindex="-1"><a class="header-anchor" href="#_9-null" aria-hidden="true">#</a> 9-null</h2><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// null</span>\n<span class="token keyword">let</span> n<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_10-undefined" tabindex="-1"><a class="header-anchor" href="#_10-undefined" aria-hidden="true">#</a> 10-undefined</h2><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// undefined</span>\n<span class="token keyword">let</span> u <span class="token operator">=</span> <span class="token keyword">undefined</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_11-never" tabindex="-1"><a class="header-anchor" href="#_11-never" aria-hidden="true">#</a> 11-never</h2><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// never 类型: 永远不存在的值的类型</span>\n\n<span class="token comment">// 抛错</span>\n<span class="token keyword">const</span> errFunc <span class="token operator">=</span> <span class="token punctuation">(</span>mes<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">never</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>mes<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 死循环</span>\n<span class="token keyword">const</span> infiniteFunc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">never</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// never 类型是任何类型的子类型</span>\n<span class="token comment">// let neverVariable = (():never =&gt; { while(true) {} })()</span>\n<span class="token comment">// num = neverVariable</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_12-object" tabindex="-1"><a class="header-anchor" href="#_12-object" aria-hidden="true">#</a> 12-object</h2><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// object 类型</span>\n<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&#39;lucy&#39;</span><span class="token punctuation">}</span>\n<span class="token keyword">const</span> getObject <span class="token operator">=</span> <span class="token punctuation">(</span>obj<span class="token operator">:</span> object<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token function">getObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_13-断言类型" tabindex="-1"><a class="header-anchor" href="#_13-断言类型" aria-hidden="true">#</a> 13-断言类型</h2><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 类型断言</span>\n<span class="token keyword">const</span> getLength <span class="token operator">=</span> <span class="token punctuation">(</span>target<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span>target<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">||</span> <span class="token punctuation">(</span>target <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>target <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> target<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',28)],p={},o=(0,a(3744).Z)(p,[["render",function(n,s){return(0,e.wg)(),(0,e.iD)("div",null,t)}]])}}]);