"use strict";(self.webpackChunkvuepress_theme_knzn=self.webpackChunkvuepress_theme_knzn||[]).push([[4753],{2939:(e,n,l)=>{l.r(n),l.d(n,{data:()=>t});const t=JSON.parse('{"key":"v-3dcc8dff","path":"/56439d7ad3ca703d4722ef74d55bed4a/","title":"03 VSCode 揭秘和搭建开发环境","lang":"zh-CN","frontmatter":{"permalink":"/56439d7ad3ca703d4722ef74d55bed4a/","title":"03 VSCode 揭秘和搭建开发环境","author":"前端程序猿","tags":["typescript"],"categories":["大前端"],"postImage":"/images/typescript.webp"},"excerpt":"<p>这节课我们要做的就是在砍柴之前先磨刀，学习如何借助 VSCode 愉快高效地开发 TypeScript 项目，我们来一步一\\n步让 VSCode 对 TypeScript 的支持更强大。如果你已经习惯了使用别的编辑器，那你也可以自行搜索下，本节课提\\n到的内容在你使用的编辑器是否有对应的替代品。</p>\\n","headers":[{"level":2,"title":"1. 安装和基本配置","slug":"_1-安装和基本配置","children":[]},{"level":2,"title":"2 常用功能","slug":"_2-常用功能","children":[]},{"level":2,"title":"3 搭建开发环境","slug":"_3-搭建开发环境","children":[]}],"git":{"updatedTime":1659093557000,"contributors":[{"name":"张焕标","email":"1140457303@qq.com","commits":1}]},"filePathRelative":"TypeScript学习笔记/03-vscode-unveiling-secrets-and-building-development-environment.md"}')},9115:(e,n,l)=>{l.r(n),l.d(n,{default:()=>le});var t=l(6252);const s=l.p+"assets/img/11.56a155b8.png",a=l.p+"assets/img/6.5292ac98.jpg",i=l.p+"assets/img/12.f9208e59.png",o=l.p+"assets/img/13.83533f97.png",r=(0,t._)("p",null,"这节课我们要做的就是在砍柴之前先磨刀，学习如何借助 VSCode 愉快高效地开发 TypeScript 项目，我们来一步一 步让 VSCode 对 TypeScript 的支持更强大。如果你已经习惯了使用别的编辑器，那你也可以自行搜索下，本节课提 到的内容在你使用的编辑器是否有对应的替代品。",-1),p=(0,t._)("blockquote",null,[(0,t._)("p",null,"宝剑锋从磨砺出，梅花香自苦寒来。 ——佚名")],-1),d=(0,t._)("h2",{id:"_1-安装和基本配置",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#_1-安装和基本配置","aria-hidden":"true"},"#"),(0,t.Uk)(" 1. 安装和基本配置")],-1),c=(0,t.Uk)("如果你还没有使用过 "),u={href:"https://code.visualstudio.com/",target:"_blank",rel:"noopener noreferrer"},m=(0,t.Uk)("VSCode"),_=(0,t.Uk)("，当然先要去官网下载了，下载安装我就不多说了，安装好之后，我们先来配置几个 基本的插件。"),h=(0,t._)("ul",null,[(0,t._)("li",null,"汉化")],-1),v=(0,t._)("p",null,'如果你英语不是很好，配置中文版界面是很有必要的，安装个插件就可以了。打开 VSCode 之后在编辑器左侧找到 这个拓展按钮，点击，然后在搜索框内搜索关键字"Chinese"，这里图中第一个插件就是。直接点击 install 安装，安 装完成后重启 VSCode 即可。',-1),k=(0,t._)("p",null,[(0,t._)("img",{src:s,alt:""})],-1),g=(0,t._)("ul",null,[(0,t._)("li",null,"编辑器配置")],-1),b=(0,t._)("p",null,"format on save",-1),f=(0,t._)("p",null,[(0,t._)("img",{src:a,alt:""})],-1),q=(0,t._)("p",null,"提升开发体验",-1),U={href:"https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-close-tag",target:"_blank",rel:"noopener noreferrer"},y=(0,t.Uk)("Auto Close Tag"),S=(0,t.Uk)(" 插件会自动帮你补充 HTML 闭合标签，比如你输完 "),C=(0,t._)("code",null,"<button>",-1),x=(0,t.Uk)(" 的后面的尖括号后，插件会自动帮你补 充 "),T=(0,t._)("code",null,"</button>",-1),V=(0,t.Uk)(" ；"),w={href:"https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag",target:"_blank",rel:"noopener noreferrer"},$=(0,t.Uk)("Auto Rename Tag"),W=(0,t.Uk)("插件会在你修改 HTML 标签名的时候，自动帮你把它对应的闭标签同时修改掉；"),j={href:"https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer",target:"_blank",rel:"noopener noreferrer"},P=(0,t.Uk)("Bracket Pair Colorizer"),N=(0,t.Uk)(" 插件会将你的括号一对一对地用颜色进行区分，这样你就不会被多层嵌套的括号搞晕了，来 看看它的样子： "),z=(0,t._)("img",{src:i,alt:""},null,-1),E={href:"https://marketplace.visualstudio.com/items?itemName=spywhere.guides",target:"_blank",rel:"noopener noreferrer"},L=(0,t.Uk)("Guides"),A=(0,t.Uk)(" 插件能够帮你在代码缩进的地方用竖线展示出索引对应的位置，而且点击代码，它还会将统一代码块范围的代码用统一颜色竖线标出，如图： "),I=(0,t._)("img",{src:o,alt:""},null,-1),H=(0,t._)("h2",{id:"_2-常用功能",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#_2-常用功能","aria-hidden":"true"},"#"),(0,t.Uk)(" 2 常用功能")],-1),M=(0,t._)("li",null,[(0,t._)("p",null,"终端 在 VSCode 中有终端窗口，点击菜单栏的【查看】-【终端】，也可以使用快捷键 ”control+`“ 打开。这样可以直接在 编辑器运行启动命令，启动项目，边写代码边看报错。")],-1),R=(0,t.uE)('<p>用户代码片段 一些经常用到的重复的代码片段，可以使用 <code>用户代码片段</code> 配置，这样每次要输入这段代码就不用一行一行敲了，直 接输入几个标示性字符即可。在 VSCode 左下角有个设置按钮，点击之后选择【用户代码片段】，在弹出的下拉列 表中可以选择【新建全局代码片段文件】，这样创建的代码片段是任何项目都可用的；可以选择【新建&quot;项目名&quot;文 件夹的代码片段文件】，这样创建的代码片段只在当前项目可用。创建代码片段文件后它是一个类似于 json 的文 件，文件有这样一个示例：</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token comment">// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and</span>\n  <span class="token comment">// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope</span>\n  <span class="token comment">// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is</span>\n  <span class="token comment">// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:</span>\n  <span class="token comment">// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.</span>\n  <span class="token comment">// Placeholders with the same ids are connected.</span>\n  <span class="token comment">// Example:</span>\n  <span class="token comment">// &quot;Print to console&quot;: {</span>\n  <span class="token comment">// \t&quot;scope&quot;: &quot;javascript,typescript&quot;,</span>\n  <span class="token comment">// \t&quot;prefix&quot;: &quot;log&quot;,</span>\n  <span class="token comment">// \t&quot;body&quot;: [</span>\n  <span class="token comment">// \t\t&quot;console.log(&#39;$1&#39;);&quot;,</span>\n  <span class="token comment">// \t\t&quot;$2&quot;</span>\n  <span class="token comment">// \t],</span>\n  <span class="token comment">// \t&quot;description&quot;: &quot;Log output to console&quot;</span>\n  <span class="token comment">// }</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们来看一下其中的几个关键参数：</p><ul><li><code>Print to console</code> 是要显示的提示文字</li><li><code>scope</code> 是代码片段作用的语言类型</li><li><code>prefix</code> 是你输入这个名字之后，就会出现这个代码片段的选项回车即可选中插入</li><li><code>body</code> 就是你的代码片段实体</li><li><code>$1</code> 是输入这个片段后光标放置的位置，这个$1 不是内容，而是一个占位</li><li><code>description</code> 是描述。</li></ul>',4),B=(0,t.Uk)("生成代码片段的线上工具："),D={href:"https://snippet-generator.app/",target:"_blank",rel:"noopener noreferrer"},G=(0,t.Uk)("snippet generator"),J=(0,t._)("h2",{id:"_3-搭建开发环境",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#_3-搭建开发环境","aria-hidden":"true"},"#"),(0,t.Uk)(" 3 搭建开发环境")],-1),O=(0,t.Uk)("使用 "),Z={href:"https://cn.vitejs.dev/",target:"_blank",rel:"noopener noreferrer"},F=(0,t.Uk)("vite"),K=(0,t.Uk)(", 来搭建我们的开发环境"),Q=(0,t.Uk)("具体流程查看 Vite 官方文档，使用的模板预设是 "),X={href:"https://vite.new/vanilla-ts",target:"_blank",rel:"noopener noreferrer"},Y=(0,t.Uk)("vanilla-ts"),ee=(0,t._)("p",null,"现在我们前端项目的搭建就大功告成了，我们后面的课程都会在这个基础上进行示例的演示。大家最好都自己操作 一遍，把开发环境的搭建流程走一下，如果中间遇到了报错仔细看一下报错信息。下节课开始我们就正式的步入 TypeScript 的学习中了，我们下节课见。",-1),ne={},le=(0,l(3744).Z)(ne,[["render",function(e,n){const l=(0,t.up)("ExternalLinkIcon");return(0,t.wg)(),(0,t.iD)("div",null,[r,p,d,(0,t._)("p",null,[c,(0,t._)("a",u,[m,(0,t.Wm)(l)]),_]),h,v,k,g,b,f,(0,t._)("ul",null,[(0,t._)("li",null,[q,(0,t._)("ul",null,[(0,t._)("li",null,[(0,t._)("p",null,[(0,t._)("a",U,[y,(0,t.Wm)(l)]),S,C,x,T,V])]),(0,t._)("li",null,[(0,t._)("p",null,[(0,t._)("a",w,[$,(0,t.Wm)(l)]),W])]),(0,t._)("li",null,[(0,t._)("p",null,[(0,t._)("a",j,[P,(0,t.Wm)(l)]),N,z])]),(0,t._)("li",null,[(0,t._)("p",null,[(0,t._)("a",E,[L,(0,t.Wm)(l)]),A,I])])])])]),H,(0,t._)("ul",null,[M,(0,t._)("li",null,[R,(0,t._)("p",null,[(0,t._)("strong",null,[B,(0,t._)("a",D,[G,(0,t.Wm)(l)])])])])]),J,(0,t._)("p",null,[O,(0,t._)("a",Z,[F,(0,t.Wm)(l)]),K]),(0,t._)("p",null,[Q,(0,t._)("a",X,[Y,(0,t.Wm)(l)])]),ee])}]])}}]);