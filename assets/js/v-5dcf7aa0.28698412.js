"use strict";(self.webpackChunkvuepress_theme_knzn=self.webpackChunkvuepress_theme_knzn||[]).push([[8912],{9113:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e=JSON.parse('{"key":"v-5dcf7aa0","path":"/ce61a7807e8da5950372b28ba7c8b2db/","title":"33 书写声明文件之砍柴：为不同类型库书写声明文件","lang":"zh-CN","frontmatter":{"permalink":"/ce61a7807e8da5950372b28ba7c8b2db/","title":"33 书写声明文件之砍柴：为不同类型库书写声明文件","author":"前端程序猿","tags":["typescript"],"categories":["大前端"],"postImage":"/images/typescript.webp"},"excerpt":"<p>一些模块和插件是支持插件机制的，比如我们常见的 jQuery，它的插件有非常多。我们可以为库书写声明文件的同时，为库的插件定义声明文件，可以参考官方模板 module-plugin.d.ts。</p>\\n","headers":[{"level":2,"title":"1 模块插件或 UMD 插件","slug":"_1-模块插件或-umd-插件","children":[]},{"level":2,"title":"2 全局插件","slug":"_2-全局插件","children":[]},{"level":2,"title":"3 修改全局的模块","slug":"_3-修改全局的模块","children":[]},{"level":2,"title":"4 使用依赖","slug":"_4-使用依赖","children":[]},{"level":2,"title":"5 快捷外部模块声明","slug":"_5-快捷外部模块声明","children":[]},{"level":2,"title":"本节小结","slug":"本节小结","children":[]}],"git":{"updatedTime":1659093557000,"contributors":[{"name":"张焕标","email":"1140457303@qq.com","commits":1}]},"filePathRelative":"TypeScript学习笔记/33-Writing-a-declaration-document.md"}')},4374:(n,s,a)=>{a.r(s),a.d(s,{default:()=>L});var e=a(6252);const t=(0,e.uE)('<p>一些模块和插件是支持插件机制的，比如我们常见的 jQuery，它的插件有非常多。我们可以为库书写声明文件的同时，为库的插件定义声明文件，可以参考官方模板 module-plugin.d.ts。</p><blockquote><p>与有肝胆人共事，从无字句处读书。 ——周恩来</p></blockquote><h2 id="_1-模块插件或-umd-插件" tabindex="-1"><a class="header-anchor" href="#_1-模块插件或-umd-插件" aria-hidden="true">#</a> 1 模块插件或 UMD 插件</h2><h2 id="_2-全局插件" tabindex="-1"><a class="header-anchor" href="#_2-全局插件" aria-hidden="true">#</a> 2 全局插件</h2><p>全局插件往往会修改全局中一些对象，在这些对象上添加或修改属性方法，比如下面的示例：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// add-methods-to-string.js</span>\n<span class="token class-name">String</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getFirstLetter</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码在 String 构造函数的原型对象上添加一个 getFirstLetter 方法，这个方法可以返回字符串的第一个字符。我们创建一个字符串，就可以调用这个方法</p><p>我们在 html 文件里引入这个 js 文件后创建一个字符串，这个字符串就可以调用 getFirstLetter 方法：</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./add-methods-to-string.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n  <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;Lison&#39;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">getFirstLetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &quot;L&quot;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们在 TS 中使用，就需要为这个创建声明文件，我们创建一个声明文件 global-plugin.d.ts：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// global-plugin.d.ts</span>\n<span class="token keyword">interface</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>\n  <span class="token function">getFirstLetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// index.ts</span>\n<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;Lison&#39;</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">getFirstLetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &quot;L&quot;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>遇到这类情景，你可以参考官方的 global-plugin.d.ts 模板来书写声明文件</p><h2 id="_3-修改全局的模块" tabindex="-1"><a class="header-anchor" href="#_3-修改全局的模块" aria-hidden="true">#</a> 3 修改全局的模块</h2><p>还有一些影响全局的全局模块，这些模块除了导出一些东西，还会直接修改全局的一些对象，我们还是使用上面例子的代码，只不过这次我们使用引入模块的形式来引入，：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// add-methods-to-string模块</span>\n<span class="token class-name">String</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getFirstLetter</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// index.js</span>\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;add-methods-to-string&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">&#39;Lison&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">getFirstLetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &quot;L&quot;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过这个例子我们知道一些全局模块是做什么事了，你大概知道怎么为它们定义声明文件了。我们新建一个声明文件 global-modifying-module.d.ts，在声明文件中如下声明：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">declare</span> global <span class="token punctuation">{</span>\n  <span class="token keyword">interface</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>\n    <span class="token function">getFirstLetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意如果我们这个声明文件没有需要导出的东西，这里必须在末尾加上 export {}，这样才能让 TS 编译器把这个声明文件当做一个模块声明。我们加了这个声明文件后，就可以在 TS 中引入这个模块，再在 TS 中调用字符串的 getFirstLetter 方法就不会报错了。这类全局模块，你可以参考官方的 global-modifying-module.d.ts 模板</p><h2 id="_4-使用依赖" tabindex="-1"><a class="header-anchor" href="#_4-使用依赖" aria-hidden="true">#</a> 4 使用依赖</h2><p>库多数会依赖其它库，所以可以在定义库声明文件的时候，声明对其它库的依赖，从而加载其它库的内容。如果是依赖全局库，可以使用<code>///&lt;reference types=“UMDModuleName” /&gt;</code>三斜线指令来指定加载了某个全局库：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">/// &lt;reference types=&quot;globalLib&quot; /&gt;</span>\n<span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> globalLib<span class="token punctuation">.</span>someName\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果依赖的是模块库，可以使用 import 语句：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> moment <span class="token keyword">from</span> <span class="token string">&#39;moment&#39;</span>\n<span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> moment\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>因为有些库是没有 default 默认输出的，所以如果你在使用 import xxx from &#39;xxx’语句引入一个库报错时，可以使用 <code>import * as xxx from &#39;xxx’</code>的形式引入。</p><p>如果是全局库依赖于某个 UMD 模块，也可以使用<code>///&lt;reference types=“UMDModuleName” /&gt;</code>三斜线指令来指定对某个 UMD 模块的依赖：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// globals.d.ts</span>\n<span class="token comment">/// &lt;reference types=&quot;moment&quot;/&gt;</span>\n<span class="token keyword">function</span> <span class="token function">getMoment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> moment\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果模块或一个 UMD 库依赖于一个 UMD 库，使用 <code>import * as</code> 语句引入模块：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// module.d.ts</span>\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> moment <span class="token keyword">from</span> <span class="token string">&#39;moment&#39;</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>m<span class="token operator">:</span> <span class="token keyword">typeof</span> moment<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后有三点要注意的：</p><p>防止命名冲突</p><p>我们在写全局声明时，在全局范围定义大量类型，有时会导致命名冲突。所以建议相关的定义放到命名空间内。</p><p>ES6 模块插件影响</p><p>一些开发者为一些库开发了插件，用在原有库的基础上添加更多功能，这往往需要修改原有库导出的模块。我们在讲模块的时候说过，ES6 模块标准中，导出的模块是不允许修改的；但是在 CommonJS 和其它一些加载器里是允许的，所以要使用 ES6 模块的话要注意这一点。</p><p>ES6 模块调用</p><p>我们在使用一些库的时候，引入的模块可以作为函数直接调用。ES6 的模块顶层对象是一个对象，它不能作为函数调用，比如我们直接用 export 导出几个内容：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// moduleB.js</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">10</span>\n<span class="token keyword">export</span> <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&#39;lison&#39;</span>\n<span class="token comment">// main.js</span>\n<span class="token keyword">import</span> info <span class="token keyword">from</span> <span class="token string">&#39;./moduleB.js&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// &#39;lison&#39;</span>\n<span class="token comment">// index.js</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> age <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./moduleB.js&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token comment">// &#39;lison&#39;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们想导出一个直接可以调用的函数，又要使用 ES6 模块，则可以用 export default 来导出一个函数，这个我们在讲模块的时候也讲过了。</p><h2 id="_5-快捷外部模块声明" tabindex="-1"><a class="header-anchor" href="#_5-快捷外部模块声明" aria-hidden="true">#</a> 5 快捷外部模块声明</h2><p>如果我们使用一个新模块不想花时间精力为这个模块写声明，TS 在 2.0 版本支持了快捷外部模块声明，比如我们使用 moment 模块，就可以在 typings 创建一个 moment 文件夹，并在这个 moment 文件夹创建一个 index.d.ts 文件，写如下内容：</p><p>// index.d.ts declare module &quot;moment&quot;; 这样就可以正常使用这个 moment 模块了。</p><h2 id="本节小结" tabindex="-1"><a class="header-anchor" href="#本节小结" aria-hidden="true">#</a> 本节小结</h2><p>本小节我们学习了如何为各种类型的库书写声明文件，官方提供了各种类型库的声明文件的模板，总结如下：</p>',43),p={href:"https://www.tslang.cn/docs/handbook/declaration-files/templates/global-modifying-module-d-ts.html",target:"_blank",rel:"noopener noreferrer"},o=(0,e.Uk)("global-modifying-module.d.ts"),l=(0,e.Uk)(" 适合修改全局的模块"),c={href:"https://www.tslang.cn/docs/handbook/declaration-files/templates/global-plugin-d-ts.html",target:"_blank",rel:"noopener noreferrer"},i=(0,e.Uk)("global-plugin.d.ts"),r=(0,e.Uk)(" 适合全局插件"),u={href:"https://www.tslang.cn/docs/handbook/declaration-files/templates/global-d-ts.html",target:"_blank",rel:"noopener noreferrer"},d=(0,e.Uk)("global.d.ts"),k=(0,e.Uk)(" 适合全局库"),m={href:"https://www.tslang.cn/docs/handbook/declaration-files/templates/module-class-d-ts.html",target:"_blank",rel:"noopener noreferrer"},v=(0,e.Uk)("module-class.d.ts"),g=(0,e.Uk)(" 适合引入后可以直接当做类使用 new 关键字创建实例的模块"),b={href:"https://www.tslang.cn/docs/handbook/declaration-files/templates/module-function-d-ts.html",target:"_blank",rel:"noopener noreferrer"},h=(0,e.Uk)("module-function.d.ts"),f=(0,e.Uk)(" 适合引入后可以直接当做函数的模块"),y={href:"https://www.tslang.cn/docs/handbook/declaration-files/templates/module-plugin-d-ts.html",target:"_blank",rel:"noopener noreferrer"},w=(0,e.Uk)("module-plugin.d.ts"),_=(0,e.Uk)(" 适合模块插件或 UMD 插件"),x={href:"https://www.tslang.cn/docs/handbook/declaration-files/templates/module-d-ts.html",target:"_blank",rel:"noopener noreferrer"},j=(0,e.Uk)("module.d.ts"),q=(0,e.Uk)(" 适合引入后既不能当做类直接使用，也不能直接当做函数调用的模块"),U={},L=(0,a(3744).Z)(U,[["render",function(n,s){const a=(0,e.up)("ExternalLinkIcon");return(0,e.wg)(),(0,e.iD)("div",null,[t,(0,e._)("ul",null,[(0,e._)("li",null,[(0,e._)("p",null,[(0,e._)("a",p,[o,(0,e.Wm)(a)]),l])]),(0,e._)("li",null,[(0,e._)("p",null,[(0,e._)("a",c,[i,(0,e.Wm)(a)]),r])]),(0,e._)("li",null,[(0,e._)("p",null,[(0,e._)("a",u,[d,(0,e.Wm)(a)]),k])]),(0,e._)("li",null,[(0,e._)("p",null,[(0,e._)("a",m,[v,(0,e.Wm)(a)]),g])]),(0,e._)("li",null,[(0,e._)("p",null,[(0,e._)("a",b,[h,(0,e.Wm)(a)]),f])]),(0,e._)("li",null,[(0,e._)("p",null,[(0,e._)("a",y,[w,(0,e.Wm)(a)]),_])]),(0,e._)("li",null,[(0,e._)("p",null,[(0,e._)("a",x,[j,(0,e.Wm)(a)]),q])])])])}]])}}]);