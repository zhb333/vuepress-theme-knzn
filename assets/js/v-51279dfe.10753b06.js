"use strict";(self.webpackChunkvuepress_theme_knzn=self.webpackChunkvuepress_theme_knzn||[]).push([[7160],{8515:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e=JSON.parse('{"key":"v-51279dfe","path":"/e4a23be1b843a692a1f2a78941f54351/","title":"13 ES7-ES12 知识点解析","lang":"zh-CN","frontmatter":{"permalink":"/e4a23be1b843a692a1f2a78941f54351/","title":"13 ES7-ES12 知识点解析","author":"前端程序猿","tags":["javascript"],"categories":["大前端"],"postImage":"/images/javascript.webp"},"excerpt":"<p>在 ES7 之前，如果我们想判断一个数组中是否包含某个元素，需要通过 indexOf 获取结果，并且判断是否为 -1。在 ES7 中，我们可以通过 includes 来判断一个数组中是否包含一个指定的元素，根据情况，如果包含则返回 true，\\n否则返回 false。</p>\\n","headers":[{"level":2,"title":"ES7 - Array Includes","slug":"es7-array-includes","children":[]},{"level":2,"title":"ES7 –指数(乘方) exponentiation 运算符","slug":"es7-–指数-乘方-exponentiation-运算符","children":[]},{"level":2,"title":"ES8 Object values","slug":"es8-object-values","children":[]},{"level":2,"title":"ES8 Object entries","slug":"es8-object-entries","children":[]},{"level":2,"title":"ES8 - String Padding","slug":"es8-string-padding","children":[]},{"level":2,"title":"ES8 - Trailing Commas","slug":"es8-trailing-commas","children":[]},{"level":2,"title":"ES8 - Object Descriptors","slug":"es8-object-descriptors","children":[]},{"level":2,"title":"ES9 新增知识点","slug":"es9-新增知识点","children":[]},{"level":2,"title":"ES10 - flat flatMap","slug":"es10-flat-flatmap","children":[]},{"level":2,"title":"ES10 - Object fromEntries","slug":"es10-object-fromentries","children":[]},{"level":2,"title":"ES10 - trimStart trimEnd","slug":"es10-trimstart-trimend","children":[]},{"level":2,"title":"ES10 其他知识点","slug":"es10-其他知识点","children":[]},{"level":2,"title":"ES11 - BigInt","slug":"es11-bigint","children":[]},{"level":2,"title":"ES11 - Nullish Coalescing Operator","slug":"es11-nullish-coalescing-operator","children":[]},{"level":2,"title":"ES11 - Optional Chaining","slug":"es11-optional-chaining","children":[]},{"level":2,"title":"ES11 - Global This","slug":"es11-global-this","children":[]},{"level":2,"title":"ES11 - for..in 标准化","slug":"es11-for-in-标准化","children":[]},{"level":2,"title":"ES11 其他知识点","slug":"es11-其他知识点","children":[]},{"level":2,"title":"ES12 - FinalizationRegistry","slug":"es12-finalizationregistry","children":[]},{"level":2,"title":"ES12 - WeakRefs","slug":"es12-weakrefs","children":[]},{"level":2,"title":"ES12 - logical assignment operators","slug":"es12-logical-assignment-operators","children":[]},{"level":2,"title":"ES12 其他知识点","slug":"es12-其他知识点","children":[]}],"git":{"updatedTime":1659091972000,"contributors":[{"name":"张焕标","email":"1140457303@qq.com","commits":1}]},"filePathRelative":"深入理解JavaScript/13-es7-es12.md"}')},486:(n,s,a)=>{a.r(s),a.d(s,{default:()=>o});var e=a(6252);const t=[(0,e.uE)('<p>在 ES7 之前，如果我们想判断一个数组中是否包含某个元素，需要通过 indexOf 获取结果，并且判断是否为 -1。在 ES7 中，我们可以通过 includes 来判断一个数组中是否包含一个指定的元素，根据情况，如果包含则返回 true， 否则返回 false。</p><h2 id="es7-array-includes" tabindex="-1"><a class="header-anchor" href="#es7-array-includes" aria-hidden="true">#</a> ES7 - Array Includes</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;cba&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;nba&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;mba&#39;</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">]</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span>names<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;cba&#39;</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;包含abc元素&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// ES7 ES2016</span>\n<span class="token comment">// 指定查找的起始位置</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>names<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;cba&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// false</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;包含abc元素&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// indexOf 会忽略 NaN</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>names<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// false</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;包含NaN&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// includes 可以检测到 NaN</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>names<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;包含NaN&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="es7-–指数-乘方-exponentiation-运算符" tabindex="-1"><a class="header-anchor" href="#es7-–指数-乘方-exponentiation-运算符" aria-hidden="true">#</a> ES7 –指数(乘方) exponentiation 运算符</h2><p>在 ES7 之前，计算数字的乘方需要通过 Math.pow 方法来完成。在 ES7 中，增加了 <code>**</code> 运算符，可以对数字来计算乘方。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> result1 <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>\n<span class="token comment">// ES7: **</span>\n<span class="token keyword">const</span> result2 <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">**</span> <span class="token number">3</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result1<span class="token punctuation">,</span> result2<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="es8-object-values" tabindex="-1"><a class="header-anchor" href="#es8-object-values" aria-hidden="true">#</a> ES8 Object values</h2><p>之前我们可以通过 Object.keys 获取一个对象所有的 key，在 ES8 中提供了 Object.values 来获取所有的 value 值：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;why&#39;</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//  [&#39;why&#39;, 18]</span>\n\n<span class="token comment">// 用的非常少</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;cba&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;nba&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [&#39;abc&#39;, &#39;cba&#39;, &#39;nba&#39;]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="es8-object-entries" tabindex="-1"><a class="header-anchor" href="#es8-object-entries" aria-hidden="true">#</a> ES8 Object entries</h2><p>通过 Object.entries 可以获取到一个数组，数组中会存放可枚举属性的键值对数组。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;why&#39;</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [[&quot;name&quot;,&quot;why&quot;],[&quot;age&quot;,18]]</span>\n<span class="token keyword">const</span> objEntries <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>\nobjEntries<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;cba&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;nba&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [[&quot;0&quot;,&quot;abc&quot;],[&quot;1&quot;,&quot;cba&quot;],[&quot;2&quot;,&quot;nba&quot;]]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [[&quot;0&quot;,&quot;a&quot;],[&quot;1&quot;,&quot;b&quot;],[&quot;2&quot;,&quot;c&quot;]]</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="es8-string-padding" tabindex="-1"><a class="header-anchor" href="#es8-string-padding" aria-hidden="true">#</a> ES8 - String Padding</h2><p>某些字符串我们需要对其进行前后的填充，来实现某种格式化效果，ES8 中增加了 padStart 和 padEnd 方法，分 别是对字符串的首尾进行填充的。</p><p><strong>第一个参数是，填充后，字符串的长度，如果该参数小于等于字符串的长度，则填充不起作用</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token string">&#39;Hello World&#39;</span>\n\n<span class="token keyword">const</span> newMessage <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padEnd</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newMessage<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们简单具一个应用场景：比如需要对身份证、银行卡的前面位数进行隐藏：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 案例</span>\n<span class="token keyword">const</span> cardNumber <span class="token operator">=</span> <span class="token string">&#39;321324234242342342341312&#39;</span>\n<span class="token keyword">const</span> lastFourCard <span class="token operator">=</span> cardNumber<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> finalCard <span class="token operator">=</span> lastFourCard<span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span>cardNumber<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>finalCard<span class="token punctuation">)</span> <span class="token comment">// ********************1312</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="es8-trailing-commas" tabindex="-1"><a class="header-anchor" href="#es8-trailing-commas" aria-hidden="true">#</a> ES8 - Trailing Commas</h2><p>在 ES8 中，我们允许在函数定义和调用时多加一个逗号：</p><div class="language-txt ext-txt line-numbers-mode"><pre class="language-txt"><code>function foo(m, n,) {};\nfoo(20, 30,);\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="es8-object-descriptors" tabindex="-1"><a class="header-anchor" href="#es8-object-descriptors" aria-hidden="true">#</a> ES8 - Object Descriptors</h2><p>ES8 中增加了另一个对对象的操作是 Object.getOwnPropertyDescriptors ，这个在之前已经讲过了，这里不再重 复</p><h2 id="es9-新增知识点" tabindex="-1"><a class="header-anchor" href="#es9-新增知识点" aria-hidden="true">#</a> ES9 新增知识点</h2><ul><li>Async iterators：后续迭代器讲解</li><li>Object spread operators：前面讲过了</li><li>Promise finally：后续讲 Promise 讲解</li></ul><h2 id="es10-flat-flatmap" tabindex="-1"><a class="header-anchor" href="#es10-flat-flatmap" aria-hidden="true">#</a> ES10 - flat flatMap</h2><ul><li>flat() 方法会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返 回。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token number">10</span><span class="token punctuation">,</span>\n  <span class="token number">20</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span>\n    <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token number">78</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span>\n<span class="token keyword">const</span> newNums <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newNums<span class="token punctuation">)</span> <span class="token comment">// [10,20,2,9,[30,40],[10,45],78,55,88]</span>\n\n<span class="token keyword">const</span> newNums2 <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newNums2<span class="token punctuation">)</span> <span class="token comment">// [10, 20, 2, 9, 30, 40, 10, 45, 78, 55, 88]</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>flatMap() 方法首先使用映射函数映射每个元素，然后将结果压缩成一个新数组。 <ul><li>注意一：flatMap 是先进行 map 操作，再做 flat 的操作；</li><li>注意二：flatMap 中的 flat 相当于深度为 1；</li></ul></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> nums2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span>\n<span class="token keyword">const</span> newNums3 <span class="token operator">=</span> nums2<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> item <span class="token operator">*</span> <span class="token number">2</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> newNums4 <span class="token operator">=</span> nums2<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> item <span class="token operator">*</span> <span class="token number">2</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newNums3<span class="token punctuation">)</span> <span class="token comment">// [20, 40, 60]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newNums4<span class="token punctuation">)</span> <span class="token comment">// [20, 40, 60]</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// flatMap的应用场景</span>\n<span class="token keyword">const</span> messages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Hello World&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;hello lyh&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;my name is coderwhy&#39;</span><span class="token punctuation">]</span>\n<span class="token keyword">const</span> words <span class="token operator">=</span> messages<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> item<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span> <span class="token comment">// [&#39;Hello&#39;, &#39;World&#39;, &#39;hello&#39;, &#39;lyh&#39;, &#39;my&#39;, &#39;name&#39;, &#39;is&#39;, &#39;coderwhy&#39;]</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="es10-object-fromentries" tabindex="-1"><a class="header-anchor" href="#es10-object-fromentries" aria-hidden="true">#</a> ES10 - Object fromEntries</h2><p>在前面，我们可以通过 Object.entries 将一个对象转换成 entries，那么如果我们有一个 entries 了，如何将其转换成对象呢？</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;why&#39;</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">1.88</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> entries <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>entries<span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> newObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> entry <span class="token keyword">of</span> entries<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  newObj<span class="token punctuation">[</span>entry<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> entry<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ES10 提供了 Object.formEntries 来完成转换：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> newObj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">fromEntries</span><span class="token punctuation">(</span>entries<span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newObj<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>那么这个方法有什么应用场景呢？</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> queryString <span class="token operator">=</span> <span class="token string">&#39;name=why&amp;age=18&amp;height=1.88&#39;</span>\n<span class="token keyword">const</span> queryParams <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span>queryString<span class="token punctuation">)</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> param <span class="token keyword">of</span> queryParams<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> paramObj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">fromEntries</span><span class="token punctuation">(</span>queryParams<span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>paramObj<span class="token punctuation">)</span> <span class="token comment">// {name: &#39;why&#39;, age: &#39;18&#39;, height: &#39;1.88&#39;}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="es10-trimstart-trimend" tabindex="-1"><a class="header-anchor" href="#es10-trimstart-trimend" aria-hidden="true">#</a> ES10 - trimStart trimEnd</h2><p>去除一个字符串首尾的空格，我们可以通过 trim 方法，如果单独去除前面或者后面呢？ ES10 中给我们提供了 trimStart 和 trimEnd；</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token string">&#39;    Hello World    &#39;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">trimStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">trimEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="es10-其他知识点" tabindex="-1"><a class="header-anchor" href="#es10-其他知识点" aria-hidden="true">#</a> ES10 其他知识点</h2><ul><li>Symbol description：已经讲过了</li><li>Optional catch binding：后面讲解 try cach 讲解</li></ul><h2 id="es11-bigint" tabindex="-1"><a class="header-anchor" href="#es11-bigint" aria-hidden="true">#</a> ES11 - BigInt</h2><p>在早期的 JavaScript 中，我们不能正确的表示过大的数字：大于 MAX_SAFE_INTEGER 的数值，表示的可能是不正确的。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// ES11之前 max_safe_integer</span>\n<span class="token keyword">const</span> maxInt <span class="token operator">=</span> Number<span class="token punctuation">.</span><span class="token constant">MAX_SAFE_INTEGER</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>maxInt<span class="token punctuation">)</span> <span class="token comment">// 9007199254740991</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>maxInt <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 9007199254740992</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>maxInt <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 9007199254740992</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么 ES11 中，引入了新的数据类型 BigInt，用于表示大的整数：BitInt 的表示方法是在数值的后面加上 n</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> bigInt <span class="token operator">=</span> <span class="token number">900719925474099100n</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bigInt <span class="token operator">+</span> <span class="token number">10n</span><span class="token punctuation">)</span> <span class="token comment">// 900719925474099110n</span>\n\n<span class="token comment">// Number 转 BigInt</span>\n<span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token number">100</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bigInt <span class="token operator">+</span> <span class="token function">BigInt</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 900719925474099200n</span>\n\n<span class="token comment">// BigInt 转 Number</span>\n<span class="token keyword">const</span> smallNum <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>bigInt<span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>smallNum<span class="token punctuation">)</span> <span class="token comment">// 900719925474099100</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="es11-nullish-coalescing-operator" tabindex="-1"><a class="header-anchor" href="#es11-nullish-coalescing-operator" aria-hidden="true">#</a> ES11 - Nullish Coalescing Operator</h2><p>ES11，Nullish Coalescing Operator 增加了空值合并操作符：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token keyword">undefined</span>\n<span class="token comment">// const bar = foo || &quot;default value&quot;;</span>\n<span class="token keyword">const</span> bar <span class="token operator">=</span> foo <span class="token operator">??</span> <span class="token string">&#39;defualt value&#39;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span> <span class="token comment">// default value</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="es11-optional-chaining" tabindex="-1"><a class="header-anchor" href="#es11-optional-chaining" aria-hidden="true">#</a> ES11 - Optional Chaining</h2><p>可选链也是 ES11 中新增一个特性，主要作用是让我们的代码在进行 null 和 undefined 判断时更加清晰和简洁：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> info <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;why&#39;</span><span class="token punctuation">,</span>\n  <span class="token comment">// friend: {</span>\n  <span class="token comment">//   girlFriend: {</span>\n  <span class="token comment">//     name: &quot;hmm&quot;</span>\n  <span class="token comment">//   }</span>\n  <span class="token comment">// }</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span>info <span class="token operator">&amp;&amp;</span> info<span class="token punctuation">.</span>friend <span class="token operator">&amp;&amp;</span> info<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>girlFriend<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>girlFriend<span class="token punctuation">.</span>name<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// ES11提供了可选链(Optional Chainling)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>friend<span class="token operator">?.</span>girlFriend<span class="token operator">?.</span>name<span class="token punctuation">)</span> <span class="token comment">// undefined</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="es11-global-this" tabindex="-1"><a class="header-anchor" href="#es11-global-this" aria-hidden="true">#</a> ES11 - Global This</h2><p>在之前我们希望获取 JavaScript 环境的全局对象，不同的环境获取的方式是不一样的; 比如在浏览器中可以通过 this、window 来获取；比如在 Node 中我们需要通过 global 来获取；</p><p>那么在 ES11 中对获取全局对象进行了统一的规范：globalThis</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 获取某一个环境下的全局对象(Global Object)</span>\n\n<span class="token comment">// 在浏览器下</span>\n<span class="token comment">// console.log(window)</span>\n<span class="token comment">// console.log(this)</span>\n\n<span class="token comment">// 在node下</span>\n<span class="token comment">// console.log(global)</span>\n\n<span class="token comment">// ES11</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>globalThis<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="es11-for-in-标准化" tabindex="-1"><a class="header-anchor" href="#es11-for-in-标准化" aria-hidden="true">#</a> ES11 - for..in 标准化</h2><p>在 ES11 之前，虽然很多浏览器支持 for...in 来遍历对象类型，但是并没有被 ECMA 标准化。在 ES11 中，对其进行了标准化，for...in 是用于遍历对象的 key 的：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;why&#39;</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="es11-其他知识点" tabindex="-1"><a class="header-anchor" href="#es11-其他知识点" aria-hidden="true">#</a> ES11 其他知识点</h2><ul><li>Dynamic Import：后续 ES Module 模块化中讲解。</li><li>Promise.allSettled：后续讲 Promise 的时候讲解。</li><li>import meta：后续 ES Module 模块化中讲解。</li></ul><h2 id="es12-finalizationregistry" tabindex="-1"><a class="header-anchor" href="#es12-finalizationregistry" aria-hidden="true">#</a> ES12 - FinalizationRegistry</h2><p>FinalizationRegistry 对象可以让你在对象被垃圾回收时请求一个回调。FinalizationRegistry 提供了这样的一种方法：当一个在注册表中注册的对象被回收时，请求在某个时间点上调用一个清理回调。（清理回调有时被称为 finalizer ）; 你可以通过调用 register 方法，注册任何你想要清理回调的对象，传入该对象和所含的值;</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> finalRegistry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FinalizationRegistry</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;注册在finalRegistry的对象, 某一个被销毁&#39;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;why&#39;</span> <span class="token punctuation">}</span>\n<span class="token keyword">let</span> info <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">}</span>\n\nfinalRegistry<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&#39;obj&#39;</span><span class="token punctuation">)</span>\nfinalRegistry<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>info<span class="token punctuation">,</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">)</span>\n\nobj <span class="token operator">=</span> <span class="token keyword">null</span>\ninfo <span class="token operator">=</span> <span class="token keyword">null</span>\n\n<span class="token comment">// 垃圾回收时，打印如下</span>\n<span class="token comment">// 注册在finalRegistry的对象, 某一个被销毁 value</span>\n<span class="token comment">// VM1565:2 注册在finalRegistry的对象, 某一个被销毁 obj</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="es12-weakrefs" tabindex="-1"><a class="header-anchor" href="#es12-weakrefs" aria-hidden="true">#</a> ES12 - WeakRefs</h2><p>如果我们默认将一个对象赋值给另外一个引用，那么这个引用是一个强引用：如果我们希望是一个弱引用的话，可以使用 WeakRef；</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// ES12: WeakRef类</span>\n<span class="token comment">// WeakRef.prototype.deref:</span>\n<span class="token comment">// &gt; 如果原对象没有销毁, 那么可以获取到原对象</span>\n<span class="token comment">// &gt; 如果原对象已经销毁, 那么获取到的是undefined</span>\n<span class="token keyword">const</span> finalRegistry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FinalizationRegistry</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;注册在finalRegistry的对象, 某一个被销毁&#39;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;why&#39;</span> <span class="token punctuation">}</span>\n<span class="token keyword">let</span> info <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakRef</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>\n\nfinalRegistry<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&#39;obj&#39;</span><span class="token punctuation">)</span>\n\nobj <span class="token operator">=</span> <span class="token keyword">null</span>\n\n<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span><span class="token function">deref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?.</span>name<span class="token punctuation">)</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span><span class="token function">deref</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> info<span class="token punctuation">.</span><span class="token function">deref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 打印如下</span>\n<span class="token comment">// 注册在finalRegistry的对象, 某一个被销毁 obj</span>\n<span class="token comment">// undefined</span>\n<span class="token comment">// undefined</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="es12-logical-assignment-operators" tabindex="-1"><a class="header-anchor" href="#es12-logical-assignment-operators" aria-hidden="true">#</a> ES12 - logical assignment operators</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 1.||= 逻辑或赋值运算</span>\n<span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>\n<span class="token comment">// message = message || &quot;default value&quot;;</span>\nmessage <span class="token operator">||=</span> <span class="token string">&#39;default value&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token comment">// default value</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 2.&amp;&amp;= 逻辑与赋值运算</span>\n<span class="token comment">// &amp;&amp;</span>\n<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;why&#39;</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">foo</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;foo函数被调用&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\nobj<span class="token punctuation">.</span>foo <span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment">// &amp;&amp;=</span>\n<span class="token keyword">let</span> info <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;why&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 1.判断info</span>\n<span class="token comment">// 2.有值的情况下, 取出info.name</span>\n<span class="token comment">// info = info &amp;&amp; info.name</span>\ninfo <span class="token operator">&amp;&amp;=</span> info<span class="token punctuation">.</span>name\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span> <span class="token comment">// why</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 3.??= 逻辑空赋值运算</span>\n<span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token number">0</span>\nmessage <span class="token operator">??=</span> <span class="token string">&#39;default value&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token comment">// 0</span>\n\n<span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment">// undefined 或者 null 时，会取默认值,其它情况取原来的值</span>\nfoo <span class="token operator">??=</span> <span class="token string">&#39;default value&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span> <span class="token comment">// default value</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="es12-其他知识点" tabindex="-1"><a class="header-anchor" href="#es12-其他知识点" aria-hidden="true">#</a> ES12 其他知识点</h2><ul><li>Numeric Separator：讲过了；</li><li>String.replaceAll：字符串替换；</li></ul><p>replaceAll() 方法返回一个新字符串，新字符串所有满足 pattern 的部分都已被 replacement 替换。pattern 可以是一个字符串或一个 RegExp， replacement 可以是一个字符串或一个在每次匹配被调用的函数。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token string">&#39;dog dog&#39;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">&#39;dog&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;monkey&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// monkey monkey</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">dog</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;monkey&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// monkey monkey</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',77)],p={},o=(0,a(3744).Z)(p,[["render",function(n,s){return(0,e.wg)(),(0,e.iD)("div",null,t)}]])}}]);