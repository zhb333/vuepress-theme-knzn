"use strict";(self.webpackChunkvuepress_theme_knzn=self.webpackChunkvuepress_theme_knzn||[]).push([[4034],{3753:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e=JSON.parse('{"key":"v-48879aae","path":"/5bd12400e63a8fadbc9d9491ad7524cb/","title":"15 类型兼容性，开放心态满足灵活的 JS","lang":"zh-CN","frontmatter":{"permalink":"/5bd12400e63a8fadbc9d9491ad7524cb/","title":"15 类型兼容性，开放心态满足灵活的 JS","author":"前端程序猿","tags":["typescript"],"categories":["大前端"],"postImage":"/images/typescript.webp"},"excerpt":"<p>我们知道 JavaScript 是弱类型语言，它对类型是弱校验，正因为这个特点，所以才有了 TypeScript 这个强类型语言系统的出现，来弥补类型检查的短板。TypeScript 在实现类型强校验的同时，还要满足 JavaScript 灵活的特点，所以就有了类型兼容性这个概念。本小节我们就来全面学习一下 TypeScript 的类型兼容性。</p>\\n","headers":[{"level":2,"title":"1 函数兼容性","slug":"_1-函数兼容性","children":[{"level":3,"title":"(1) 函数参数个数","slug":"_1-函数参数个数","children":[]},{"level":3,"title":"(2)函数参数类型","slug":"_2-函数参数类型","children":[]},{"level":3,"title":"(3)剩余参数和可选参数","slug":"_3-剩余参数和可选参数","children":[]}]},{"level":2,"title":"(4) 函数参数双向协变","slug":"_4-函数参数双向协变","children":[]},{"level":2,"title":"(5) 函数返回值类型","slug":"_5-函数返回值类型","children":[]},{"level":2,"title":"(6) 函数重载","slug":"_6-函数重载","children":[]},{"level":2,"title":"2 枚举","slug":"_2-枚举","children":[]},{"level":2,"title":"3 类","slug":"_3-类","children":[]},{"level":2,"title":"4 泛型","slug":"_4-泛型","children":[]},{"level":2,"title":"本节小结","slug":"本节小结","children":[]}],"git":{"updatedTime":1659093557000,"contributors":[{"name":"张焕标","email":"1140457303@qq.com","commits":1}]},"filePathRelative":"TypeScript学习笔记/15-type-compatibility,-open-mind-and-flexible-JS.md"}')},4851:(n,s,a)=>{a.r(s),a.d(s,{default:()=>o});var e=a(6252);const p=[(0,e.uE)('<p>我们知道 JavaScript 是弱类型语言，它对类型是弱校验，正因为这个特点，所以才有了 TypeScript 这个强类型语言系统的出现，来弥补类型检查的短板。TypeScript 在实现类型强校验的同时，还要满足 JavaScript 灵活的特点，所以就有了类型兼容性这个概念。本小节我们就来全面学习一下 TypeScript 的类型兼容性。</p><blockquote><p>每个人都是自己命运的主宰。 ——斯蒂尔斯</p></blockquote><h2 id="_1-函数兼容性" tabindex="-1"><a class="header-anchor" href="#_1-函数兼容性" aria-hidden="true">#</a> 1 函数兼容性</h2><p>函数的兼容性简单总结就是如下六点：</p><h3 id="_1-函数参数个数" tabindex="-1"><a class="header-anchor" href="#_1-函数参数个数" aria-hidden="true">#</a> (1) 函数参数个数</h3><p>函数参数个数如果要兼容，需要满足一个要求：如果对函数 y 进行赋值，那么要求 x 中的每个参数都应在 y 中有对应，也就是 x 的参数个数小于等于 y 的参数个数，来看例子：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">let</span> <span class="token function-variable function">x</span> <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token number">0</span>\n<span class="token keyword">let</span> <span class="token function-variable function">y</span> <span class="token operator">=</span> <span class="token punctuation">(</span>b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> c<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token number">0</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面定义的两个函数，如果进行赋值的话，来看下两种情况的结果：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>y <span class="token operator">=</span> x <span class="token comment">// 没问题</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将 x 赋值给 y 是可以的，因为如果对函数 y 进行赋值，那么要求 x 中的每个参数都应在 y 中有对应，也就是 x 的参数个数小于等于 y 的参数个数，而至于参数名是否相同是无所谓的。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>x <span class="token operator">=</span> y <span class="token comment">// error Type &#39;(b: number, s: string) =&gt; number&#39; is not assignable to type &#39;(a: number) =&gt; number&#39;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个例子中，y 要赋值给 x，但是 y 的参数个数要大于 x，所以报错。</p><p>这可能不好理解，我们用另一个例子来解释下：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>\narr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\narr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个例子中，传给 forEach 的回调函数的参数是三个，但是可以只用一个，这样就只需写一个参数。我们传入的 forEach 的函数是 forEach 的参数，它是一个函数，这个函数的参数列表是定义在 forEach 方法内的，我们可以传入一个参数少于等于参数列表的函数，但是不能传入一个比参数列表参数个数还多的函数。</p><h3 id="_2-函数参数类型" tabindex="-1"><a class="header-anchor" href="#_2-函数参数类型" aria-hidden="true">#</a> (2)函数参数类型</h3><p>除了参数个数，参数的类型需要对应：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">let</span> <span class="token function-variable function">x</span> <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token number">0</span>\n<span class="token keyword">let</span> <span class="token function-variable function">y</span> <span class="token operator">=</span> <span class="token punctuation">(</span>b<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token number">0</span>\n<span class="token keyword">let</span> <span class="token function-variable function">z</span> <span class="token operator">=</span> <span class="token punctuation">(</span>c<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token boolean">false</span>\nx <span class="token operator">=</span> y <span class="token comment">// error 不能将类型“(b: string) =&gt; number”分配给类型“(a: number) =&gt; number”。</span>\nx <span class="token operator">=</span> z <span class="token comment">// error 不能将类型“(c: number) =&gt; boolean”分配给类型“(a: number) =&gt; number”。</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们看到 x 和 y 两个函数的参数个数和返回值都相同，只是参数类型对不上，所以也是不行的 如果函数 z 想要赋值给 x，要求 z 的返回值类型必须是 x 的返回值类型的子类型</p><h3 id="_3-剩余参数和可选参数" tabindex="-1"><a class="header-anchor" href="#_3-剩余参数和可选参数" aria-hidden="true">#</a> (3)剩余参数和可选参数</h3><p>当要被赋值的函数参数中包含剩余参数（…args）时，赋值的函数可以用任意个数参数代替，但是类型需要对应。来看例子：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> getNum <span class="token operator">=</span> <span class="token punctuation">(</span>\n  <span class="token comment">// 这里定义一个getNum函数，他有两个参数</span>\n  arr<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 第一个参数是一个数组</span>\n  <span class="token function-variable function">callback</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">number</span> <span class="token comment">// 第二个参数是一个函数，这个函数的类型要求可以传入任意多个参数，但是类型必须是数值类型，返回值必须是数值类型</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span> <span class="token comment">// 这个getNum函数直接返回调用传入的第二个参数这个函数，以第一个参数这个数组作为参数的函数返回值</span>\n<span class="token punctuation">}</span>\n<span class="token function">getNum</span><span class="token punctuation">(</span>\n  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=&gt;</span> args<span class="token punctuation">.</span>length <span class="token comment">// 这里传入一个函数，逻辑是返回参数的个数</span>\n<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>剩余参数其实可以看做无数个可选参数，所以在兼容性方面是差不多的，我们来看个可选参数和剩余参数结合的例子：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> getNum <span class="token operator">=</span> <span class="token punctuation">(</span>\n  arr<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">callback</span><span class="token operator">:</span> <span class="token punctuation">(</span>arg1<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> arg2<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">number</span> <span class="token comment">// 这里指定第二个参数callback是一个函数，函数的第二个参数为可选参数</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span> <span class="token comment">// error 应有 1-2 个参数，但获得的数量大于等于 0</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里因为 arr 可能为空数组或不为空，如果为空数组则…arr 不会给 callback 传入任何实际参数，所以这里报错。如果我们换成 <code>return callback(arr[0], …arr)</code>就没问题了。</p><h2 id="_4-函数参数双向协变" tabindex="-1"><a class="header-anchor" href="#_4-函数参数双向协变" aria-hidden="true">#</a> (4) 函数参数双向协变</h2><p>函数参数双向协变即参数类型无需绝对相同，来看个例子：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">let</span> <span class="token function-variable function">funcA</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">let</span> <span class="token function-variable function">funcB</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token comment">// funcA = funcB 和 funcB = funcA都可以</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，funcA 和 funcB 的参数类型并不完全一样，funcA 的参数类型为一个联合类型 number | string，而 funcB 的参数类型为 number | string 中的 number，他们两个函数也是兼容的。</p><h2 id="_5-函数返回值类型" tabindex="-1"><a class="header-anchor" href="#_5-函数返回值类型" aria-hidden="true">#</a> (5) 函数返回值类型</h2><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">=&gt;</span> <span class="token number">0</span>\n<span class="token keyword">let</span> <span class="token function-variable function">y</span> <span class="token operator">=</span> <span class="token punctuation">(</span>b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;a&#39;</span>\n<span class="token keyword">let</span> <span class="token function-variable function">z</span> <span class="token operator">=</span> <span class="token punctuation">(</span>c<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token boolean">false</span>\nx <span class="token operator">=</span> y\nx <span class="token operator">=</span> z <span class="token comment">// 不能将类型“(c: number) =&gt; boolean”分配给类型“(a: number) =&gt; string | number”</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果函数 z 想要赋值给 x，要求 z 的返回值类型必须是 x 的返回值类型的子类型，这个例子中 x 函数的返回值是联合类型，也就是返回值既可以是 string 类型也可以是 number 类型。而 y 的返回值类型是 number 类型，参数个数和类型也没问题，所以可以赋值给 x。而 z 的返回值类型 false 并不是 string 也不是 number，所以不能赋值。</p><h2 id="_6-函数重载" tabindex="-1"><a class="header-anchor" href="#_6-函数重载" aria-hidden="true">#</a> (6) 函数重载</h2><p>带有重载的函数，要求被赋值的函数的每个重载都能在用来赋值的函数上找到对应的签名，来看例子</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">merge</span><span class="token punctuation">(</span>arg1<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> arg2<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token comment">// 这是merge函数重载的一部分</span>\n<span class="token keyword">function</span> <span class="token function">merge</span><span class="token punctuation">(</span>arg1<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> arg2<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token comment">// 这也是merge函数重载的一部分</span>\n<span class="token keyword">function</span> <span class="token function">merge</span><span class="token punctuation">(</span>arg1<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> arg2<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 这是merge函数实体</span>\n  <span class="token keyword">return</span> arg1 <span class="token operator">+</span> arg2\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>arg1<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> arg2<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token comment">// 这是sum函数重载的一部分</span>\n<span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>arg1<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> arg2<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 这是sum函数实体</span>\n  <span class="token keyword">return</span> arg1 <span class="token operator">+</span> arg2\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> func <span class="token operator">=</span> merge\nfunc <span class="token operator">=</span> sum <span class="token comment">// error 不能将类型“(arg1: number, arg2: number) =&gt; number”分配给类型“{ (arg1: number, arg2: number): number; (arg1: string, arg2: string): string; }”</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面例子中，sum 函数的重载缺少参数都为 string 返回值为 string 的情况，与 merge 函数不兼容，所以赋值时会报错。</p><h2 id="_2-枚举" tabindex="-1"><a class="header-anchor" href="#_2-枚举" aria-hidden="true">#</a> 2 枚举</h2><p>数字枚举成员类型与数字类型互相兼容，来看例子</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">enum</span> Status <span class="token punctuation">{</span>\n  On<span class="token punctuation">,</span>\n  Off<span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> s <span class="token operator">=</span> Status<span class="token punctuation">.</span>On\ns <span class="token operator">=</span> <span class="token number">1</span>\ns <span class="token operator">=</span> <span class="token number">3</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然 Status.On 的值是 0，但是这里数字枚举成员类型和数值类型互相兼容，所以这里给 s 赋值为 3 也没问题。</p><p>但是不同枚举值之间是不兼容的：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">enum</span> Status <span class="token punctuation">{</span>\n  On<span class="token punctuation">,</span>\n  Off<span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">enum</span> Color <span class="token punctuation">{</span>\n  White<span class="token punctuation">,</span>\n  Black<span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> s <span class="token operator">=</span> Status<span class="token punctuation">.</span>On\ns <span class="token operator">=</span> Color<span class="token punctuation">.</span>White <span class="token comment">// error Type &#39;Color.White&#39; is not assignable to type &#39;Status&#39;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，虽然 Status.On 和 Color.White 的值都是 0，但它们是不兼容的。</p><p>字符串枚举成员类型和字符串类型是不兼容的，来看例子：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">enum</span> Status <span class="token punctuation">{</span>\n  On <span class="token operator">=</span> <span class="token string">&#39;on&#39;</span><span class="token punctuation">,</span>\n  Off <span class="token operator">=</span> <span class="token string">&#39;off&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> s <span class="token operator">=</span> Status<span class="token punctuation">.</span>On\ns <span class="token operator">=</span> <span class="token string">&#39;Lison&#39;</span> <span class="token comment">// error 不能将类型“&quot;Lison&quot;”分配给类型“Status”</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里会报错，因为字符串字面量类型&#39;Lison&#39;和 Status.On 是不兼容的。</p><h2 id="_3-类" tabindex="-1"><a class="header-anchor" href="#_3-类" aria-hidden="true">#</a> 3 类</h2><p>基本比较</p><p>比较两个类类型的值的兼容性时，只比较实例的成员，类的静态成员和构造函数不进行比较</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>\n  <span class="token keyword">static</span> age<span class="token operator">:</span> <span class="token builtin">number</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>\n  <span class="token keyword">static</span> age<span class="token operator">:</span> <span class="token builtin">string</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">class</span> <span class="token class-name">Food</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> name<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> a<span class="token operator">:</span> Animal\n<span class="token keyword">let</span> p<span class="token operator">:</span> People\n<span class="token keyword">let</span> f<span class="token operator">:</span> Food\na <span class="token operator">=</span> p <span class="token comment">// right</span>\na <span class="token operator">=</span> f <span class="token comment">// error Type &#39;Food&#39; is not assignable to type &#39;Animal&#39;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面例子中，Animal 类和 People 类都有一个 age 静态属性，它们都定义了实例属性 name，且 name 的类型都是 string。我们看到把类型为 People 的 p 赋值给类型为 Animal 的 a 没有问题，因为我们讲了，类类型比较兼容性时，只比较实例的成员，这两个变量虽然类型是不同的类类型，但是它们都有相同字段和类型的实例属性 name，而类的静态成员是不影响兼容性的，所以它俩兼容。而类 Food 定义了一个实例属性 name，类型为 number，所以类型为 Food 的 f 与类型为 Animal 的 a 类型不兼容，不能赋值。</p><p>类的私有成员和受保护成员</p><p>类的私有成员和受保护成员会影响兼容性。当检查类的实例兼容性时，如果目标（也就是要被赋值的那个值）类型（这里实例类型就是创建它的类）包含一个私有成员，那么源（也就是用来赋值的值）类型必须包含来自同一个类的这个私有成员，这就允许子类赋值给父类。先来看例子：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Parent</span> <span class="token punctuation">{</span>\n  <span class="token keyword">private</span> age<span class="token operator">:</span> <span class="token builtin">number</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">class</span> <span class="token class-name">Children</span> <span class="token keyword">extends</span> <span class="token class-name">Parent</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">class</span> <span class="token class-name">Other</span> <span class="token punctuation">{</span>\n  <span class="token keyword">private</span> age<span class="token operator">:</span> <span class="token builtin">number</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> children<span class="token operator">:</span> Parent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Children</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> other<span class="token operator">:</span> Parent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Other</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 不能将类型“Other”分配给类型“Parent”。类型具有私有属性“age”的单独声明</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，当指定 other 为 Parent 类类型，给 other 赋值 Other 创建的实例的时候，会报错。因为 Parent 的 age 属性是私有成员，外界是无法访问到的，所以会类型不兼容。而 children 的类型我们指定为了 Parent 类类型，然后给它赋值为 Children 类的实例，没有问题，是因为 Children 类继承 Parent 类，且实例属性没有差异，Parent 类有私有属性 age，但是因为 Children 类继承了 Parent 类，所以可以赋值。</p><p>同样，使用 protected 受保护修饰符修饰的属性，也是一样的。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Parent</span> <span class="token punctuation">{</span>\n  <span class="token keyword">protected</span> age<span class="token operator">:</span> <span class="token builtin">number</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">class</span> <span class="token class-name">Children</span> <span class="token keyword">extends</span> <span class="token class-name">Parent</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">class</span> <span class="token class-name">Other</span> <span class="token punctuation">{</span>\n  <span class="token keyword">protected</span> age<span class="token operator">:</span> <span class="token builtin">number</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> children<span class="token operator">:</span> Parent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Children</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> other<span class="token operator">:</span> Parent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Other</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 不能将类型“Other”分配给类型“Parent”。属性“age”受保护，但类型“Other”并不是从“Parent”派生的类</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-泛型" tabindex="-1"><a class="header-anchor" href="#_4-泛型" aria-hidden="true">#</a> 4 泛型</h2><p>泛型包含类型参数，这个类型参数可能是任意类型，使用时类型参数会被指定为特定的类型，而这个类型只影响使用了类型参数的部分。来看例子：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Data<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">let</span> data1<span class="token operator">:</span> Data<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span>\n<span class="token keyword">let</span> data2<span class="token operator">:</span> Data<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span>\n\ndata1 <span class="token operator">=</span> data2\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，data1 和 data2 都是 Data 接口的实现，但是指定的泛型参数的类型不同，TS 是结构性类型系统，所以上面将 data2 赋值给 data1 是兼容的，因为 data2 指定了类型参数为 string 类型，但是接口里没有用到参数 T，所以传入 string 类型还是传入 number 类型并没有影响。我们再来举个例子看下：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Data<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>\n  data<span class="token operator">:</span> <span class="token constant">T</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> data1<span class="token operator">:</span> Data<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span>\n<span class="token keyword">let</span> data2<span class="token operator">:</span> Data<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span>\n\ndata1 <span class="token operator">=</span> data2 <span class="token comment">// error 不能将类型“Data&lt;string&gt;”分配给类型“Data&lt;number&gt;”。不能将类型“string”分配给类型“number”</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在结果就不一样了，赋值时报错，因为 data1 和 data2 传入的泛型参数类型不同，生成的结果结构是不兼容的。</p><h2 id="本节小结" tabindex="-1"><a class="header-anchor" href="#本节小结" aria-hidden="true">#</a> 本节小结</h2><p>本小节我们学习了 TypeScript 的类型兼容性，学习了各种情况下赋值的可行性。这里面函数的兼容性最为复杂，能够影响函数兼容性的因素有：</p><ul><li>函数参数个数： 如果对函数 y 进行赋值，那么要求 x 中的每个参数都应在 y 中有对应，也就是 x 的参数个数小于等于 y 的参数个数；</li><li>函数参数类型： 这一点其实和基本的赋值兼容性没差别，只不过比较的不是变量之间而是参数之间；</li><li>剩余参数和可选参数： 当要被赋值的函数参数中包含剩余参数（…args）时，赋值的函数可以用任意个数参数代替，但是类型需要对应，可选参数效果相似；</li><li>函数参数双向协变： 即参数类型无需绝对相同；</li><li>函数返回值类型： 这一点和函数参数类型的兼容性差不多，都是基础的类型比较；</li><li>函数重载： 要求被赋值的函数每个重载都能在用来赋值的函数上找到对应的签名。</li></ul><p>枚举较为简单，数字枚举成员类型与数值类型兼容，字符串枚举成员与字符串类型不兼容。类的兼容性比较的主要依据是实例成员，但是私有成员和受保护成员也会影响兼容性。最后是涉及到泛型的类型兼容性，一定要记住一点的是使用时指定的特定类型只会影响使用了类型参数的部分。</p><p>下个小节我们学习类型保护，还记得前面讲 TS 中补充的六个类型和类型断言的时候，都提到过类型保护，使用类型保护，可以明确告诉编译器某个值是某种类型，虽然听起来和类型断言一样，但是它要比类型断言更便捷，我们下节课来进行详细学习</p>',68)],t={},o=(0,a(3744).Z)(t,[["render",function(n,s){return(0,e.wg)(),(0,e.iD)("div",null,p)}]])}}]);