"use strict";(self.webpackChunkvuepress_theme_knzn=self.webpackChunkvuepress_theme_knzn||[]).push([[651],{3670:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t=JSON.parse('{"key":"v-1615bf52","path":"/db72ec0b0b33d8b4f153ea4d71c1b091/","title":"18 Iterator-Generator","lang":"zh-CN","frontmatter":{"permalink":"/db72ec0b0b33d8b4f153ea4d71c1b091/","title":"18 Iterator-Generator","author":"前端程序猿","tags":["javascript"],"categories":["大前端"],"postImage":"/images/javascript.webp"},"excerpt":"<p>迭代器（iterator），是确使用户可在容器对象（container，例如链表或数组）上遍访的对象，使用该接口无需关心对象的内部实现细节。</p>\\n","headers":[{"level":2,"title":"什么是迭代器？","slug":"什么是迭代器","children":[]},{"level":2,"title":"迭代器的代码练习","slug":"迭代器的代码练习","children":[]},{"level":2,"title":"可迭代对象","slug":"可迭代对象","children":[]},{"level":2,"title":"原生迭代器对象","slug":"原生迭代器对象","children":[]},{"level":2,"title":"可迭代对象的应用","slug":"可迭代对象的应用","children":[]},{"level":2,"title":"自定义类的迭代","slug":"自定义类的迭代","children":[]},{"level":2,"title":"自定义类的迭代实现","slug":"自定义类的迭代实现","children":[]},{"level":2,"title":"什么是生成器？","slug":"什么是生成器","children":[]},{"level":2,"title":"生成器函数执行","slug":"生成器函数执行","children":[]},{"level":2,"title":"生成器传递参数 – next 函数","slug":"生成器传递参数-–-next-函数","children":[]},{"level":2,"title":"生成器提前结束 – return 函数","slug":"生成器提前结束-–-return-函数","children":[]},{"level":2,"title":"生成器抛出异常 – throw 函数","slug":"生成器抛出异常-–-throw-函数","children":[]},{"level":2,"title":"生成器替代迭代器","slug":"生成器替代迭代器","children":[]},{"level":2,"title":"自定义类迭代 – 生成器实现","slug":"自定义类迭代-–-生成器实现","children":[]},{"level":2,"title":"对生成器的操作","slug":"对生成器的操作","children":[]},{"level":2,"title":"异步处理方案","slug":"异步处理方案","children":[]},{"level":2,"title":"Generator 方案","slug":"generator-方案","children":[]},{"level":2,"title":"自动执行 generator 函数","slug":"自动执行-generator-函数","children":[]}],"git":{"updatedTime":1659091972000,"contributors":[{"name":"张焕标","email":"1140457303@qq.com","commits":1}]},"filePathRelative":"深入理解JavaScript/18-Iterator-Generator.md"}')},1003:(n,s,a)=>{a.r(s),a.d(s,{default:()=>o});var t=a(6252);const p=[(0,t.uE)('<p>迭代器（iterator），是确使用户可在容器对象（container，例如链表或数组）上遍访的对象，使用该接口无需关心对象的内部实现细节。</p><h2 id="什么是迭代器" tabindex="-1"><a class="header-anchor" href="#什么是迭代器" aria-hidden="true">#</a> 什么是迭代器？</h2><p>其行为像数据库中的光标，迭代器最早出现在 1974 年设计的 CLU 编程语言中；在各种编程语言的实现中，迭代器的实现方式各不相同，但是基本都有迭代器，比如 Java、Python 等；</p><p>从迭代器的定义我们可以看出来，迭代器是帮助我们对某个数据结构进行遍历的对象。</p><p>在 JavaScript 中，迭代器也是一个具体的对象，这个对象需要符合迭代器协议（iterator protocol）：</p><p>迭代器协议定义了产生一系列值（无论是有限还是无限个）的标准方式；在 js 中这个标准就是一个特定的 next 方法；</p><p>next 方法有如下的要求：一个无参数或者一个参数的函数，返回一个应当拥有以下两个属性的对象：</p><ul><li>done（boolean） <ul><li>如果迭代器可以产生序列中的下一个值，则为 false。</li><li>如果迭代器已将序列迭代完毕，则为 true。这种情况下，value 是可选的，如果它依然存在，即为迭代结束之后的默认返回值。</li></ul></li><li>value: 迭代器返回的任何 JavaScript 值。done 为 true 时可省略。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 编写的一个迭代器</span>\n<span class="token keyword">const</span> iterator <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function-variable function">next</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">123</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 数组</span>\n<span class="token keyword">const</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;cba&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;nba&#39;</span><span class="token punctuation">]</span>\n\n<span class="token comment">// 创建一个迭代器对象来访问数组</span>\n<span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span>\n\n<span class="token keyword">const</span> namesIterator <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function-variable function">next</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> names<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> names<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token keyword">undefined</span> <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>namesIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>namesIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>namesIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// { done: false, value: &quot;nba&quot; }</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>namesIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// { done: true, value: undefined }</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="迭代器的代码练习" tabindex="-1"><a class="header-anchor" href="#迭代器的代码练习" aria-hidden="true">#</a> 迭代器的代码练习</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createArrayIterator</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    <span class="token function-variable function">next</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> arr<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token keyword">undefined</span> <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;cba&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;nba&#39;</span><span class="token punctuation">]</span>\n<span class="token keyword">const</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span>\n\n<span class="token keyword">const</span> namesIterator <span class="token operator">=</span> <span class="token function">createArrayIterator</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span>\n<span class="token keyword">const</span> numsIterator <span class="token operator">=</span> <span class="token function">createArrayIterator</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建一个无限的迭代器</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createNumberIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    <span class="token function-variable function">next</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> index<span class="token operator">++</span> <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="可迭代对象" tabindex="-1"><a class="header-anchor" href="#可迭代对象" aria-hidden="true">#</a> 可迭代对象</h2><p>但是上面的代码整体来说看起来是有点奇怪的：</p><p>我们获取一个数组的时候，需要自己创建一个 index 变量，再创建一个所谓的迭代器对象；事实上我们可以对上面的代码进行进一步的封装，让其变成一个可迭代对象；</p><p>什么又是可迭代对象呢？</p><p>它和迭代器是不同的概念；</p><p>当一个对象实现了 iterable protocol 协议时，它就是一个可迭代对象；这个对象的要求是必须实现 @@iterator 方法，在代码中我们使用 Symbol.iterator 访问该属性；</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 创建一个迭代器对象来访问数组</span>\n<span class="token keyword">const</span> iterableObj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">names</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;cba&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;nba&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      <span class="token function-variable function">next</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>names<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>names<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n          <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token keyword">undefined</span> <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> iterator <span class="token operator">=</span> iterableObj<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们要问一个问题，我们转成这样的一个东西有什么好处呢？</p><p>当一个对象变成一个可迭代对象的时候，进行某些迭代操作，比如 for...of 操作时，其实就会调用它的 @@iterator 方法</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> iterableObj<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="原生迭代器对象" tabindex="-1"><a class="header-anchor" href="#原生迭代器对象" aria-hidden="true">#</a> 原生迭代器对象</h2><p>事实上我们平时创建的很多原生对象已经实现了可迭代协议，会生成一个迭代器对象的：String、Array、Map、Set、arguments 对象、NodeList 集合；</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;cba&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;nba&#39;</span><span class="token punctuation">]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>names<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n<span class="token comment">// const iterator1 = names[Symbol.iterator]()</span>\n<span class="token comment">// console.log(iterator1.next())</span>\n<span class="token comment">// console.log(iterator1.next())</span>\n<span class="token comment">// console.log(iterator1.next())</span>\n<span class="token comment">// console.log(iterator1.next())</span>\n\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> names<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Map/Set</span>\n<span class="token keyword">const</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nset<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>\nset<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>\nset<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> set<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 函数中arguments也是一个可迭代对象</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> arg <span class="token keyword">of</span> arguments<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="可迭代对象的应用" tabindex="-1"><a class="header-anchor" href="#可迭代对象的应用" aria-hidden="true">#</a> 可迭代对象的应用</h2><p>那么这些东西可以被用在哪里呢？</p><ul><li>JavaScript 中语法：for ...of、展开语法（spread syntax）、yield*（后面讲）、解构赋值（Destructuring_assignment）；</li><li>创建一些对象时：new Map([Iterable])、new WeakMap([iterable])、new Set([iterable])、new WeakSet([iterable]);</li><li>一些方法的调用：Promise.all(iterable)、Promise.race(iterable)、Array.from(iterable);</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 1.for of场景</span>\n\n<span class="token comment">// 2.展开语法(spread syntax)</span>\n<span class="token keyword">const</span> iterableObj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">names</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;cba&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;nba&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      <span class="token function-variable function">next</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>names<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>names<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n          <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token keyword">undefined</span> <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;cba&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;nba&#39;</span><span class="token punctuation">]</span>\n<span class="token keyword">const</span> newNames <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>names<span class="token punctuation">,</span> <span class="token operator">...</span>iterableObj<span class="token punctuation">]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newNames<span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;why&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">}</span>\n<span class="token comment">// for (const item of obj) {</span>\n\n<span class="token comment">// }</span>\n<span class="token comment">// ES9(ES2018)中新增的一个特性: 用的不是迭代器</span>\n<span class="token keyword">const</span> newObj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>obj <span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newObj<span class="token punctuation">)</span>\n\n<span class="token comment">// 3.解构语法</span>\n<span class="token keyword">const</span> <span class="token punctuation">[</span>name1<span class="token punctuation">,</span> name2<span class="token punctuation">]</span> <span class="token operator">=</span> names\n<span class="token comment">// const { name, age } = obj 不一样ES9新增的特性</span>\n\n<span class="token comment">// 4.创建一些其他对象时</span>\n<span class="token keyword">const</span> set1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>iterableObj<span class="token punctuation">)</span>\n<span class="token keyword">const</span> set2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> arr1 <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>iterableObj<span class="token punctuation">)</span>\n\n<span class="token comment">// 5.Promise.all</span>\nPromise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>iterableObj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="自定义类的迭代" tabindex="-1"><a class="header-anchor" href="#自定义类的迭代" aria-hidden="true">#</a> 自定义类的迭代</h2><p>在前面我们看到 Array、Set、String、Map 等类创建出来的对象都是可迭代对象：</p><p>在面向对象开发中，我们可以通过 class 定义一个自己的类，这个类可以创建很多的对象：如果我们也希望自己的类创建出来的对象默认是可迭代的，那么在设计类的时候我们就可以添加上@@iterator 方法；</p><p>案例：创建一个 classroom 的类</p><ul><li>教室中有自己的位置、名称、当前教室的学生；</li><li>这个教室可以进来新学生（push）；</li><li>创建的教室对象是可迭代对象；</li></ul><h2 id="自定义类的迭代实现" tabindex="-1"><a class="header-anchor" href="#自定义类的迭代实现" aria-hidden="true">#</a> 自定义类的迭代实现</h2><p>迭代器在某些情况下会在没有完全迭代的情况下中断：</p><p>比如遍历的过程中通过 break、continue、return、throw 中断了循环操作；在解构的时候，没有解构所有的值；</p><p>那么这个时候我们想要监听中断的话，可以添加 return 方法：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 案例: 创建一个教室类, 创建出来的对象都是可迭代对象</span>\n<span class="token keyword">class</span> <span class="token class-name">Classroom</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">address<span class="token punctuation">,</span> name<span class="token punctuation">,</span> students</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address\n    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name\n    <span class="token keyword">this</span><span class="token punctuation">.</span>students <span class="token operator">=</span> students\n  <span class="token punctuation">}</span>\n\n  <span class="token function">entry</span><span class="token punctuation">(</span><span class="token parameter">newStudent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>students<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newStudent<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      <span class="token function-variable function">next</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>students<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>students<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n          <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token keyword">undefined</span> <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token function-variable function">return</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;迭代器提前终止了~&#39;</span><span class="token punctuation">)</span>\n        <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token keyword">undefined</span> <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> classroom <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Classroom</span><span class="token punctuation">(</span><span class="token string">&#39;3幢5楼205&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;计算机教室&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>\n  <span class="token string">&#39;james&#39;</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;kobe&#39;</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;curry&#39;</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;why&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span>\nclassroom<span class="token punctuation">.</span><span class="token function">entry</span><span class="token punctuation">(</span><span class="token string">&#39;lilei&#39;</span><span class="token punctuation">)</span>\n\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> stu <span class="token keyword">of</span> classroom<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>stu <span class="token operator">===</span> <span class="token string">&#39;why&#39;</span><span class="token punctuation">)</span> <span class="token keyword">break</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="什么是生成器" tabindex="-1"><a class="header-anchor" href="#什么是生成器" aria-hidden="true">#</a> 什么是生成器？</h2><p>生成器是 ES6 中新增的一种函数控制、使用的方案，它可以让我们更加灵活的控制函数什么时候继续执行、暂停执 行等。</p><p>平时我们会编写很多的函数，这些函数终止的条件通常是返回值或者发生了异常。</p><p>生成器函数也是一个函数，但是和普通的函数有一些区别：</p><ul><li>首先，生成器函数需要在 function 的后面加一个符号：<code>*</code></li><li>其次，生成器函数可以通过 yield 关键字来控制函数的执行流程：</li><li>最后，生成器函数的返回值是一个 Generator（生成器）：生成器事实上是一种特殊的迭代器；</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;函数开始执行~&#39;</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">const</span> value1 <span class="token operator">=</span> <span class="token number">100</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;第一段代码:&#39;</span><span class="token punctuation">,</span> value1<span class="token punctuation">)</span>\n  <span class="token keyword">yield</span>\n\n  <span class="token keyword">const</span> value2 <span class="token operator">=</span> <span class="token number">200</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;第二段代码:&#39;</span><span class="token punctuation">,</span> value2<span class="token punctuation">)</span>\n  <span class="token keyword">yield</span>\n\n  <span class="token keyword">const</span> value3 <span class="token operator">=</span> <span class="token number">300</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;第三段代码:&#39;</span><span class="token punctuation">,</span> value3<span class="token punctuation">)</span>\n  <span class="token keyword">yield</span>\n\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;函数执行结束~&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 调用生成器函数时, 会给我们返回一个生成器对象</span>\n<span class="token keyword">const</span> generator <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 开始执行第一段代码</span>\ngenerator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 开始执行第二端代码</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;-------------&#39;</span><span class="token punctuation">)</span>\ngenerator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\ngenerator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;----------&#39;</span><span class="token punctuation">)</span>\ngenerator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="生成器函数执行" tabindex="-1"><a class="header-anchor" href="#生成器函数执行" aria-hidden="true">#</a> 生成器函数执行</h2><p>我们发现上面的生成器函数 foo 的执行体压根没有执行，它只是返回了一个生成器对象。</p><p>那么我们如何可以让它执行函数中的东西呢？调用 next 即可；我们之前学习迭代器时，知道迭代器的 next 是会有返回值的；但是我们很多时候不希望 next 返回的是一个 undefined，这个时候我们可以通过 yield 来返回结果；</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 当遇到yield时候值暂停函数的执行</span>\n<span class="token comment">// 当遇到return时候生成器就停止执行</span>\n<span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;函数开始执行~&#39;</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">const</span> value1 <span class="token operator">=</span> <span class="token number">100</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;第一段代码:&#39;</span><span class="token punctuation">,</span> value1<span class="token punctuation">)</span>\n  <span class="token keyword">yield</span> value1\n\n  <span class="token keyword">const</span> value2 <span class="token operator">=</span> <span class="token number">200</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;第二段代码:&#39;</span><span class="token punctuation">,</span> value2<span class="token punctuation">)</span>\n  <span class="token keyword">yield</span> value2\n\n  <span class="token keyword">const</span> value3 <span class="token operator">=</span> <span class="token number">300</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;第三段代码:&#39;</span><span class="token punctuation">,</span> value3<span class="token punctuation">)</span>\n  <span class="token keyword">yield</span> value3\n\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;函数执行结束~&#39;</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> <span class="token string">&#39;123&#39;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// generator本质上是一个特殊的iterator</span>\n<span class="token keyword">const</span> generator <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;返回值1:&#39;</span><span class="token punctuation">,</span> generator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;返回值2:&#39;</span><span class="token punctuation">,</span> generator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;返回值3:&#39;</span><span class="token punctuation">,</span> generator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;返回值3:&#39;</span><span class="token punctuation">,</span> generator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="生成器传递参数-–-next-函数" tabindex="-1"><a class="header-anchor" href="#生成器传递参数-–-next-函数" aria-hidden="true">#</a> 生成器传递参数 – next 函数</h2><p>函数既然可以暂停来分段执行，那么函数应该是可以传递参数的，我们是否可以给每个分段来传递参数呢？答案是可以的；</p><ul><li>我们在调用 next 函数的时候，可以给它传递参数，那么这个参数会作为上一个 yield 语句的返回值；</li><li>注意：也就是说我们是为本次的函数代码块执行提供了一个值；</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;函数开始执行~&#39;</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">const</span> value1 <span class="token operator">=</span> <span class="token number">100</span> <span class="token operator">*</span> num\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;第一段代码:&#39;</span><span class="token punctuation">,</span> value1<span class="token punctuation">)</span>\n  <span class="token keyword">const</span> n <span class="token operator">=</span> <span class="token keyword">yield</span> value1\n\n  <span class="token keyword">const</span> value2 <span class="token operator">=</span> <span class="token number">200</span> <span class="token operator">*</span> n\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;第二段代码:&#39;</span><span class="token punctuation">,</span> value2<span class="token punctuation">)</span>\n  <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token keyword">yield</span> value2\n\n  <span class="token keyword">const</span> value3 <span class="token operator">=</span> <span class="token number">300</span> <span class="token operator">*</span> count\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;第三段代码:&#39;</span><span class="token punctuation">,</span> value3<span class="token punctuation">)</span>\n  <span class="token keyword">yield</span> value3\n\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;函数执行结束~&#39;</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> <span class="token string">&#39;123&#39;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 生成器上的next方法可以传递参数</span>\n<span class="token keyword">const</span> generator <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>generator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token comment">// 第二段代码, 第二次调用next的时候执行的</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>generator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>generator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="生成器提前结束-–-return-函数" tabindex="-1"><a class="header-anchor" href="#生成器提前结束-–-return-函数" aria-hidden="true">#</a> 生成器提前结束 – return 函数</h2><p>还有一个可以给生成器函数传递参数的方法是通过 return 函数：return 传值后这个生成器函数就会结束，之后调用 next 不会继续生成值了；</p><h2 id="生成器抛出异常-–-throw-函数" tabindex="-1"><a class="header-anchor" href="#生成器抛出异常-–-throw-函数" aria-hidden="true">#</a> 生成器抛出异常 – throw 函数</h2><p>除了给生成器函数内部传递参数之外，也可以给生成器函数内部抛出异常：</p><p>抛出异常后我们可以在生成器函数中捕获异常；</p><p>但是在 catch 语句中不能继续 yield 新的值了，但是可以在 catch 语句外使用 yield 继续中断函数的执行；</p><h2 id="生成器替代迭代器" tabindex="-1"><a class="header-anchor" href="#生成器替代迭代器" aria-hidden="true">#</a> 生成器替代迭代器</h2><p>我们发现生成器是一种特殊的迭代器，那么在某些情况下我们可以使用生成器来替代迭代器：</p><p>事实上我们还可以使用 <code>yield*</code>来生产一个可迭代对象：</p><p>这个时候相当于是一种 yield 的语法糖，只不过会依次迭代这个可迭代对象，每次迭代其中的一个值；</p><h2 id="自定义类迭代-–-生成器实现" tabindex="-1"><a class="header-anchor" href="#自定义类迭代-–-生成器实现" aria-hidden="true">#</a> 自定义类迭代 – 生成器实现</h2><p>在之前的自定义类迭代中，我们也可以换成生成器：</p><h2 id="对生成器的操作" tabindex="-1"><a class="header-anchor" href="#对生成器的操作" aria-hidden="true">#</a> 对生成器的操作</h2><p>既然生成器是一个迭代器，那么我们可以对其进行如下的操作：</p><h2 id="异步处理方案" tabindex="-1"><a class="header-anchor" href="#异步处理方案" aria-hidden="true">#</a> 异步处理方案</h2><p>学完了我们前面的 Promise、生成器等，我们目前来看一下异步代码的最终处理方案。</p><p>需求：</p><ul><li>我们需要向服务器发送网络请求获取数据，一共需要发送三次请求；</li><li>第二次的请求 url 依赖于第一次的结果；</li><li>第三次的请求 url 依赖于第二次的结果；</li><li>依次类推；</li></ul><h2 id="generator-方案" tabindex="-1"><a class="header-anchor" href="#generator-方案" aria-hidden="true">#</a> Generator 方案</h2><p>但是上面的代码其实看起来也是阅读性比较差的，有没有办法可以继续来对上面的代码进行优化呢？</p><h2 id="自动执行-generator-函数" tabindex="-1"><a class="header-anchor" href="#自动执行-generator-函数" aria-hidden="true">#</a> 自动执行 generator 函数</h2><p>目前我们的写法有两个问题：</p><ul><li>第一，我们不能确定到底需要调用几层的 Promise 关系；</li><li>第二，如果还有其他需要这样执行的函数，我们应该如何操作呢？</li></ul><p>所以，我们可以封装一个工具函数 execGenerator 自动执行生成器函数：</p>',78)],e={},o=(0,a(3744).Z)(e,[["render",function(n,s){return(0,t.wg)(),(0,t.iD)("div",null,p)}]])}}]);