"use strict";(self.webpackChunkvuepress_theme_knzn=self.webpackChunkvuepress_theme_knzn||[]).push([[4270],{7429:(e,n,a)=>{a.r(n),a.d(n,{data:()=>s});const s=JSON.parse('{"key":"v-2d2eb624","path":"/a0014be7f6e6ab7adf36b153493dd2ff/","title":"Windows 下 Python 虚拟环境全解","lang":"zh-CN","frontmatter":{"permalink":"/a0014be7f6e6ab7adf36b153493dd2ff/","title":"Windows 下 Python 虚拟环境全解","date":"2018-08-10T14:10:28.000Z","categories":["backEnd"],"tags":["python"]},"excerpt":"","headers":[{"level":2,"title":"virtualenv","slug":"virtualenv","children":[{"level":3,"title":"virtualenv 的基本用法","slug":"virtualenv-的基本用法","children":[]}]},{"level":2,"title":"virtualenvwrapper","slug":"virtualenvwrapper","children":[]},{"level":2,"title":"Pycharm 与 virtualenvwrapper 的配合","slug":"pycharm-与-virtualenvwrapper-的配合","children":[]}],"git":{"updatedTime":1659094015000,"contributors":[{"name":"张焕标","email":"1140457303@qq.com","commits":1}]},"filePathRelative":"杂谈/python笔记/04-python-env.md"}')},786:(e,n,a)=>{a.r(n),a.d(n,{default:()=>h});var s=a(6252);const i=(0,s.uE)('<blockquote><p>每个Python应用可能需要各自拥有一套“独立”的Python运行环境。虚拟环境 就是用来为一个应用创建一套“隔离”的 Python运行环境</p></blockquote><h2 id="virtualenv" tabindex="-1"><a class="header-anchor" href="#virtualenv" aria-hidden="true">#</a> virtualenv</h2><h3 id="virtualenv-的基本用法" tabindex="-1"><a class="header-anchor" href="#virtualenv-的基本用法" aria-hidden="true">#</a> virtualenv 的基本用法</h3><blockquote><p>A tool for creating isolated &#39;virtual&#39; python environments.</p></blockquote><p>查看是否已经安装过 virtualenv</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>pip list\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>安装 virtualenv</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>pip <span class="token function">install</span> virtualenv\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用 virtualenv 创建一个 Python 虚拟环境</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 创建使用系统默认Python 版本的虚拟环境</span>\nvirtualenv myenv\n\n<span class="token comment"># 创建指定 Python 版本的 虚拟环境</span>\nvirtualenv -p C:<span class="token punctuation">\\</span>Python37<span class="token punctuation">\\</span>python.exe myenv\n\n<span class="token builtin class-name">cd</span> myenv\n\n<span class="token comment"># 进入虚拟环境</span>\n<span class="token comment"># powershell 默认不允许执行未签名的脚本，为了能成功进入虚拟环境，请先执行：</span>\n<span class="token comment"># Set-ExecutionPolicy -Scope CurrentUser</span>\n<span class="token comment"># ExecutionPolicy: RemoteSigned</span>\n.<span class="token punctuation">\\</span>Scripts<span class="token punctuation">\\</span>activate\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>成功进入虚拟环境的标志是，在命令提示符前面显示 用括号包裹的 Python 虚拟环境名：<strong>(myenv) PS D:\\code\\myenv</strong></p><p>查看虚拟环境下的pip安装包</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>pip list\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以看到只有 <strong>pip</strong> , <strong>setuptools</strong> , <strong>wheel</strong> 三个默认安装包</p><p>退出虚拟环境</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 在虚拟环境的任意目录下</span>\ndeactivate\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="virtualenvwrapper" tabindex="-1"><a class="header-anchor" href="#virtualenvwrapper" aria-hidden="true">#</a> virtualenvwrapper</h2><blockquote><p>virtualenvwrapper 基于 virtualenv， 可以更方便的管理 Python 虚拟环境， 如果使用 virtualenvwrapper-win 作为 Python 虚拟环境的管理工具，完全可以不必安装 virtualenv</p></blockquote><p><strong>需要注意的是， virtualenvwrapper 在 Windows 系统中 只能通过 cmd 才能正常使用</strong></p><p>安装 virtualenvwrapper</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 非Windows</span>\n<span class="token comment"># pip install virtualenvwrapper</span>\n\n<span class="token comment"># Windows</span>\npip <span class="token function">install</span> virtualenvwrapper-win\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建并进入虚拟环境</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>mkvirtualenv myenv\n\n<span class="token comment"># 指定 Python 版本创建 虚拟环境</span>\nmkvirtualenv --python<span class="token operator">=</span>D:<span class="token punctuation">\\</span><span class="token punctuation">\\</span>app<span class="token punctuation">\\</span><span class="token punctuation">\\</span>python37<span class="token punctuation">\\</span><span class="token punctuation">\\</span>python.ext myenv\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过以上命令创建的虚拟环境，会统一储存在 <strong>C:\\Users\\Administrator\\Envs\\</strong></p>',24),l=(0,s.Uk)("如果想更改虚拟环境储存的目录，需要设置一个 "),r=(0,s._)("strong",null,"WORKON_HOME",-1),t=(0,s.Uk)(" 的系统环境变量， 关于如何设置 Windows 环境变量，请找 "),d={href:"https://www.baidu.com",title:"百度",target:"_blank",rel:"noopener noreferrer"},p=(0,s.Uk)("度娘"),v=(0,s.Uk)(" 或 "),c={href:"https://www.google.com.hk",title:"谷歌",target:"_blank",rel:"noopener noreferrer"},u=(0,s.Uk)("谷哥"),o=(0,s.uE)('<p><img src="http://upload-images.jianshu.io/upload_images/12493822-c7037731f61af48a.JPG?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="WORKON_HOME" title="WORKON_HOME"></p><p>进入虚拟环境</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 可以在任意目录，下切换虚拟环境</span>\n<span class="token comment"># 注意， 该命令在powershell 终端无效， 在 cmd 中才有效果</span>\nworkon myenv\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>删除虚拟环境</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>rmvirtualenv myenv\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看所有虚拟环境</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>lsvirtualenv\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>进入当前虚拟环境所在的目录</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>cdvirtualenv\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="pycharm-与-virtualenvwrapper-的配合" tabindex="-1"><a class="header-anchor" href="#pycharm-与-virtualenvwrapper-的配合" aria-hidden="true">#</a> Pycharm 与 virtualenvwrapper 的配合</h2><p><strong>pycharm 本身集成了 virtualenv， 创建新项目时会要求生成虚拟环境， 只要把pycharm生成的虚拟环境安装到 virtualenvwrapper 的虚拟环境目录 ，那么 virtualenvwrapper 同样可以管理 Pycharm生成的是虚拟环境</strong></p><p><img src="http://upload-images.jianshu.io/upload_images/12493822-1fdaa9871675a5ed.JPG?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="WORKON_HOME" title="WORKON_HOME"></p>',12),m={},h=(0,a(3744).Z)(m,[["render",function(e,n){const a=(0,s.up)("ExternalLinkIcon");return(0,s.wg)(),(0,s.iD)("div",null,[i,(0,s._)("p",null,[l,r,t,(0,s._)("a",d,[p,(0,s.Wm)(a)]),v,(0,s._)("a",c,[u,(0,s.Wm)(a)])]),o])}]])}}]);