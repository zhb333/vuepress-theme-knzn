"use strict";(self.webpackChunkvuepress_theme_knzn=self.webpackChunkvuepress_theme_knzn||[]).push([[669],{1424:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t=JSON.parse('{"key":"v-39d47cec","path":"/bdb82d9f1acc56a088c036dcb753f227/","title":"07 深入学习枚举","lang":"zh-CN","frontmatter":{"permalink":"/bdb82d9f1acc56a088c036dcb753f227/","title":"07 深入学习枚举","author":"前端程序猿","tags":["typescript"],"categories":["大前端"],"postImage":"/images/typescript.webp"},"excerpt":"<p>枚举是 TypeScript 新增加的一种数据类型，这在其他很多语言中很常见，但是 JavaScript 却没有。使用枚举，我们可以给一些难以理解的常量赋予一组具有意义的直观的名字，使其更为直观，你可以理解枚举就是一个字典。枚举使用 enum 关键字定义，TypeScript 支持数字和字符串的枚举。</p>\\n","headers":[{"level":2,"title":"1. 数字枚举","slug":"_1-数字枚举","children":[]},{"level":2,"title":"2. 反向映射","slug":"_2-反向映射","children":[]},{"level":2,"title":"3. 字符串枚举","slug":"_3-字符串枚举","children":[]},{"level":2,"title":"4. 异构枚举","slug":"_4-异构枚举","children":[]},{"level":2,"title":"5. 枚举成员类型和联合枚举类型","slug":"_5-枚举成员类型和联合枚举类型","children":[{"level":3,"title":"枚举成员类型","slug":"枚举成员类型","children":[]},{"level":3,"title":"联合枚举类型","slug":"联合枚举类型","children":[]}]},{"level":2,"title":"6. 运行时的枚举","slug":"_6-运行时的枚举","children":[]},{"level":2,"title":"7. const enum","slug":"_7-const-enum","children":[]},{"level":2,"title":"8. 小结","slug":"_8-小结","children":[]}],"git":{"updatedTime":1659093557000,"contributors":[{"name":"张焕标","email":"1140457303@qq.com","commits":1}]},"filePathRelative":"TypeScript学习笔记/07-in-depth-learning-enumeration.md"}')},8954:(n,s,a)=>{a.r(s),a.d(s,{default:()=>c});var t=a(6252);const e=[(0,t.uE)('<p>枚举是 TypeScript 新增加的一种数据类型，这在其他很多语言中很常见，但是 JavaScript 却没有。使用枚举，我们可以给一些难以理解的常量赋予一组具有意义的直观的名字，使其更为直观，你可以理解枚举就是一个字典。枚举使用 enum 关键字定义，TypeScript 支持数字和字符串的枚举。</p><p>| 立志是事业的大门，工作是登堂入室的旅程。 ——巴斯德</p><h2 id="_1-数字枚举" tabindex="-1"><a class="header-anchor" href="#_1-数字枚举" aria-hidden="true">#</a> 1. 数字枚举</h2><p>我们先来通过数字枚举的简单例子，来看下枚举是做什么的：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">enum</span> Status <span class="token punctuation">{</span> <span class="token comment">// 这里你的TSLint可能会报一个：枚举声明只能与命名空间或其他枚举声明合并。这样的错误，这个不影响编译，声明合并的问题我们在后面的小节会讲。</span>\n  Uploading<span class="token punctuation">,</span>\n  Success<span class="token punctuation">,</span>\n  Failed<span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Status<span class="token punctuation">.</span>Uploading<span class="token punctuation">)</span> <span class="token comment">// 0</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Status<span class="token punctuation">[</span><span class="token string">&#39;Success&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 1</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Status<span class="token punctuation">.</span>Failed<span class="token punctuation">)</span> <span class="token comment">// 2</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们使用 enum 关键字定义了一个枚举值 Status，它包含三个字段，每个字段间用逗号隔开。我们使用枚举值的元素值时，就像访问对象的属性一样，你可以使用’.‘操作符和’[]&#39;两种形式访问里面的值，这和对象一样。</p><p>再来看输出的结果，Status.Uploading 是 0，Status[&#39;Success&#39;]是 1，Status.Failed 是 2，我们在定义枚举 Status 的时候，并没有指定索引号，是因为这是默认的编号，我们也可以自己指定：</p><ul><li>修改起始编号</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">enum</span> Color <span class="token punctuation">{</span>\n  Red <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>\n  Blue<span class="token punctuation">,</span>\n  Yellow<span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>Red<span class="token punctuation">,</span> Color<span class="token punctuation">.</span>Blue<span class="token punctuation">,</span> Color<span class="token punctuation">.</span>Yellow<span class="token punctuation">)</span> <span class="token comment">// 2 3 4</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>指定任意字段的索引值</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">enum</span> Status <span class="token punctuation">{</span>\n  Success <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">,</span>\n  NotFound <span class="token operator">=</span> <span class="token number">404</span><span class="token punctuation">,</span>\n  Error <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Status<span class="token punctuation">.</span>Success<span class="token punctuation">,</span> Status<span class="token punctuation">.</span>NotFound<span class="token punctuation">,</span> Status<span class="token punctuation">.</span>Error<span class="token punctuation">)</span> <span class="token comment">// 200 404 500</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>指定部分字段，其他使用默认递增索引</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">enum</span> Status <span class="token punctuation">{</span>\n  Ok <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">,</span>\n  Created<span class="token punctuation">,</span>\n  Accepted<span class="token punctuation">,</span>\n  BadRequest <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">,</span>\n  Unauthorized<span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Status<span class="token punctuation">.</span>Created<span class="token punctuation">,</span> Status<span class="token punctuation">.</span>Accepted<span class="token punctuation">,</span> Status<span class="token punctuation">.</span>Unauthorized<span class="token punctuation">)</span> <span class="token comment">// 201 202 401</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>数字枚举在定义值的时候，可以使用计算值和常量。但是要注意，如果某个字段使用了计算值或常量，那么该字段后面紧接着的字段必须设置初始值，这里不能使用默认的递增值了，来看例子：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token function-variable function">getValue</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token number">0</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">enum</span> ErrorIndex <span class="token punctuation">{</span>\n  a <span class="token operator">=</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  b<span class="token punctuation">,</span> <span class="token comment">// error 枚举成员必须具有初始化的值</span>\n  c<span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">enum</span> RightIndex <span class="token punctuation">{</span>\n  a <span class="token operator">=</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>\n  c<span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> Start <span class="token operator">=</span> <span class="token number">1</span>\n<span class="token keyword">enum</span> Index <span class="token punctuation">{</span>\n  a <span class="token operator">=</span> Start<span class="token punctuation">,</span>\n  b<span class="token punctuation">,</span> <span class="token comment">// error 枚举成员必须具有初始化的值</span>\n  c<span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-反向映射" tabindex="-1"><a class="header-anchor" href="#_2-反向映射" aria-hidden="true">#</a> 2. 反向映射</h2><p>我们定义一个枚举值的时候，可以通过 Enum[‘key’]或者 Enum.key 的形式获取到对应的值 value。TypeScript 还支持反向映射，但是反向映射只支持数字枚举，我们后面要讲的字符串枚举是不支持的。来看下反向映射的例子：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">enum</span> Status <span class="token punctuation">{</span>\n  Success <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">,</span>\n  NotFound <span class="token operator">=</span> <span class="token number">404</span><span class="token punctuation">,</span>\n  Error <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Status<span class="token punctuation">[</span><span class="token string">&#39;Success&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 200</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Status<span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// &#39;Success&#39;</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Status<span class="token punctuation">[</span>Status<span class="token punctuation">[</span><span class="token string">&#39;Success&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// &#39;Success&#39;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>TypeScript 中定义的枚举，编译之后其实是对象，我们来看下上面这个例子中的枚举值 Status 编译后的样子：</p><p>我们可以直接使用 tsc 指定某个文件或者不指定文件直接编译整个目录，运行后就会产生相应的编译后的 JavaScript 文件，你也可以到 TypeScript 官方文档提供的在线练习场，在这里你可以编写 TypeScript 代码，它会同步进行编译。实时编译为 JavaScript 代码，是你了解编译后结果的好方式。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token punctuation">{</span>\n    <span class="token number">200</span><span class="token operator">:</span> <span class="token string">&quot;Success&quot;</span><span class="token punctuation">,</span>\n    <span class="token number">404</span><span class="token operator">:</span> <span class="token string">&quot;NotFound&quot;</span><span class="token punctuation">,</span>\n    <span class="token number">500</span><span class="token operator">:</span> <span class="token string">&quot;Error&quot;</span><span class="token punctuation">,</span>\n    Error<span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">,</span>\n    NotFound<span class="token operator">:</span> <span class="token number">404</span><span class="token punctuation">,</span>\n    Success<span class="token operator">:</span> <span class="token number">200</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，TypeScript 会把我们定义的枚举值的字段名分别作为对象的属性名和值，把枚举值的字段值分别作为对象的值和属性名，同时添加到对象中。这样我们既可以通过枚举值的字段名得到值，也可以通过枚举值的值得到字段名。</p><h2 id="_3-字符串枚举" tabindex="-1"><a class="header-anchor" href="#_3-字符串枚举" aria-hidden="true">#</a> 3. 字符串枚举</h2><p>TypeScript2.4 版本新增了字符串枚举，字符串枚举值要求每个字段的值都必须是字符串字面量，或者是该枚举值中另一个字符串枚举成员，先来看个简单例子</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">enum</span> Message <span class="token punctuation">{</span>\n  Error <span class="token operator">=</span> <span class="token string">&#39;Sorry, error&#39;</span><span class="token punctuation">,</span>\n  Success <span class="token operator">=</span> <span class="token string">&#39;Hoho, success&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Message<span class="token punctuation">.</span>Error<span class="token punctuation">)</span> <span class="token comment">// &#39;Sorry, error&#39;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再来看我们使用枚举值中其他枚举成员的例子：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">enum</span> Message <span class="token punctuation">{</span>\n  Error <span class="token operator">=</span> <span class="token string">&#39;error message&#39;</span><span class="token punctuation">,</span>\n  ServerError <span class="token operator">=</span> Error<span class="token punctuation">,</span>\n  ClientError <span class="token operator">=</span> Error<span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Message<span class="token punctuation">.</span>Error<span class="token punctuation">)</span> <span class="token comment">// &#39;error message&#39;</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Message<span class="token punctuation">.</span>ServerError<span class="token punctuation">)</span> <span class="token comment">// &#39;error message&#39;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，这里的其他枚举成员指的是同一个枚举值中的枚举成员，因为字符串枚举不能使用常量或者计算值，所以也不能使用其他枚举值中的成员。</p><h2 id="_4-异构枚举" tabindex="-1"><a class="header-anchor" href="#_4-异构枚举" aria-hidden="true">#</a> 4. 异构枚举</h2><p>简单来说异构枚举就是枚举值中成员值既有数字类型又有字符串类型，如下：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">enum</span> Result <span class="token punctuation">{</span>\n  Faild <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>\n  Success <span class="token operator">=</span> <span class="token string">&#39;Success&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是这种如果不是真的需要，不建议使用。因为往往我们将一类值整理为一个枚举值的时候，它们的特点是相似的。比如我们在做接口请求时的返回状态码，如果是状态码都是数值，如果是提示信息，都是字符串，所以在使用枚举的时候，往往是可以避免使用异构枚举的，重点是做好类型的整理。</p><h2 id="_5-枚举成员类型和联合枚举类型" tabindex="-1"><a class="header-anchor" href="#_5-枚举成员类型和联合枚举类型" aria-hidden="true">#</a> 5. 枚举成员类型和联合枚举类型</h2><p>如果枚举值里所有成员的值都是字面量类型的值，那么这个枚举的每个成员和枚举值本身都可以作为类型来使用</p><p>先来看下满足条件的枚举成员的值有哪些：</p><ul><li>不带初始值的枚举成员，例如 enum E { A }</li><li>值为字符串字面量，例如 enum E { A = ‘a’ }</li><li>值为数值字面量，或者带有-符号的数值字面量，例如 enum E { A = 1 }、enum E { A = -1 }</li></ul><p>当我们的枚举值的所有成员的值都是上面这三种情况的时候，枚举值和成员就可以作为类型来用：</p><h3 id="枚举成员类型" tabindex="-1"><a class="header-anchor" href="#枚举成员类型" aria-hidden="true">#</a> 枚举成员类型</h3><p>我们可以把符合条件的枚举值的成员作为类型来使用，来看例子：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">enum</span> Animal <span class="token punctuation">{</span>\n  Dog <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>\n  Cat <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">interface</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>\n  type<span class="token operator">:</span> Animal<span class="token punctuation">.</span>Dog <span class="token comment">// 这里使用Animal.Dog作为类型，指定接口Dog的必须有一个type字段，且类型为Animal.Dog</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">interface</span> <span class="token class-name">Cat</span> <span class="token punctuation">{</span>\n  type<span class="token operator">:</span> Animal<span class="token punctuation">.</span>Cat <span class="token comment">// 这里同上</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> cat1<span class="token operator">:</span> Cat <span class="token operator">=</span> <span class="token punctuation">{</span>\n  type<span class="token operator">:</span> Animal<span class="token punctuation">.</span>Dog<span class="token punctuation">,</span> <span class="token comment">// error [ts] 不能将类型“Animal.Dog”分配给类型“Animal.Cat”</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> dog<span class="token operator">:</span> Dog <span class="token operator">=</span> <span class="token punctuation">{</span>\n  type<span class="token operator">:</span> Animal<span class="token punctuation">.</span>Dog<span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="联合枚举类型" tabindex="-1"><a class="header-anchor" href="#联合枚举类型" aria-hidden="true">#</a> 联合枚举类型</h3><p>当我们的枚举值符合条件时，这个枚举值就可以看做是一个包含所有成员的联合类型，先来看例子：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">enum</span> Status <span class="token punctuation">{</span>\n  Off<span class="token punctuation">,</span>\n  On<span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">interface</span> <span class="token class-name">Light</span> <span class="token punctuation">{</span>\n  status<span class="token operator">:</span> Status\n<span class="token punctuation">}</span>\n<span class="token keyword">enum</span> Animal <span class="token punctuation">{</span>\n  Dog <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>\n  Cat <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> light1<span class="token operator">:</span> Light <span class="token operator">=</span> <span class="token punctuation">{</span>\n  status<span class="token operator">:</span> Animal<span class="token punctuation">.</span>Dog<span class="token punctuation">,</span> <span class="token comment">// error 不能将类型“Animal.Dog”分配给类型“Status”</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> light2<span class="token operator">:</span> Light <span class="token operator">=</span> <span class="token punctuation">{</span>\n  status<span class="token operator">:</span> Status<span class="token punctuation">.</span>Off<span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> light3<span class="token operator">:</span> Light <span class="token operator">=</span> <span class="token punctuation">{</span>\n  status<span class="token operator">:</span> Status<span class="token punctuation">.</span>On<span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面例子定义接口 Light 的 status 字段的类型为枚举值 Status，那么此时 status 的属性值必须为 Status.Off 和 Status.On 中的一个，也就是相当于 status: Status.Off | Status.On。</p><h2 id="_6-运行时的枚举" tabindex="-1"><a class="header-anchor" href="#_6-运行时的枚举" aria-hidden="true">#</a> 6. 运行时的枚举</h2><p>枚举在编译成 JavaScript 之后实际是一个对象。这个我们前面讲过了，既然是对象，那么就可以当成对象来使用，我们来看个例子：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">enum</span> <span class="token constant">E</span> <span class="token punctuation">{</span>\n  <span class="token constant">A</span><span class="token punctuation">,</span>\n  <span class="token constant">B</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> getIndex <span class="token operator">=</span> <span class="token punctuation">(</span>enumObj<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token constant">A</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> enumObj<span class="token punctuation">.</span><span class="token constant">A</span>\n<span class="token punctuation">}</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token constant">E</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 0</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这个例子要求 getIndex 的参数为一个对象，且必须包含一个属性名为’A’的属性，其值为数值类型，只要有这个属性即可。当我们调用这个函数，把枚举值 E 作为实参传入是可以的，因为它在运行的时候是一个对象，包含’A’这个属性，因为它在运行的时候相当于下面这个对象：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token punctuation">{</span>\n    <span class="token number">0</span><span class="token operator">:</span> <span class="token string">&quot;A&quot;</span><span class="token punctuation">,</span>\n    <span class="token number">1</span><span class="token operator">:</span> <span class="token string">&quot;B&quot;</span><span class="token punctuation">,</span>\n    <span class="token constant">A</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    <span class="token constant">B</span><span class="token operator">:</span> <span class="token number">1</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-const-enum" tabindex="-1"><a class="header-anchor" href="#_7-const-enum" aria-hidden="true">#</a> 7. const enum</h2><p>我们定义了枚举值之后，编译成 JavaScript 的代码会创建一个对应的对象，这个对象我们可以在程序运行的时候使用。但是如果我们使用枚举只是为了让程序可读性好，并不需要编译后的对象呢？这样会增加一些编译后的代码量。所以 TypeScript 在 1.4 新增 const enum*(完全嵌入的枚举)*，在之前讲的定义枚举的语句之前加上 const 关键字，这样编译后的代码不会创建这个对象，只是会从枚举里拿到相应的值进行替换，来看我们下面的定义：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">enum</span> Status <span class="token punctuation">{</span>\n  Off<span class="token punctuation">,</span>\n  On<span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> <span class="token keyword">enum</span> Animal <span class="token punctuation">{</span>\n  Dog<span class="token punctuation">,</span>\n  Cat<span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> status <span class="token operator">=</span> Status<span class="token punctuation">.</span>On\n<span class="token keyword">const</span> animal <span class="token operator">=</span> Animal<span class="token punctuation">.</span>Dog\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的例子编译成 JavaScript 之后是这样的：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">var</span> Status\n<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>Status<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  Status<span class="token punctuation">[</span><span class="token punctuation">(</span>Status<span class="token punctuation">[</span><span class="token string">&#39;Off&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;Off&#39;</span>\n  Status<span class="token punctuation">[</span><span class="token punctuation">(</span>Status<span class="token punctuation">[</span><span class="token string">&#39;On&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;On&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Status <span class="token operator">||</span> <span class="token punctuation">(</span>Status <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token keyword">var</span> status <span class="token operator">=</span> Status<span class="token punctuation">.</span>On\n<span class="token keyword">var</span> animal <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">/* Dog */</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们来看下 Status 的处理，先是定义一个变量 Status，然后定义一个立即执行函数，在函数内给 Status 添加对应属性，首先 Status[“Off”] = 0 是给 Status 对象设置 Off 属性，并且值设为 0，这个赋值表达式的返回值是等号右边的值，也就是 0，所以 Status[Status[“Off”] = 0] = &quot;Off&quot;相当于 Status[0] = “Off”。创建了这个对象之后，将 Status 的 On 属性值赋值给 status；再来看下 animal 的处理，我们看到编译后的代码并没有像 Status 创建一个 Animal 对象，而是直接把 Animal.Dog 的值 0 替换到了 const animal = Animal.Dog 表达式的 Animal.Dog 位置，这就是 const enum 的用法了。</p><h2 id="_8-小结" tabindex="-1"><a class="header-anchor" href="#_8-小结" aria-hidden="true">#</a> 8. 小结</h2><p>本小节我们学习了两种基本的枚举：数字枚举和字符串枚举，它俩的最主要的区别就是枚举成员值的类型了，数字枚举成员的值必须都是数值类型，而字符串枚举成员的值必须都是字符串。枚举还有一个概念叫反向映射，就是当我们定义了枚举值后，不仅定义了字段到值的映射，同时编译器根据反向映射定义了值到字段的映射。我们还学习了数字枚举和字符串枚举的杂交体——异构枚举，但是很少用，原因也解释过了；枚举值和枚举成员在作为值使用的同时，还可以作为类型使用，但是有三个条件，可以回顾下；最后我们还学习了枚举值在编译后是一个对象，可以在运行时使用，如果我们在运行时用不到，可以在定义枚举时在前面加上 const 来选择不生成对象，而是直接将值替换到响应位置。</p><p>下个小节我们将学习类型断言，通过类型断言，可以在一些情况告诉 TypeScript 编译器，我们的逻辑是对的，不是类型错误，从而达到预期</p>',58)],p={},c=(0,a(3744).Z)(p,[["render",function(n,s){return(0,t.wg)(),(0,t.iD)("div",null,e)}]])}}]);